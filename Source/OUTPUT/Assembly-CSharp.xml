<?xml version="1.0" encoding="UTF-8"?><doc><assembly><name>XMLDocumentation</name></assembly><members><member name="T:AdvSASModule"></member><member name="F:AdvSASModule.absorptiveConstant"></member><member name="F:AdvSASModule.ActivatesEvenIfDisconnected"></member><member name="F:AdvSASModule.aerodynamicArea"></member><member name="F:AdvSASModule.airlock"></member><member name="F:AdvSASModule.airstreamShields"></member><member name="F:AdvSASModule.analyticInternalInsulationFactor"></member><member name="F:AdvSASModule.analyticSkinInsulationFactor"></member><member name="F:AdvSASModule.angularDrag"></member><member name="F:AdvSASModule.angularDragByFI"></member><member name="F:AdvSASModule.atmDensity"></member><member name="F:AdvSASModule.attached"></member><member name="F:AdvSASModule.attachJoint"></member><member name="F:AdvSASModule.attachMethod"></member><member name="F:AdvSASModule.attachMode"></member><member name="F:AdvSASModule.attachNodes"></member><member name="F:AdvSASModule.attachRules"></member><member name="F:AdvSASModule.attPos"></member><member name="F:AdvSASModule.attPos0"></member><member name="F:AdvSASModule.attRotation"></member><member name="F:AdvSASModule.attRotation0"></member><member name="F:AdvSASModule.blackBodyRadiationAlphaMult"></member><member name="F:AdvSASModule.bodyLiftLocalPosition"></member><member name="F:AdvSASModule.bodyLiftLocalVector"></member><member name="F:AdvSASModule.bodyLiftMultiplier"></member><member name="F:AdvSASModule.bodyLiftScalar"></member><member name="F:AdvSASModule.boundsMultiplier"></member><member name="F:AdvSASModule.breakingForce"></member><member name="F:AdvSASModule.breakingTorque"></member><member name="F:AdvSASModule.buoyancy"></member><member name="F:AdvSASModule.buoyancyUseCubeNamed"></member><member name="F:AdvSASModule.buoyancyUseSine"></member><member name="F:AdvSASModule.CenterOfBuoyancy"></member><member name="F:AdvSASModule.CenterOfDisplacement"></member><member name="F:AdvSASModule.children"></member><member name="F:AdvSASModule.childStageOffset"></member><member name="F:AdvSASModule.collider"></member><member name="F:AdvSASModule.collisionEnhancer"></member><member name="F:AdvSASModule.CoLOffset"></member><member name="F:AdvSASModule.CoMOffset"></member><member name="F:AdvSASModule.connected"></member><member name="F:AdvSASModule.CoPOffset"></member><member name="F:AdvSASModule.craftID"></member><member name="F:AdvSASModule.crashTolerance"></member><member name="F:AdvSASModule.CrewCapacity"></member><member name="F:AdvSASModule.crewRespawnTime"></member><member name="F:AdvSASModule.crewTransferAvailable"></member><member name="F:AdvSASModule.currentCollisions"></member><member name="F:AdvSASModule.customPartData"></member><member name="F:AdvSASModule.Damping"></member><member name="F:AdvSASModule.defaultInverseStage"></member><member name="F:AdvSASModule.depth"></member><member name="F:AdvSASModule.dragModel"></member><member name="F:AdvSASModule.dragReferenceVector"></member><member name="F:AdvSASModule.dragScalar"></member><member name="F:AdvSASModule.dragVector"></member><member name="F:AdvSASModule.dragVectorDir"></member><member name="F:AdvSASModule.dragVectorDirLocal"></member><member name="F:AdvSASModule.dragVectorMag"></member><member name="F:AdvSASModule.dragVectorSqrMag"></member><member name="F:AdvSASModule.dynamicPressurekPa"></member><member name="F:AdvSASModule.edgeHighlightThresholdMult"></member><member name="F:AdvSASModule.editorCollision"></member><member name="F:AdvSASModule.editorLinks"></member><member name="F:AdvSASModule.editorStarted"></member><member name="F:AdvSASModule.emissiveConstant"></member><member name="F:AdvSASModule.explosionPotential"></member><member name="F:AdvSASModule.exposedArea"></member><member name="F:AdvSASModule.flagURL"></member><member name="F:AdvSASModule.flightID"></member><member name="F:AdvSASModule.frozen"></member><member name="F:AdvSASModule.fuelCrossFeed"></member><member name="F:AdvSASModule.fuelLookupTargets"></member><member name="F:AdvSASModule.fxGroups"></member><member name="F:AdvSASModule.gaugeThresholdMult"></member><member name="F:AdvSASModule.GroundContact"></member><member name="F:AdvSASModule.gTolerance"></member><member name="F:AdvSASModule.habitableVolume"></member><member name="F:AdvSASModule.hasHeiarchyModel"></member><member name="F:AdvSASModule.hasLiftModule"></member><member name="F:AdvSASModule.hatchObstructionCheckInwardDistance"></member><member name="F:AdvSASModule.hatchObstructionCheckInwardOffset"></member><member name="F:AdvSASModule.hatchObstructionCheckOutwardDistance"></member><member name="F:AdvSASModule.hatchObstructionCheckSphereRadius"></member><member name="F:AdvSASModule.heatConductivity"></member><member name="F:AdvSASModule.heatConvectiveConstant"></member><member name="F:AdvSASModule.highlightColor"></member><member name="F:AdvSASModule.highlighter"></member><member name="F:AdvSASModule.highlightType"></member><member name="F:AdvSASModule.initialVesselName"></member><member name="F:AdvSASModule.inStageIndex"></member><member name="F:AdvSASModule.internalModel"></member><member name="F:AdvSASModule.InternalModelName"></member><member name="F:AdvSASModule.inverseStage"></member><member name="F:AdvSASModule.isClone"></member><member name="F:AdvSASModule.isControlSource"></member><member name="F:AdvSASModule.isMirrored"></member><member name="F:AdvSASModule.isPersistent"></member><member name="F:AdvSASModule.Kd"></member><member name="F:AdvSASModule.Ki"></member><member name="F:AdvSASModule.Kp"></member><member name="F:AdvSASModule.lastFuelRequestId"></member><member name="F:AdvSASModule.launchID"></member><member name="F:AdvSASModule.machNumber"></member><member name="F:AdvSASModule.manualStageOffset"></member><member name="F:AdvSASModule.mass"></member><member name="F:AdvSASModule.maxDepth"></member><member name="F:AdvSASModule.maximum_drag"></member><member name="F:AdvSASModule.maxTemp"></member><member name="F:AdvSASModule.maxTorque"></member><member name="F:AdvSASModule.minDepth"></member><member name="F:AdvSASModule.minimum_drag"></member><member name="F:AdvSASModule.mirrorAxis"></member><member name="F:AdvSASModule.mirrorRefAxis"></member><member name="F:AdvSASModule.mirrorVector"></member><member name="F:AdvSASModule.missionID"></member><member name="F:AdvSASModule.moduleSize"></member><member name="F:AdvSASModule.needPrefabMass"></member><member name="F:AdvSASModule.noAutoEVAAny"></member><member name="F:AdvSASModule.noAutoEVAMulti"></member><member name="F:AdvSASModule.NoCrossFeedNodeKey"></member><member name="F:AdvSASModule.OnEditorAttach"></member><member name="F:AdvSASModule.OnEditorDestroy"></member><member name="F:AdvSASModule.OnEditorDetach"></member><member name="F:AdvSASModule.OnJustAboutToBeDestroyed"></member><member name="F:AdvSASModule.orgPos"></member><member name="F:AdvSASModule.orgRot"></member><member name="F:AdvSASModule.originalStage"></member><member name="F:AdvSASModule.overrideSkillUpdate"></member><member name="F:AdvSASModule.overrideSkillUpdateModules"></member><member name="F:AdvSASModule.packed"></member><member name="F:AdvSASModule.parent"></member><member name="F:AdvSASModule.partBuoyancy"></member><member name="F:AdvSASModule.partInfo"></member><member name="F:AdvSASModule.partName"></member><member name="F:AdvSASModule.partTransform"></member><member name="F:AdvSASModule.PermanentGroundContact"></member><member name="F:AdvSASModule.physicalSignificance"></member><member name="F:AdvSASModule.PhysicsSignificance"></member><member name="F:AdvSASModule.potentialParent"></member><member name="F:AdvSASModule.prefabMass"></member><member name="F:AdvSASModule.prefabSize"></member><member name="F:AdvSASModule.protoModuleCrew"></member><member name="F:AdvSASModule.protoPartSnapshot"></member><member name="F:AdvSASModule.ptd"></member><member name="F:AdvSASModule.radiativeArea"></member><member name="F:AdvSASModule.radiatorCritical"></member><member name="F:AdvSASModule.radiatorHeadroom"></member><member name="F:AdvSASModule.radiatorMax"></member><member name="F:AdvSASModule.rb"></member><member name="F:AdvSASModule.rescaleFactor"></member><member name="F:AdvSASModule.resourceMass"></member><member name="F:AdvSASModule.resourceRequestRemainingThreshold"></member><member name="F:AdvSASModule.resourceTargets"></member><member name="F:AdvSASModule.resourceThermalMass"></member><member name="F:AdvSASModule.ResumeState"></member><member name="F:AdvSASModule.scaleFactor"></member><member name="F:AdvSASModule.separationIndex"></member><member name="F:AdvSASModule.skinExposedArea"></member><member name="F:AdvSASModule.skinExposedAreaFrac"></member><member name="F:AdvSASModule.skinExposedMassMult"></member><member name="F:AdvSASModule.skinInternalConductionMult"></member><member name="F:AdvSASModule.skinMassPerArea"></member><member name="F:AdvSASModule.skinMaxTemp"></member><member name="F:AdvSASModule.skinSkinConductionMult"></member><member name="F:AdvSASModule.skinTemperature"></member><member name="F:AdvSASModule.skinThermalMass"></member><member name="F:AdvSASModule.skinThermalMassModifier"></member><member name="F:AdvSASModule.skinThermalMassRecip"></member><member name="F:AdvSASModule.skinToInternalFlux"></member><member name="F:AdvSASModule.skinUnexposedExternalTemp"></member><member name="F:AdvSASModule.skinUnexposedMassMult"></member><member name="F:AdvSASModule.skinUnexposedTemperature"></member><member name="F:AdvSASModule.skipColliderIgnores"></member><member name="F:AdvSASModule.srfAttachNode"></member><member name="F:AdvSASModule.stackIcon"></member><member name="F:AdvSASModule.stackIconGrouping"></member><member name="F:AdvSASModule.stackPriThreshold"></member><member name="F:AdvSASModule.stackSymmetry"></member><member name="F:AdvSASModule.stageAfter"></member><member name="F:AdvSASModule.stageBefore"></member><member name="F:AdvSASModule.stageOffset"></member><member name="F:AdvSASModule.stagingIcon"></member><member name="F:AdvSASModule.stagingIconAlwaysShown"></member><member name="F:AdvSASModule.stagingOn"></member><member name="F:AdvSASModule.started"></member><member name="F:AdvSASModule.state"></member><member name="F:AdvSASModule.staticPressureAtm"></member><member name="F:AdvSASModule.submergedDragScalar"></member><member name="F:AdvSASModule.submergedDynamicPressurekPa"></member><member name="F:AdvSASModule.submergedLiftScalar"></member><member name="F:AdvSASModule.submergedPortion"></member><member name="F:AdvSASModule.surfaceAreas"></member><member name="F:AdvSASModule.symMethod"></member><member name="F:AdvSASModule.symmetryCounterparts"></member><member name="F:AdvSASModule.temperature"></member><member name="F:AdvSASModule.terrainCollider"></member><member name="F:AdvSASModule.thermalConductionFlux"></member><member name="F:AdvSASModule.thermalConvectionFlux"></member><member name="F:AdvSASModule.thermalExposedFlux"></member><member name="F:AdvSASModule.thermalExposedFluxPrevious"></member><member name="F:AdvSASModule.thermalInternalFlux"></member><member name="F:AdvSASModule.thermalInternalFluxPrevious"></member><member name="F:AdvSASModule.thermalMass"></member><member name="F:AdvSASModule.thermalMassModifier"></member><member name="F:AdvSASModule.thermalMassReciprocal"></member><member name="F:AdvSASModule.thermalRadiationFlux"></member><member name="F:AdvSASModule.thermalSkinFlux"></member><member name="F:AdvSASModule.thermalSkinFluxPrevious"></member><member name="F:AdvSASModule.topNode"></member><member name="F:AdvSASModule.vel"></member><member name="F:AdvSASModule.vessel"></member><member name="F:AdvSASModule.vesselType"></member><member name="F:AdvSASModule.waterAngularDragMultiplier"></member><member name="F:AdvSASModule.WaterContact"></member><member name="P:AdvSASModule.Actions"></member><member name="P:AdvSASModule.ClassID"></member><member name="P:AdvSASModule.ClassName"></member><member name="P:AdvSASModule.DragCubes"></member><member name="P:AdvSASModule.Effects"></member><member name="P:AdvSASModule.enabled"></member><member name="P:AdvSASModule.Events"></member><member name="P:AdvSASModule.Fields"></member><member name="P:AdvSASModule.gameObject"></member><member name="P:AdvSASModule.hasStagingIcon"></member><member name="P:AdvSASModule.hideFlags"></member><member name="P:AdvSASModule.HighlightActive"></member><member name="P:AdvSASModule.HighlightRendererCount"></member><member name="P:AdvSASModule.HighlightRenderers"></member><member name="P:AdvSASModule.isActiveAndEnabled"></member><member name="P:AdvSASModule.isAttachable"></member><member name="P:AdvSASModule.isAttached"></member><member name="P:AdvSASModule.isConnected"></member><member name="P:AdvSASModule.isControllable"></member><member name="P:AdvSASModule.Landed"></member><member name="P:AdvSASModule.localRoot"></member><member name="P:AdvSASModule.Modules"></member><member name="P:AdvSASModule.MouseOver"></member><member name="P:AdvSASModule.name"></member><member name="P:AdvSASModule.NoAutoEVA"></member><member name="P:AdvSASModule.orbit"></member><member name="P:AdvSASModule.PartValues"></member><member name="P:AdvSASModule.RecurseHighlight"></member><member name="P:AdvSASModule.Resources"></member><member name="P:AdvSASModule.Rigidbody"></member><member name="P:AdvSASModule.ShieldedFromAirstream"></member><member name="P:AdvSASModule.Splashed"></member><member name="P:AdvSASModule.State"></member><member name="P:AdvSASModule.tag"></member><member name="P:AdvSASModule.transform"></member><member name="P:AdvSASModule.useGUILayout"></member><member name="P:AdvSASModule.WCoM"></member><member name="M:AdvSASModule.activate(System.Int32,Vessel)"></member><member name="M:AdvSASModule.AddAttachNode(ConfigNode)"></member><member name="M:AdvSASModule.addChild(Part)"></member><member name="M:AdvSASModule.AddCrewmember(ProtoCrewMember)"></member><member name="M:AdvSASModule.AddCrewmemberAt(ProtoCrewMember,System.Int32)"></member><member name="M:AdvSASModule.AddExposedThermalFlux(System.Double)"></member><member name="M:AdvSASModule.AddInternalPart(ConfigNode)"></member><member name="M:AdvSASModule.AddModule(string)"></member><member name="M:AdvSASModule.AddModule(ConfigNode)"></member><member name="M:AdvSASModule.AddOnMouseDown(Part+OnActionDelegate)"></member><member name="M:AdvSASModule.AddOnMouseEnter(Part+OnActionDelegate)"></member><member name="M:AdvSASModule.AddOnMouseExit(Part+OnActionDelegate)"></member><member name="M:AdvSASModule.AddResource(ConfigNode)"></member><member name="M:AdvSASModule.AddShield(IAirstreamShield)"></member><member name="M:AdvSASModule.AddSkinThermalFlux(System.Double)"></member><member name="M:AdvSASModule.AddThermalFlux(System.Double)"></member><member name="M:AdvSASModule.AlreadyProcessedRequest(System.Int32)"></member><member name="M:AdvSASModule.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:AdvSASModule.BroadcastMessage(string,object)"></member><member name="M:AdvSASModule.BroadcastMessage(string)"></member><member name="M:AdvSASModule.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:AdvSASModule.CancelInvoke"></member><member name="M:AdvSASModule.CancelInvoke(string)"></member><member name="M:AdvSASModule.CheckCollision(UnityEngine.Collision)"></member><member name="M:AdvSASModule.checkLanded"></member><member name="M:AdvSASModule.checkPermanentLandedAt"></member><member name="M:AdvSASModule.checkSplashed"></member><member name="M:AdvSASModule.CheckTransferDialog"></member><member name="M:AdvSASModule.cleanReferencesFromOtherParts"></member><member name="M:AdvSASModule.CompareTag(string)"></member><member name="M:AdvSASModule.Couple(Part)"></member><member name="M:AdvSASModule.CreateInternalModel"></member><member name="M:AdvSASModule.deactivate"></member><member name="M:AdvSASModule.decouple(System.Single)"></member><member name="M:AdvSASModule.DespawnIVA"></member><member name="M:AdvSASModule.Die"></member><member name="M:AdvSASModule.disconnect(System.Boolean)"></member><member name="M:AdvSASModule.DrainFuel(System.Single)"></member><member name="M:AdvSASModule.drawStats"></member><member name="M:AdvSASModule.Effect(string)"></member><member name="M:AdvSASModule.Effect(string,System.Single)"></member><member name="M:AdvSASModule.Equals(object)"></member><member name="M:AdvSASModule.explode"></member><member name="M:AdvSASModule.Finalize"></member><member name="M:AdvSASModule.findAttachNode(string)"></member><member name="M:AdvSASModule.findAttachNodeByPart(Part)"></member><member name="M:AdvSASModule.findAttachNodes(string)"></member><member name="M:AdvSASModule.FindChildPart(string)"></member><member name="M:AdvSASModule.FindChildPart(string,System.Boolean)"></member><member name="M:AdvSASModule.FindChildPart"></member><member name="M:AdvSASModule.FindChildPart(System.Boolean)"></member><member name="M:AdvSASModule.FindChildParts"></member><member name="M:AdvSASModule.FindChildParts(System.Boolean)"></member><member name="M:AdvSASModule.FindFuel(Part,System.Collections.Generic.List,System.UInt32)"></member><member name="M:AdvSASModule.findFxGroup(string)"></member><member name="M:AdvSASModule.FindModelAnimator(string,string)"></member><member name="M:AdvSASModule.FindModelAnimators(string)"></member><member name="M:AdvSASModule.FindModelAnimators"></member><member name="M:AdvSASModule.FindModelComponent"></member><member name="M:AdvSASModule.FindModelComponent(string)"></member><member name="M:AdvSASModule.FindModelComponents"></member><member name="M:AdvSASModule.FindModelComponents(string)"></member><member name="M:AdvSASModule.FindModelTransform(string)"></member><member name="M:AdvSASModule.FindModelTransforms(string)"></member><member name="M:AdvSASModule.FindModuleImplementing"></member><member name="M:AdvSASModule.FindModulesImplementing"></member><member name="M:AdvSASModule.FindNonPhysicslessChildren(System.Collections.Generic.List)"></member><member name="M:AdvSASModule.FindNonPhysicslessParent"></member><member name="M:AdvSASModule.FindPartThroughNodes(Part,Part)"></member><member name="M:AdvSASModule.FindResource_StackPriority(Part,System.Collections.Generic.List,System.Int32,System.Double,System.Int32,System.Boolean,double&amp;,double&amp;,System.Collections.Generic.List,System.Boolean)"></member><member name="M:AdvSASModule.force_activate"></member><member name="M:AdvSASModule.freeze"></member><member name="M:AdvSASModule.GetComponent(System.Type)"></member><member name="M:AdvSASModule.GetComponent"></member><member name="M:AdvSASModule.GetComponent(string)"></member><member name="M:AdvSASModule.GetComponentInChildren(System.Type)"></member><member name="M:AdvSASModule.GetComponentInChildren"></member><member name="M:AdvSASModule.GetComponentInParent(System.Type)"></member><member name="M:AdvSASModule.GetComponentInParent"></member><member name="M:AdvSASModule.GetComponents(System.Type)"></member><member name="M:AdvSASModule.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:AdvSASModule.GetComponents(List)"></member><member name="M:AdvSASModule.GetComponents"></member><member name="M:AdvSASModule.GetComponentsInChildren(System.Type)"></member><member name="M:AdvSASModule.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:AdvSASModule.GetComponentsInChildren(System.Boolean)"></member><member name="M:AdvSASModule.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:AdvSASModule.GetComponentsInChildren"></member><member name="M:AdvSASModule.GetComponentsInChildren(List)"></member><member name="M:AdvSASModule.GetComponentsInParent(System.Type)"></member><member name="M:AdvSASModule.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:AdvSASModule.GetComponentsInParent(System.Boolean)"></member><member name="M:AdvSASModule.GetComponentsInParent(System.Boolean,List)"></member><member name="M:AdvSASModule.GetComponentsInParent"></member><member name="M:AdvSASModule.GetConnectedResources(System.Int32,ResourceFlowMode,System.Collections.Generic.List)"></member><member name="M:AdvSASModule.GetConnectedResources(System.Int32,ResourceFlowMode,System.Collections.Generic.List,double&amp;,double&amp;)"></member><member name="M:AdvSASModule.GetHashCode"></member><member name="M:AdvSASModule.GetInstanceID"></member><member name="M:AdvSASModule.GetModuleCosts(System.Single)"></member><member name="M:AdvSASModule.GetModuleMass(System.Single)"></member><member name="M:AdvSASModule.GetModuleSize(UnityEngine.Vector3)"></member><member name="M:AdvSASModule.GetPhysicslessChildMass"></member><member name="M:AdvSASModule.GetReferenceTransform"></member><member name="M:AdvSASModule.GetResourceMass"></member><member name="M:AdvSASModule.GetResourceMass(float&amp;)"></member><member name="M:AdvSASModule.GetResourceMass(double&amp;)"></member><member name="M:AdvSASModule.getSymmetryCounterPart(System.Int32)"></member><member name="M:AdvSASModule.GetType"></member><member name="M:AdvSASModule.HandleCollision(UnityEngine.Collision)"></member><member name="M:AdvSASModule.hasIndirectChild(Part)"></member><member name="M:AdvSASModule.hasIndirectParent(Part)"></member><member name="M:AdvSASModule.highlight(UnityEngine.Color)"></member><member name="M:AdvSASModule.highlightRecursive(UnityEngine.Color)"></member><member name="M:AdvSASModule.InitializeEffects"></member><member name="M:AdvSASModule.InitializeModules"></member><member name="M:AdvSASModule.Invoke(string,System.Single)"></member><member name="M:AdvSASModule.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:AdvSASModule.IsInvoking(string)"></member><member name="M:AdvSASModule.IsInvoking"></member><member name="M:AdvSASModule.isSymmetryCounterPart(Part)"></member><member name="M:AdvSASModule.LateUpdate"></member><member name="M:AdvSASModule.LoadEffects(ConfigNode)"></member><member name="M:AdvSASModule.LoadModule(ConfigNode,int&amp;)"></member><member name="M:AdvSASModule.MemberwiseClone"></member><member name="M:AdvSASModule.onActiveFixedUpdate"></member><member name="M:AdvSASModule.onActiveUpdate"></member><member name="M:AdvSASModule.onAttach(Part,System.Boolean)"></member><member name="M:AdvSASModule.onBackup"></member><member name="M:AdvSASModule.OnCollisionEnter(UnityEngine.Collision)"></member><member name="M:AdvSASModule.OnCollisionExit(UnityEngine.Collision)"></member><member name="M:AdvSASModule.OnCollisionStay(UnityEngine.Collision)"></member><member name="M:AdvSASModule.OnCopy(Part,System.Boolean)"></member><member name="M:AdvSASModule.onCopy(Part,System.Boolean)"></member><member name="M:AdvSASModule.onCtrlUpd(FlightCtrlState)"></member><member name="M:AdvSASModule.onDecouple(System.Single)"></member><member name="M:AdvSASModule.OnDelete"></member><member name="M:AdvSASModule.onDetach(System.Boolean)"></member><member name="M:AdvSASModule.onDisconnect"></member><member name="M:AdvSASModule.OnDrawStats"></member><member name="M:AdvSASModule.onEditorUpdate"></member><member name="M:AdvSASModule.onFlightStart"></member><member name="M:AdvSASModule.onFlightStartAtLaunchPad"></member><member name="M:AdvSASModule.onFlightStateLoad(System.Collections.Generic.Dictionary)"></member><member name="M:AdvSASModule.onFlightStateSave(System.Collections.Generic.Dictionary)"></member><member name="M:AdvSASModule.onGamePause"></member><member name="M:AdvSASModule.onGameResume"></member><member name="M:AdvSASModule.OnGetStats"></member><member name="M:AdvSASModule.onJointDisable"></member><member name="M:AdvSASModule.onJointReset"></member><member name="M:AdvSASModule.OnLiftOff"></member><member name="M:AdvSASModule.OnLoad"></member><member name="M:AdvSASModule.OnLoad(ConfigNode)"></member><member name="M:AdvSASModule.onPack"></member><member name="M:AdvSASModule.onPartActivate"></member><member name="M:AdvSASModule.onPartAttach(Part)"></member><member name="M:AdvSASModule.onPartAwake"></member><member name="M:AdvSASModule.onPartDeactivate"></member><member name="M:AdvSASModule.onPartDelete"></member><member name="M:AdvSASModule.onPartDestroy"></member><member name="M:AdvSASModule.onPartDetach"></member><member name="M:AdvSASModule.onPartExplode"></member><member name="M:AdvSASModule.onPartFixedUpdate"></member><member name="M:AdvSASModule.OnPartJointBreak(System.Single)"></member><member name="M:AdvSASModule.onPartLiftOff"></member><member name="M:AdvSASModule.onPartLoad"></member><member name="M:AdvSASModule.onPartSplashdown"></member><member name="M:AdvSASModule.onPartStart"></member><member name="M:AdvSASModule.onPartTouchdown"></member><member name="M:AdvSASModule.onPartUpdate"></member><member name="M:AdvSASModule.OnPointerClick(UnityEngine.EventSystems.PointerEventData)"></member><member name="M:AdvSASModule.OnSave(ConfigNode)"></member><member name="M:AdvSASModule.OnSplashDown"></member><member name="M:AdvSASModule.onStartComplete"></member><member name="M:AdvSASModule.OnTouchDown"></member><member name="M:AdvSASModule.onUnpack"></member><member name="M:AdvSASModule.Pack"></member><member name="M:AdvSASModule.PromoteToPhysicalPart"></member><member name="M:AdvSASModule.propagateControlUpdate(FlightCtrlState)"></member><member name="M:AdvSASModule.RegisterCrew"></member><member name="M:AdvSASModule.removeChild(Part)"></member><member name="M:AdvSASModule.RemoveCrewmember(ProtoCrewMember)"></member><member name="M:AdvSASModule.RemoveModule(PartModule)"></member><member name="M:AdvSASModule.RemoveModules"></member><member name="M:AdvSASModule.RemoveOnMouseDown(Part+OnActionDelegate)"></member><member name="M:AdvSASModule.RemoveOnMouseEnter(Part+OnActionDelegate)"></member><member name="M:AdvSASModule.RemoveOnMouseExit(Part+OnActionDelegate)"></member><member name="M:AdvSASModule.RemoveShield(IAirstreamShield)"></member><member name="M:AdvSASModule.RequestFuel(Part,System.Single,System.UInt32)"></member><member name="M:AdvSASModule.RequestRCS(System.Single,System.Int32)"></member><member name="M:AdvSASModule.RequestResource(System.Int32,System.Single)"></member><member name="M:AdvSASModule.RequestResource(string,System.Single)"></member><member name="M:AdvSASModule.RequestResource(System.Int32,System.Double)"></member><member name="M:AdvSASModule.RequestResource(string,System.Double)"></member><member name="M:AdvSASModule.RequestResource(System.Int32,System.Double,ResourceFlowMode)"></member><member name="M:AdvSASModule.RequestResource(string,System.Double,ResourceFlowMode)"></member><member name="M:AdvSASModule.ResetCollisionIgnores"></member><member name="M:AdvSASModule.ResetJoints"></member><member name="M:AdvSASModule.ResumeVelocity"></member><member name="M:AdvSASModule.SaveEffects(ConfigNode)"></member><member name="M:AdvSASModule.ScheduleSetCollisionIgnores"></member><member name="M:AdvSASModule.SendEvent(string)"></member><member name="M:AdvSASModule.SendEvent(string,BaseEventData)"></member><member name="M:AdvSASModule.SendEvent(string,BaseEventData,System.Int32)"></member><member name="M:AdvSASModule.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:AdvSASModule.SendMessage(string,object)"></member><member name="M:AdvSASModule.SendMessage(string)"></member><member name="M:AdvSASModule.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:AdvSASModule.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:AdvSASModule.SendMessageUpwards(string,object)"></member><member name="M:AdvSASModule.SendMessageUpwards(string)"></member><member name="M:AdvSASModule.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:AdvSASModule.SetCollisionIgnores"></member><member name="M:AdvSASModule.SetDetectCollisions(System.Boolean)"></member><member name="M:AdvSASModule.SetHierarchyRoot(Part)"></member><member name="M:AdvSASModule.SetHighlight(System.Boolean,System.Boolean)"></member><member name="M:AdvSASModule.SetHighlightColor(UnityEngine.Color)"></member><member name="M:AdvSASModule.SetHighlightColor"></member><member name="M:AdvSASModule.SetHighlightDefault"></member><member name="M:AdvSASModule.SetHighlightType(Part+HighlightType)"></member><member name="M:AdvSASModule.SetLayer(UnityEngine.GameObject,System.Int32)"></member><member name="M:AdvSASModule.SetMirror(UnityEngine.Vector3)"></member><member name="M:AdvSASModule.setOpacity(System.Single)"></member><member name="M:AdvSASModule.setParent(Part)"></member><member name="M:AdvSASModule.SetReferenceTransform(UnityEngine.Transform)"></member><member name="M:AdvSASModule.SetResource(ConfigNode)"></member><member name="M:AdvSASModule.SpawnIVA"></member><member name="M:AdvSASModule.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:AdvSASModule.StartCoroutine(string,object)"></member><member name="M:AdvSASModule.StartCoroutine(string)"></member><member name="M:AdvSASModule.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:AdvSASModule.StopAllCoroutines"></member><member name="M:AdvSASModule.StopCoroutine(string)"></member><member name="M:AdvSASModule.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:AdvSASModule.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:AdvSASModule.ToString"></member><member name="M:AdvSASModule.TransferResource(System.Int32,System.Double)"></member><member name="M:AdvSASModule.TransferResource(PartResource,System.Double,Part)"></member><member name="M:AdvSASModule.Undock(DockedVesselInfo)"></member><member name="M:AdvSASModule.unfreeze"></member><member name="M:AdvSASModule.Unpack"></member><member name="M:AdvSASModule.UnregisterCrew"></member><member name="M:AdvSASModule.UpdateOrgPosAndRot(Part)"></member><member name="M:AdvSASModule.UpdateStageability(System.Boolean,System.Boolean)"></member><member name="M:AdvSASModule.#ctor"></member><member name="T:AstronautComplexFacility"></member><member name="F:AstronautComplexFacility.additionalColliderPrefab"></member><member name="F:AstronautComplexFacility.buildingDescription"></member><member name="F:AstronautComplexFacility.buildingInfoName"></member><member name="F:AstronautComplexFacility.colliderIgnoreMaterialNames"></member><member name="F:AstronautComplexFacility.destructibles"></member><member name="F:AstronautComplexFacility.facilityName"></member><member name="F:AstronautComplexFacility.OnClick"></member><member name="F:AstronautComplexFacility.OnInViewChange"></member><member name="F:AstronautComplexFacility.tooltipPrefab"></member><member name="P:AstronautComplexFacility.BuildingTransform"></member><member name="P:AstronautComplexFacility.enabled"></member><member name="P:AstronautComplexFacility.Facility"></member><member name="P:AstronautComplexFacility.gameObject"></member><member name="P:AstronautComplexFacility.hideFlags"></member><member name="P:AstronautComplexFacility.InView"></member><member name="P:AstronautComplexFacility.isActiveAndEnabled"></member><member name="P:AstronautComplexFacility.name"></member><member name="P:AstronautComplexFacility.Operational"></member><member name="P:AstronautComplexFacility.StructuralDamage"></member><member name="P:AstronautComplexFacility.tag"></member><member name="P:AstronautComplexFacility.TooltipPrefabInstance"></member><member name="P:AstronautComplexFacility.TooltipPrefabInstanceTransform"></member><member name="P:AstronautComplexFacility.TooltipPrefabType"></member><member name="P:AstronautComplexFacility.transform"></member><member name="P:AstronautComplexFacility.useGUILayout"></member><member name="M:AstronautComplexFacility.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:AstronautComplexFacility.BroadcastMessage(string,object)"></member><member name="M:AstronautComplexFacility.BroadcastMessage(string)"></member><member name="M:AstronautComplexFacility.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:AstronautComplexFacility.CancelInvoke"></member><member name="M:AstronautComplexFacility.CancelInvoke(string)"></member><member name="M:AstronautComplexFacility.ColliderHover(System.Boolean)"></member><member name="M:AstronautComplexFacility.CompareTag(string)"></member><member name="M:AstronautComplexFacility.DemolishFacility"></member><member name="M:AstronautComplexFacility.Despawntooltip"></member><member name="M:AstronautComplexFacility.EnterBuilding"></member><member name="M:AstronautComplexFacility.Equals(object)"></member><member name="M:AstronautComplexFacility.Finalize"></member><member name="M:AstronautComplexFacility.FindVesselsAtFacility(FlightState,System.Collections.Generic.IEnumerable)"></member><member name="M:AstronautComplexFacility.FindVesselsAtGrounds(FlightState,UnityEngine.Transform)"></member><member name="M:AstronautComplexFacility.GetCollapseReputationHit"></member><member name="M:AstronautComplexFacility.GetComponent(System.Type)"></member><member name="M:AstronautComplexFacility.GetComponent"></member><member name="M:AstronautComplexFacility.GetComponent(string)"></member><member name="M:AstronautComplexFacility.GetComponentInChildren(System.Type)"></member><member name="M:AstronautComplexFacility.GetComponentInChildren"></member><member name="M:AstronautComplexFacility.GetComponentInParent(System.Type)"></member><member name="M:AstronautComplexFacility.GetComponentInParent"></member><member name="M:AstronautComplexFacility.GetComponents(System.Type)"></member><member name="M:AstronautComplexFacility.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:AstronautComplexFacility.GetComponents(List)"></member><member name="M:AstronautComplexFacility.GetComponents"></member><member name="M:AstronautComplexFacility.GetComponentsInChildren(System.Type)"></member><member name="M:AstronautComplexFacility.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:AstronautComplexFacility.GetComponentsInChildren(System.Boolean)"></member><member name="M:AstronautComplexFacility.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:AstronautComplexFacility.GetComponentsInChildren"></member><member name="M:AstronautComplexFacility.GetComponentsInChildren(List)"></member><member name="M:AstronautComplexFacility.GetComponentsInParent(System.Type)"></member><member name="M:AstronautComplexFacility.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:AstronautComplexFacility.GetComponentsInParent(System.Boolean)"></member><member name="M:AstronautComplexFacility.GetComponentsInParent(System.Boolean,List)"></member><member name="M:AstronautComplexFacility.GetComponentsInParent"></member><member name="M:AstronautComplexFacility.GetHashCode"></member><member name="M:AstronautComplexFacility.GetInstanceID"></member><member name="M:AstronautComplexFacility.GetRepairsCost"></member><member name="M:AstronautComplexFacility.GetStructureDamage"></member><member name="M:AstronautComplexFacility.GetType"></member><member name="M:AstronautComplexFacility.HighLightBuilding(System.Boolean)"></member><member name="M:AstronautComplexFacility.Invoke(string,System.Single)"></member><member name="M:AstronautComplexFacility.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:AstronautComplexFacility.IsFacilityOperational(System.Single)"></member><member name="M:AstronautComplexFacility.IsInvoking(string)"></member><member name="M:AstronautComplexFacility.IsInvoking"></member><member name="M:AstronautComplexFacility.IsOpen"><summary>open is refered to wether you can enter the building (e.g. in sandboxmode the astronaut complex is closed)</summary></member><member name="M:AstronautComplexFacility.KSP.UI.ITooltipController.get_name"></member><member name="M:AstronautComplexFacility.KSP.UI.ITooltipController.set_name(string)"></member><member name="M:AstronautComplexFacility.MemberwiseClone"></member><member name="M:AstronautComplexFacility.OnClicked"></member><member name="M:AstronautComplexFacility.OnContextMenuSpawn"></member><member name="M:AstronautComplexFacility.OnLeftClick"></member><member name="M:AstronautComplexFacility.OnOnDestroy"></member><member name="M:AstronautComplexFacility.OnRightClick"></member><member name="M:AstronautComplexFacility.OnStart"></member><member name="M:AstronautComplexFacility.OnTooltipAboutToDespawn"></member><member name="M:AstronautComplexFacility.OnTooltipAboutToSpawn"></member><member name="M:AstronautComplexFacility.OnTooltipDespawned(KSP.UI.Tooltip)"></member><member name="M:AstronautComplexFacility.OnTooltipSpawned(KSP.UI.Tooltip)"></member><member name="M:AstronautComplexFacility.OnTooltipUpdate(KSP.UI.Tooltip)"></member><member name="M:AstronautComplexFacility.RepairFacility(System.Boolean)"></member><member name="M:AstronautComplexFacility.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:AstronautComplexFacility.SendMessage(string,object)"></member><member name="M:AstronautComplexFacility.SendMessage(string)"></member><member name="M:AstronautComplexFacility.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:AstronautComplexFacility.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:AstronautComplexFacility.SendMessageUpwards(string,object)"></member><member name="M:AstronautComplexFacility.SendMessageUpwards(string)"></member><member name="M:AstronautComplexFacility.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:AstronautComplexFacility.SetupColliders"></member><member name="M:AstronautComplexFacility.SpawnTooltip"></member><member name="M:AstronautComplexFacility.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:AstronautComplexFacility.StartCoroutine(string,object)"></member><member name="M:AstronautComplexFacility.StartCoroutine(string)"></member><member name="M:AstronautComplexFacility.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:AstronautComplexFacility.StopAllCoroutines"></member><member name="M:AstronautComplexFacility.StopCoroutine(string)"></member><member name="M:AstronautComplexFacility.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:AstronautComplexFacility.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:AstronautComplexFacility.ToString"></member><member name="M:AstronautComplexFacility.#ctor"></member><member name="T:AtmosphericEngine"><summary>The old, deprecated class that implemented jet engine parts before PartModules. Use an appropriately configured ModuleEngines instead of this class.</summary></member><member name="F:AtmosphericEngine.absorptiveConstant"></member><member name="F:AtmosphericEngine.ActivatesEvenIfDisconnected"></member><member name="F:AtmosphericEngine.aerodynamicArea"></member><member name="F:AtmosphericEngine.airFlowCurve"></member><member name="F:AtmosphericEngine.airflowEfficiency"></member><member name="F:AtmosphericEngine.airlock"></member><member name="F:AtmosphericEngine.airstreamShields"></member><member name="F:AtmosphericEngine.analyticInternalInsulationFactor"></member><member name="F:AtmosphericEngine.analyticSkinInsulationFactor"></member><member name="F:AtmosphericEngine.angularDrag"></member><member name="F:AtmosphericEngine.angularDragByFI"></member><member name="F:AtmosphericEngine.atmDensity"></member><member name="F:AtmosphericEngine.attached"></member><member name="F:AtmosphericEngine.attachJoint"></member><member name="F:AtmosphericEngine.attachMethod"></member><member name="F:AtmosphericEngine.attachMode"></member><member name="F:AtmosphericEngine.attachNodes"></member><member name="F:AtmosphericEngine.attachRules"></member><member name="F:AtmosphericEngine.attPos"></member><member name="F:AtmosphericEngine.attPos0"></member><member name="F:AtmosphericEngine.attRotation"></member><member name="F:AtmosphericEngine.attRotation0"></member><member name="F:AtmosphericEngine.blackBodyRadiationAlphaMult"></member><member name="F:AtmosphericEngine.bodyLiftLocalPosition"></member><member name="F:AtmosphericEngine.bodyLiftLocalVector"></member><member name="F:AtmosphericEngine.bodyLiftMultiplier"></member><member name="F:AtmosphericEngine.bodyLiftScalar"></member><member name="F:AtmosphericEngine.boundsMultiplier"></member><member name="F:AtmosphericEngine.breakingForce"></member><member name="F:AtmosphericEngine.breakingTorque"></member><member name="F:AtmosphericEngine.buoyancy"></member><member name="F:AtmosphericEngine.buoyancyUseCubeNamed"></member><member name="F:AtmosphericEngine.buoyancyUseSine"></member><member name="F:AtmosphericEngine.CenterOfBuoyancy"></member><member name="F:AtmosphericEngine.CenterOfDisplacement"></member><member name="F:AtmosphericEngine.children"></member><member name="F:AtmosphericEngine.childStageOffset"></member><member name="F:AtmosphericEngine.collider"></member><member name="F:AtmosphericEngine.collisionEnhancer"></member><member name="F:AtmosphericEngine.CoLOffset"></member><member name="F:AtmosphericEngine.CoMOffset"></member><member name="F:AtmosphericEngine.connected"></member><member name="F:AtmosphericEngine.CoPOffset"></member><member name="F:AtmosphericEngine.craftID"></member><member name="F:AtmosphericEngine.crashTolerance"></member><member name="F:AtmosphericEngine.CrewCapacity"></member><member name="F:AtmosphericEngine.crewRespawnTime"></member><member name="F:AtmosphericEngine.crewTransferAvailable"></member><member name="F:AtmosphericEngine.currentCollisions"></member><member name="F:AtmosphericEngine.customPartData"></member><member name="F:AtmosphericEngine.defaultInverseStage"></member><member name="F:AtmosphericEngine.depth"></member><member name="F:AtmosphericEngine.dragModel"></member><member name="F:AtmosphericEngine.dragReferenceVector"></member><member name="F:AtmosphericEngine.dragScalar"></member><member name="F:AtmosphericEngine.dragVector"></member><member name="F:AtmosphericEngine.dragVectorDir"></member><member name="F:AtmosphericEngine.dragVectorDirLocal"></member><member name="F:AtmosphericEngine.dragVectorMag"></member><member name="F:AtmosphericEngine.dragVectorSqrMag"></member><member name="F:AtmosphericEngine.draperPoint"></member><member name="F:AtmosphericEngine.dynamicPressurekPa"></member><member name="F:AtmosphericEngine.edgeHighlightThresholdMult"></member><member name="F:AtmosphericEngine.editorCollision"></member><member name="F:AtmosphericEngine.editorLinks"></member><member name="F:AtmosphericEngine.editorStarted"></member><member name="F:AtmosphericEngine.emissiveConstant"></member><member name="F:AtmosphericEngine.engineAccelerationSpeed"></member><member name="F:AtmosphericEngine.engineDecelerationSpeed"></member><member name="F:AtmosphericEngine.engineEnabled"></member><member name="F:AtmosphericEngine.exhaustDamage"></member><member name="F:AtmosphericEngine.explosionPotential"></member><member name="F:AtmosphericEngine.exposedArea"></member><member name="F:AtmosphericEngine.fallbackGimbalName"></member><member name="F:AtmosphericEngine.flagURL"></member><member name="F:AtmosphericEngine.flightID"></member><member name="F:AtmosphericEngine.frozen"></member><member name="F:AtmosphericEngine.fuelConsumption"></member><member name="F:AtmosphericEngine.fuelCrossFeed"></member><member name="F:AtmosphericEngine.fuelLookupTargets"></member><member name="F:AtmosphericEngine.fuelSources"></member><member name="F:AtmosphericEngine.fxGroups"></member><member name="F:AtmosphericEngine.gaugeThresholdMult"></member><member name="F:AtmosphericEngine.gimbal"></member><member name="F:AtmosphericEngine.gimbalAngleH"></member><member name="F:AtmosphericEngine.gimbalAngleV"></member><member name="F:AtmosphericEngine.gimbalRange"></member><member name="F:AtmosphericEngine.GroundContact"></member><member name="F:AtmosphericEngine.gTolerance"></member><member name="F:AtmosphericEngine.habitableVolume"></member><member name="F:AtmosphericEngine.hasHeiarchyModel"></member><member name="F:AtmosphericEngine.hasLiftModule"></member><member name="F:AtmosphericEngine.hatchObstructionCheckInwardDistance"></member><member name="F:AtmosphericEngine.hatchObstructionCheckInwardOffset"></member><member name="F:AtmosphericEngine.hatchObstructionCheckOutwardDistance"></member><member name="F:AtmosphericEngine.hatchObstructionCheckSphereRadius"></member><member name="F:AtmosphericEngine.heatAnimStates"></member><member name="F:AtmosphericEngine.heatConductivity"></member><member name="F:AtmosphericEngine.heatConvectiveConstant"></member><member name="F:AtmosphericEngine.heatProduction"></member><member name="F:AtmosphericEngine.highlightColor"></member><member name="F:AtmosphericEngine.highlighter"></member><member name="F:AtmosphericEngine.highlightType"></member><member name="F:AtmosphericEngine.initialVesselName"></member><member name="F:AtmosphericEngine.initRot"></member><member name="F:AtmosphericEngine.inStageIndex"></member><member name="F:AtmosphericEngine.intakeResponseSpeed"></member><member name="F:AtmosphericEngine.IntakeShape"></member><member name="F:AtmosphericEngine.intakeSize"></member><member name="F:AtmosphericEngine.intakeSuctionPower"></member><member name="F:AtmosphericEngine.internalModel"></member><member name="F:AtmosphericEngine.InternalModelName"></member><member name="F:AtmosphericEngine.inverseStage"></member><member name="F:AtmosphericEngine.isClone"></member><member name="F:AtmosphericEngine.isControlSource"></member><member name="F:AtmosphericEngine.isMirrored"></member><member name="F:AtmosphericEngine.isPersistent"></member><member name="F:AtmosphericEngine.lastFuelRequestId"></member><member name="F:AtmosphericEngine.launchID"></member><member name="F:AtmosphericEngine.lowerAirflowLimit"></member><member name="F:AtmosphericEngine.machNumber"></member><member name="F:AtmosphericEngine.manualStageOffset"></member><member name="F:AtmosphericEngine.mass"></member><member name="F:AtmosphericEngine.maxDepth"></member><member name="F:AtmosphericEngine.maximum_drag"></member><member name="F:AtmosphericEngine.maximumEnginePower"></member><member name="F:AtmosphericEngine.maximumExhaustSpeed"></member><member name="F:AtmosphericEngine.maxIntakePower"></member><member name="F:AtmosphericEngine.maxTemp"></member><member name="F:AtmosphericEngine.minDepth"></member><member name="F:AtmosphericEngine.minimum_drag"></member><member name="F:AtmosphericEngine.mirrorAxis"></member><member name="F:AtmosphericEngine.mirrorRefAxis"></member><member name="F:AtmosphericEngine.mirrorVector"></member><member name="F:AtmosphericEngine.missionID"></member><member name="F:AtmosphericEngine.moduleSize"></member><member name="F:AtmosphericEngine.needPrefabMass"></member><member name="F:AtmosphericEngine.noAutoEVAAny"></member><member name="F:AtmosphericEngine.noAutoEVAMulti"></member><member name="F:AtmosphericEngine.NoCrossFeedNodeKey"></member><member name="F:AtmosphericEngine.OnEditorAttach"></member><member name="F:AtmosphericEngine.OnEditorDestroy"></member><member name="F:AtmosphericEngine.OnEditorDetach"></member><member name="F:AtmosphericEngine.OnJustAboutToBeDestroyed"></member><member name="F:AtmosphericEngine.optimalAirflow"></member><member name="F:AtmosphericEngine.orgPos"></member><member name="F:AtmosphericEngine.orgRot"></member><member name="F:AtmosphericEngine.originalStage"></member><member name="F:AtmosphericEngine.overrideSkillUpdate"></member><member name="F:AtmosphericEngine.overrideSkillUpdateModules"></member><member name="F:AtmosphericEngine.packed"></member><member name="F:AtmosphericEngine.parent"></member><member name="F:AtmosphericEngine.partBuoyancy"></member><member name="F:AtmosphericEngine.partInfo"></member><member name="F:AtmosphericEngine.partName"></member><member name="F:AtmosphericEngine.partTransform"></member><member name="F:AtmosphericEngine.PermanentGroundContact"></member><member name="F:AtmosphericEngine.physicalSignificance"></member><member name="F:AtmosphericEngine.PhysicsSignificance"></member><member name="F:AtmosphericEngine.potentialParent"></member><member name="F:AtmosphericEngine.prefabMass"></member><member name="F:AtmosphericEngine.prefabSize"></member><member name="F:AtmosphericEngine.protoModuleCrew"></member><member name="F:AtmosphericEngine.protoPartSnapshot"></member><member name="F:AtmosphericEngine.ptd"></member><member name="F:AtmosphericEngine.radiativeArea"></member><member name="F:AtmosphericEngine.radiatorCritical"></member><member name="F:AtmosphericEngine.radiatorHeadroom"></member><member name="F:AtmosphericEngine.radiatorMax"></member><member name="F:AtmosphericEngine.rb"></member><member name="F:AtmosphericEngine.rescaleFactor"></member><member name="F:AtmosphericEngine.resourceMass"></member><member name="F:AtmosphericEngine.resourceRequestRemainingThreshold"></member><member name="F:AtmosphericEngine.resourceTargets"></member><member name="F:AtmosphericEngine.resourceThermalMass"></member><member name="F:AtmosphericEngine.ResumeState"></member><member name="F:AtmosphericEngine.scaleFactor"></member><member name="F:AtmosphericEngine.secondaryGimbalName"></member><member name="F:AtmosphericEngine.separationIndex"></member><member name="F:AtmosphericEngine.skinExposedArea"></member><member name="F:AtmosphericEngine.skinExposedAreaFrac"></member><member name="F:AtmosphericEngine.skinExposedMassMult"></member><member name="F:AtmosphericEngine.skinInternalConductionMult"></member><member name="F:AtmosphericEngine.skinMassPerArea"></member><member name="F:AtmosphericEngine.skinMaxTemp"></member><member name="F:AtmosphericEngine.skinSkinConductionMult"></member><member name="F:AtmosphericEngine.skinTemperature"></member><member name="F:AtmosphericEngine.skinThermalMass"></member><member name="F:AtmosphericEngine.skinThermalMassModifier"></member><member name="F:AtmosphericEngine.skinThermalMassRecip"></member><member name="F:AtmosphericEngine.skinToInternalFlux"></member><member name="F:AtmosphericEngine.skinUnexposedExternalTemp"></member><member name="F:AtmosphericEngine.skinUnexposedMassMult"></member><member name="F:AtmosphericEngine.skinUnexposedTemperature"></member><member name="F:AtmosphericEngine.skipColliderIgnores"></member><member name="F:AtmosphericEngine.speedCurve"></member><member name="F:AtmosphericEngine.srfAttachNode"></member><member name="F:AtmosphericEngine.stackIcon"></member><member name="F:AtmosphericEngine.stackIconGrouping"></member><member name="F:AtmosphericEngine.stackPriThreshold"></member><member name="F:AtmosphericEngine.stackSymmetry"></member><member name="F:AtmosphericEngine.stageAfter"></member><member name="F:AtmosphericEngine.stageBefore"></member><member name="F:AtmosphericEngine.stageOffset"></member><member name="F:AtmosphericEngine.stagingIcon"></member><member name="F:AtmosphericEngine.stagingIconAlwaysShown"></member><member name="F:AtmosphericEngine.stagingOn"></member><member name="F:AtmosphericEngine.stallThreshold"></member><member name="F:AtmosphericEngine.started"></member><member name="F:AtmosphericEngine.state"></member><member name="F:AtmosphericEngine.staticPressureAtm"></member><member name="F:AtmosphericEngine.submergedDragScalar"></member><member name="F:AtmosphericEngine.submergedDynamicPressurekPa"></member><member name="F:AtmosphericEngine.submergedLiftScalar"></member><member name="F:AtmosphericEngine.submergedPortion"></member><member name="F:AtmosphericEngine.surfaceAreas"></member><member name="F:AtmosphericEngine.symMethod"></member><member name="F:AtmosphericEngine.symmetryCounterparts"></member><member name="F:AtmosphericEngine.temperature"></member><member name="F:AtmosphericEngine.terrainCollider"></member><member name="F:AtmosphericEngine.ThermalAnim"></member><member name="F:AtmosphericEngine.thermalConductionFlux"></member><member name="F:AtmosphericEngine.thermalConvectionFlux"></member><member name="F:AtmosphericEngine.thermalExposedFlux"></member><member name="F:AtmosphericEngine.thermalExposedFluxPrevious"></member><member name="F:AtmosphericEngine.thermalInternalFlux"></member><member name="F:AtmosphericEngine.thermalInternalFluxPrevious"></member><member name="F:AtmosphericEngine.thermalMass"></member><member name="F:AtmosphericEngine.thermalMassModifier"></member><member name="F:AtmosphericEngine.thermalMassReciprocal"></member><member name="F:AtmosphericEngine.thermalRadiationFlux"></member><member name="F:AtmosphericEngine.thermalSkinFlux"></member><member name="F:AtmosphericEngine.thermalSkinFluxPrevious"></member><member name="F:AtmosphericEngine.thrust"></member><member name="F:AtmosphericEngine.thrustVector"></member><member name="F:AtmosphericEngine.thrustVectoringCapable"></member><member name="F:AtmosphericEngine.thrVector"></member><member name="F:AtmosphericEngine.topNode"></member><member name="F:AtmosphericEngine.totalEfficiency"></member><member name="F:AtmosphericEngine.upperAirFlowLimit"></member><member name="F:AtmosphericEngine.vel"></member><member name="F:AtmosphericEngine.vessel"></member><member name="F:AtmosphericEngine.vesselSpeed"></member><member name="F:AtmosphericEngine.vesselType"></member><member name="F:AtmosphericEngine.waterAngularDragMultiplier"></member><member name="F:AtmosphericEngine.WaterContact"></member><member name="P:AtmosphericEngine.Actions"></member><member name="P:AtmosphericEngine.ClassID"></member><member name="P:AtmosphericEngine.ClassName"></member><member name="P:AtmosphericEngine.DragCubes"></member><member name="P:AtmosphericEngine.Effects"></member><member name="P:AtmosphericEngine.enabled"></member><member name="P:AtmosphericEngine.Events"></member><member name="P:AtmosphericEngine.Fields"></member><member name="P:AtmosphericEngine.gameObject"></member><member name="P:AtmosphericEngine.hasStagingIcon"></member><member name="P:AtmosphericEngine.hideFlags"></member><member name="P:AtmosphericEngine.HighlightActive"></member><member name="P:AtmosphericEngine.HighlightRendererCount"></member><member name="P:AtmosphericEngine.HighlightRenderers"></member><member name="P:AtmosphericEngine.isActiveAndEnabled"></member><member name="P:AtmosphericEngine.isAttachable"></member><member name="P:AtmosphericEngine.isAttached"></member><member name="P:AtmosphericEngine.isConnected"></member><member name="P:AtmosphericEngine.isControllable"></member><member name="P:AtmosphericEngine.Landed"></member><member name="P:AtmosphericEngine.localRoot"></member><member name="P:AtmosphericEngine.Modules"></member><member name="P:AtmosphericEngine.MouseOver"></member><member name="P:AtmosphericEngine.name"></member><member name="P:AtmosphericEngine.NoAutoEVA"></member><member name="P:AtmosphericEngine.orbit"></member><member name="P:AtmosphericEngine.PartValues"></member><member name="P:AtmosphericEngine.RecurseHighlight"></member><member name="P:AtmosphericEngine.Resources"></member><member name="P:AtmosphericEngine.Rigidbody"></member><member name="P:AtmosphericEngine.ShieldedFromAirstream"></member><member name="P:AtmosphericEngine.Splashed"></member><member name="P:AtmosphericEngine.State"></member><member name="P:AtmosphericEngine.tag"></member><member name="P:AtmosphericEngine.transform"></member><member name="P:AtmosphericEngine.useGUILayout"></member><member name="P:AtmosphericEngine.WCoM"></member><member name="M:AtmosphericEngine.Activate"></member><member name="M:AtmosphericEngine.activate(System.Int32,Vessel)"></member><member name="M:AtmosphericEngine.AddAttachNode(ConfigNode)"></member><member name="M:AtmosphericEngine.addChild(Part)"></member><member name="M:AtmosphericEngine.AddCrewmember(ProtoCrewMember)"></member><member name="M:AtmosphericEngine.AddCrewmemberAt(ProtoCrewMember,System.Int32)"></member><member name="M:AtmosphericEngine.AddExposedThermalFlux(System.Double)"></member><member name="M:AtmosphericEngine.AddInternalPart(ConfigNode)"></member><member name="M:AtmosphericEngine.AddModule(string)"></member><member name="M:AtmosphericEngine.AddModule(ConfigNode)"></member><member name="M:AtmosphericEngine.AddOnMouseDown(Part+OnActionDelegate)"></member><member name="M:AtmosphericEngine.AddOnMouseEnter(Part+OnActionDelegate)"></member><member name="M:AtmosphericEngine.AddOnMouseExit(Part+OnActionDelegate)"></member><member name="M:AtmosphericEngine.AddResource(ConfigNode)"></member><member name="M:AtmosphericEngine.AddShield(IAirstreamShield)"></member><member name="M:AtmosphericEngine.AddSkinThermalFlux(System.Double)"></member><member name="M:AtmosphericEngine.AddThermalFlux(System.Double)"></member><member name="M:AtmosphericEngine.AlreadyProcessedRequest(System.Int32)"></member><member name="M:AtmosphericEngine.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:AtmosphericEngine.BroadcastMessage(string,object)"></member><member name="M:AtmosphericEngine.BroadcastMessage(string)"></member><member name="M:AtmosphericEngine.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:AtmosphericEngine.CancelInvoke"></member><member name="M:AtmosphericEngine.CancelInvoke(string)"></member><member name="M:AtmosphericEngine.CheckCollision(UnityEngine.Collision)"></member><member name="M:AtmosphericEngine.checkLanded"></member><member name="M:AtmosphericEngine.checkPermanentLandedAt"></member><member name="M:AtmosphericEngine.checkSplashed"></member><member name="M:AtmosphericEngine.CheckTransferDialog"></member><member name="M:AtmosphericEngine.cleanReferencesFromOtherParts"></member><member name="M:AtmosphericEngine.CompareTag(string)"></member><member name="M:AtmosphericEngine.Couple(Part)"></member><member name="M:AtmosphericEngine.CreateInternalModel"></member><member name="M:AtmosphericEngine.Deactivate"></member><member name="M:AtmosphericEngine.deactivate"></member><member name="M:AtmosphericEngine.decouple(System.Single)"></member><member name="M:AtmosphericEngine.DespawnIVA"></member><member name="M:AtmosphericEngine.Die"></member><member name="M:AtmosphericEngine.disconnect(System.Boolean)"></member><member name="M:AtmosphericEngine.DrainFuel(System.Single)"></member><member name="M:AtmosphericEngine.drawStats"></member><member name="M:AtmosphericEngine.Effect(string)"></member><member name="M:AtmosphericEngine.Effect(string,System.Single)"></member><member name="M:AtmosphericEngine.Equals(object)"></member><member name="M:AtmosphericEngine.explode"></member><member name="M:AtmosphericEngine.Finalize"></member><member name="M:AtmosphericEngine.findAttachNode(string)"></member><member name="M:AtmosphericEngine.findAttachNodeByPart(Part)"></member><member name="M:AtmosphericEngine.findAttachNodes(string)"></member><member name="M:AtmosphericEngine.FindChildPart(string)"></member><member name="M:AtmosphericEngine.FindChildPart(string,System.Boolean)"></member><member name="M:AtmosphericEngine.FindChildPart"></member><member name="M:AtmosphericEngine.FindChildPart(System.Boolean)"></member><member name="M:AtmosphericEngine.FindChildParts"></member><member name="M:AtmosphericEngine.FindChildParts(System.Boolean)"></member><member name="M:AtmosphericEngine.FindFuel(Part,System.Collections.Generic.List,System.UInt32)"></member><member name="M:AtmosphericEngine.findFxGroup(string)"></member><member name="M:AtmosphericEngine.FindModelAnimator(string,string)"></member><member name="M:AtmosphericEngine.FindModelAnimators(string)"></member><member name="M:AtmosphericEngine.FindModelAnimators"></member><member name="M:AtmosphericEngine.FindModelComponent"></member><member name="M:AtmosphericEngine.FindModelComponent(string)"></member><member name="M:AtmosphericEngine.FindModelComponents"></member><member name="M:AtmosphericEngine.FindModelComponents(string)"></member><member name="M:AtmosphericEngine.FindModelTransform(string)"></member><member name="M:AtmosphericEngine.FindModelTransforms(string)"></member><member name="M:AtmosphericEngine.FindModuleImplementing"></member><member name="M:AtmosphericEngine.FindModulesImplementing"></member><member name="M:AtmosphericEngine.FindNonPhysicslessChildren(System.Collections.Generic.List)"></member><member name="M:AtmosphericEngine.FindNonPhysicslessParent"></member><member name="M:AtmosphericEngine.FindPartThroughNodes(Part,Part)"></member><member name="M:AtmosphericEngine.FindResource_StackPriority(Part,System.Collections.Generic.List,System.Int32,System.Double,System.Int32,System.Boolean,double&amp;,double&amp;,System.Collections.Generic.List,System.Boolean)"></member><member name="M:AtmosphericEngine.force_activate"></member><member name="M:AtmosphericEngine.freeze"></member><member name="M:AtmosphericEngine.GetComponent(System.Type)"></member><member name="M:AtmosphericEngine.GetComponent"></member><member name="M:AtmosphericEngine.GetComponent(string)"></member><member name="M:AtmosphericEngine.GetComponentInChildren(System.Type)"></member><member name="M:AtmosphericEngine.GetComponentInChildren"></member><member name="M:AtmosphericEngine.GetComponentInParent(System.Type)"></member><member name="M:AtmosphericEngine.GetComponentInParent"></member><member name="M:AtmosphericEngine.GetComponents(System.Type)"></member><member name="M:AtmosphericEngine.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:AtmosphericEngine.GetComponents(List)"></member><member name="M:AtmosphericEngine.GetComponents"></member><member name="M:AtmosphericEngine.GetComponentsInChildren(System.Type)"></member><member name="M:AtmosphericEngine.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:AtmosphericEngine.GetComponentsInChildren(System.Boolean)"></member><member name="M:AtmosphericEngine.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:AtmosphericEngine.GetComponentsInChildren"></member><member name="M:AtmosphericEngine.GetComponentsInChildren(List)"></member><member name="M:AtmosphericEngine.GetComponentsInParent(System.Type)"></member><member name="M:AtmosphericEngine.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:AtmosphericEngine.GetComponentsInParent(System.Boolean)"></member><member name="M:AtmosphericEngine.GetComponentsInParent(System.Boolean,List)"></member><member name="M:AtmosphericEngine.GetComponentsInParent"></member><member name="M:AtmosphericEngine.GetConnectedResources(System.Int32,ResourceFlowMode,System.Collections.Generic.List)"></member><member name="M:AtmosphericEngine.GetConnectedResources(System.Int32,ResourceFlowMode,System.Collections.Generic.List,double&amp;,double&amp;)"></member><member name="M:AtmosphericEngine.GetHashCode"></member><member name="M:AtmosphericEngine.GetInstanceID"></member><member name="M:AtmosphericEngine.GetModuleCosts(System.Single)"></member><member name="M:AtmosphericEngine.GetModuleMass(System.Single)"></member><member name="M:AtmosphericEngine.GetModuleSize(UnityEngine.Vector3)"></member><member name="M:AtmosphericEngine.GetPhysicslessChildMass"></member><member name="M:AtmosphericEngine.GetReferenceTransform"></member><member name="M:AtmosphericEngine.GetResourceMass"></member><member name="M:AtmosphericEngine.GetResourceMass(float&amp;)"></member><member name="M:AtmosphericEngine.GetResourceMass(double&amp;)"></member><member name="M:AtmosphericEngine.getSymmetryCounterPart(System.Int32)"></member><member name="M:AtmosphericEngine.GetType"></member><member name="M:AtmosphericEngine.HandleCollision(UnityEngine.Collision)"></member><member name="M:AtmosphericEngine.hasIndirectChild(Part)"></member><member name="M:AtmosphericEngine.hasIndirectParent(Part)"></member><member name="M:AtmosphericEngine.HeatEffectStartup"></member><member name="M:AtmosphericEngine.highlight(UnityEngine.Color)"></member><member name="M:AtmosphericEngine.highlightRecursive(UnityEngine.Color)"></member><member name="M:AtmosphericEngine.InitializeEffects"></member><member name="M:AtmosphericEngine.InitializeModules"></member><member name="M:AtmosphericEngine.Invoke(string,System.Single)"></member><member name="M:AtmosphericEngine.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:AtmosphericEngine.IsInvoking(string)"></member><member name="M:AtmosphericEngine.IsInvoking"></member><member name="M:AtmosphericEngine.isSymmetryCounterPart(Part)"></member><member name="M:AtmosphericEngine.LateUpdate"></member><member name="M:AtmosphericEngine.LoadEffects(ConfigNode)"></member><member name="M:AtmosphericEngine.LoadModule(ConfigNode,int&amp;)"></member><member name="M:AtmosphericEngine.MemberwiseClone"></member><member name="M:AtmosphericEngine.onActiveFixedUpdate"></member><member name="M:AtmosphericEngine.onActiveUpdate"></member><member name="M:AtmosphericEngine.onAttach(Part,System.Boolean)"></member><member name="M:AtmosphericEngine.onBackup"></member><member name="M:AtmosphericEngine.OnCenterOfThrustQuery(CenterOfThrustQuery)"></member><member name="M:AtmosphericEngine.OnCollisionEnter(UnityEngine.Collision)"></member><member name="M:AtmosphericEngine.OnCollisionExit(UnityEngine.Collision)"></member><member name="M:AtmosphericEngine.OnCollisionStay(UnityEngine.Collision)"></member><member name="M:AtmosphericEngine.OnCopy(Part,System.Boolean)"></member><member name="M:AtmosphericEngine.onCopy(Part,System.Boolean)"></member><member name="M:AtmosphericEngine.onCtrlUpd(FlightCtrlState)"></member><member name="M:AtmosphericEngine.onDecouple(System.Single)"></member><member name="M:AtmosphericEngine.OnDelete"></member><member name="M:AtmosphericEngine.onDetach(System.Boolean)"></member><member name="M:AtmosphericEngine.onDisconnect"></member><member name="M:AtmosphericEngine.OnDrawStats"></member><member name="M:AtmosphericEngine.onEditorUpdate"></member><member name="M:AtmosphericEngine.onFlightStart"></member><member name="M:AtmosphericEngine.onFlightStartAtLaunchPad"></member><member name="M:AtmosphericEngine.onFlightStateLoad(System.Collections.Generic.Dictionary)"></member><member name="M:AtmosphericEngine.onFlightStateSave(System.Collections.Generic.Dictionary)"></member><member name="M:AtmosphericEngine.onGamePause"></member><member name="M:AtmosphericEngine.onGameResume"></member><member name="M:AtmosphericEngine.OnGetStats"></member><member name="M:AtmosphericEngine.onJointDisable"></member><member name="M:AtmosphericEngine.onJointReset"></member><member name="M:AtmosphericEngine.OnLiftOff"></member><member name="M:AtmosphericEngine.OnLoad"></member><member name="M:AtmosphericEngine.OnLoad(ConfigNode)"></member><member name="M:AtmosphericEngine.onPack"></member><member name="M:AtmosphericEngine.onPartActivate"></member><member name="M:AtmosphericEngine.onPartAttach(Part)"></member><member name="M:AtmosphericEngine.onPartAwake"></member><member name="M:AtmosphericEngine.onPartDeactivate"></member><member name="M:AtmosphericEngine.onPartDelete"></member><member name="M:AtmosphericEngine.onPartDestroy"></member><member name="M:AtmosphericEngine.onPartDetach"></member><member name="M:AtmosphericEngine.onPartExplode"></member><member name="M:AtmosphericEngine.onPartFixedUpdate"></member><member name="M:AtmosphericEngine.OnPartJointBreak(System.Single)"></member><member name="M:AtmosphericEngine.onPartLiftOff"></member><member name="M:AtmosphericEngine.onPartLoad"></member><member name="M:AtmosphericEngine.onPartSplashdown"></member><member name="M:AtmosphericEngine.onPartStart"></member><member name="M:AtmosphericEngine.onPartTouchdown"></member><member name="M:AtmosphericEngine.onPartUpdate"></member><member name="M:AtmosphericEngine.OnPointerClick(UnityEngine.EventSystems.PointerEventData)"></member><member name="M:AtmosphericEngine.OnSave(ConfigNode)"></member><member name="M:AtmosphericEngine.OnSplashDown"></member><member name="M:AtmosphericEngine.onStartComplete"></member><member name="M:AtmosphericEngine.OnTouchDown"></member><member name="M:AtmosphericEngine.onUnpack"></member><member name="M:AtmosphericEngine.Pack"></member><member name="M:AtmosphericEngine.PromoteToPhysicalPart"></member><member name="M:AtmosphericEngine.propagateControlUpdate(FlightCtrlState)"></member><member name="M:AtmosphericEngine.RegisterCrew"></member><member name="M:AtmosphericEngine.removeChild(Part)"></member><member name="M:AtmosphericEngine.RemoveCrewmember(ProtoCrewMember)"></member><member name="M:AtmosphericEngine.RemoveModule(PartModule)"></member><member name="M:AtmosphericEngine.RemoveModules"></member><member name="M:AtmosphericEngine.RemoveOnMouseDown(Part+OnActionDelegate)"></member><member name="M:AtmosphericEngine.RemoveOnMouseEnter(Part+OnActionDelegate)"></member><member name="M:AtmosphericEngine.RemoveOnMouseExit(Part+OnActionDelegate)"></member><member name="M:AtmosphericEngine.RemoveShield(IAirstreamShield)"></member><member name="M:AtmosphericEngine.RequestFuel(Part,System.Single,System.UInt32)"></member><member name="M:AtmosphericEngine.RequestRCS(System.Single,System.Int32)"></member><member name="M:AtmosphericEngine.RequestResource(System.Int32,System.Single)"></member><member name="M:AtmosphericEngine.RequestResource(string,System.Single)"></member><member name="M:AtmosphericEngine.RequestResource(System.Int32,System.Double)"></member><member name="M:AtmosphericEngine.RequestResource(string,System.Double)"></member><member name="M:AtmosphericEngine.RequestResource(System.Int32,System.Double,ResourceFlowMode)"></member><member name="M:AtmosphericEngine.RequestResource(string,System.Double,ResourceFlowMode)"></member><member name="M:AtmosphericEngine.ResetCollisionIgnores"></member><member name="M:AtmosphericEngine.ResetJoints"></member><member name="M:AtmosphericEngine.ResumeVelocity"></member><member name="M:AtmosphericEngine.SaveEffects(ConfigNode)"></member><member name="M:AtmosphericEngine.ScheduleSetCollisionIgnores"></member><member name="M:AtmosphericEngine.SendEvent(string)"></member><member name="M:AtmosphericEngine.SendEvent(string,BaseEventData)"></member><member name="M:AtmosphericEngine.SendEvent(string,BaseEventData,System.Int32)"></member><member name="M:AtmosphericEngine.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:AtmosphericEngine.SendMessage(string,object)"></member><member name="M:AtmosphericEngine.SendMessage(string)"></member><member name="M:AtmosphericEngine.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:AtmosphericEngine.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:AtmosphericEngine.SendMessageUpwards(string,object)"></member><member name="M:AtmosphericEngine.SendMessageUpwards(string)"></member><member name="M:AtmosphericEngine.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:AtmosphericEngine.SetCollisionIgnores"></member><member name="M:AtmosphericEngine.SetDetectCollisions(System.Boolean)"></member><member name="M:AtmosphericEngine.SetHierarchyRoot(Part)"></member><member name="M:AtmosphericEngine.SetHighlight(System.Boolean,System.Boolean)"></member><member name="M:AtmosphericEngine.SetHighlightColor(UnityEngine.Color)"></member><member name="M:AtmosphericEngine.SetHighlightColor"></member><member name="M:AtmosphericEngine.SetHighlightDefault"></member><member name="M:AtmosphericEngine.SetHighlightType(Part+HighlightType)"></member><member name="M:AtmosphericEngine.SetLayer(UnityEngine.GameObject,System.Int32)"></member><member name="M:AtmosphericEngine.SetMirror(UnityEngine.Vector3)"></member><member name="M:AtmosphericEngine.setOpacity(System.Single)"></member><member name="M:AtmosphericEngine.setParent(Part)"></member><member name="M:AtmosphericEngine.SetReferenceTransform(UnityEngine.Transform)"></member><member name="M:AtmosphericEngine.SetResource(ConfigNode)"></member><member name="M:AtmosphericEngine.SpawnIVA"></member><member name="M:AtmosphericEngine.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:AtmosphericEngine.StartCoroutine(string,object)"></member><member name="M:AtmosphericEngine.StartCoroutine(string)"></member><member name="M:AtmosphericEngine.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:AtmosphericEngine.StopAllCoroutines"></member><member name="M:AtmosphericEngine.StopCoroutine(string)"></member><member name="M:AtmosphericEngine.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:AtmosphericEngine.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:AtmosphericEngine.ToString"></member><member name="M:AtmosphericEngine.TransferResource(System.Int32,System.Double)"></member><member name="M:AtmosphericEngine.TransferResource(PartResource,System.Double,Part)"></member><member name="M:AtmosphericEngine.Undock(DockedVesselInfo)"></member><member name="M:AtmosphericEngine.unfreeze"></member><member name="M:AtmosphericEngine.Unpack"></member><member name="M:AtmosphericEngine.UnregisterCrew"></member><member name="M:AtmosphericEngine.UpdateHeatEffect"></member><member name="M:AtmosphericEngine.UpdateOrgPosAndRot(Part)"></member><member name="M:AtmosphericEngine.UpdateStageability(System.Boolean,System.Boolean)"></member><member name="M:AtmosphericEngine.#ctor"></member><member name="T:AttachNode"><summary>An AttachNode represents the physical connection between a Part and its parent Part.</summary></member><member name="F:AttachNode.attachedPart"><summary>The part attached to this node. Null if no part is attached.</summary></member><member name="F:AttachNode.attachedPartId"></member><member name="F:AttachNode.attachMethod"></member><member name="F:AttachNode.breakingForce"></member><member name="F:AttachNode.breakingTorque"></member><member name="F:AttachNode.contactArea"></member><member name="F:AttachNode.icon"></member><member name="F:AttachNode.id"></member><member name="F:AttachNode.nodeTransform"></member><member name="F:AttachNode.nodeType"><summary>Whether this node is a surface-attach node, a stack node, or a docking node.</summary></member><member name="F:AttachNode.offset"></member><member name="F:AttachNode.orientation"></member><member name="F:AttachNode.originalOrientation"></member><member name="F:AttachNode.originalPosition"></member><member name="F:AttachNode.originalSecondaryAxis"></member><member name="F:AttachNode.overrideDragArea"></member><member name="F:AttachNode.owner"></member><member name="F:AttachNode.position"></member><member name="F:AttachNode.radius"></member><member name="F:AttachNode.requestGate"></member><member name="F:AttachNode.ResourceXFeed"><summary>Wether or not resource cross feed can pass through this node.</summary></member><member name="F:AttachNode.secondaryAxis"></member><member name="F:AttachNode.size"></member><member name="M:AttachNode.DestroyNodeIcon"></member><member name="M:AttachNode.Equals(object)"></member><member name="M:AttachNode.Finalize"></member><member name="M:AttachNode.FindAttachedPart(System.Collections.Generic.List)"></member><member name="M:AttachNode.FindAttachedPart"></member><member name="M:AttachNode.FindOpposingNode"></member><member name="M:AttachNode.GetHashCode"></member><member name="M:AttachNode.GetType"></member><member name="M:AttachNode.MemberwiseClone"></member><member name="M:AttachNode.ToString"></member><member name="M:AttachNode.#ctor"></member><member name="M:AttachNode.#ctor(string,UnityEngine.Transform,System.Int32,AttachNodeMethod)"></member><member name="T:AvailablePart"><summary>An AvailablePart object contains the summary information about a single type of part which is shown in the editor.</summary></member><member name="F:AvailablePart.amountAvailable"></member><member name="F:AvailablePart.author"></member><member name="F:AvailablePart.bulkheadProfiles"></member><member name="F:AvailablePart.category"><summary>Which tab this part shows up in in the editor.</summary></member><member name="F:AvailablePart.configFileFullName"></member><member name="F:AvailablePart.cost"><summary>The cost of this part, as displayed in the editor.</summary></member><member name="F:AvailablePart.description"><summary>The description of this part, as displayed in the editor?  Does this include the GetInfo() of the part's PartModules?</summary></member><member name="F:AvailablePart.entryCost"></member><member name="F:AvailablePart.fileTimes"></member><member name="F:AvailablePart.iconOffset"></member><member name="F:AvailablePart.iconPrefab"></member><member name="F:AvailablePart.iconScale"></member><member name="F:AvailablePart.iconUrl"></member><member name="F:AvailablePart.internalConfig"></member><member name="F:AvailablePart.manufacturer"></member><member name="F:AvailablePart.moduleInfo"></member><member name="F:AvailablePart.moduleInfos"></member><member name="F:AvailablePart.name"><summary>The name of this kind of part, as specified in the "name =" line of its part.cfg.</summary></member><member name="F:AvailablePart.partConfig"></member><member name="F:AvailablePart.partPrefab"><summary>The object that gets cloned when you create a new instance of this part in the editor?</summary></member><member name="F:AvailablePart.partSize"></member><member name="F:AvailablePart.partUrl"></member><member name="F:AvailablePart.partUrlConfig"></member><member name="F:AvailablePart.resourceInfo"></member><member name="F:AvailablePart.resourceInfos"></member><member name="F:AvailablePart.tags"></member><member name="F:AvailablePart.TechRequired"></member><member name="F:AvailablePart.title"></member><member name="F:AvailablePart.typeDescription"></member><member name="P:AvailablePart.partPath"></member><member name="M:AvailablePart.AddFileTime(UrlDir+UrlFile)"></member><member name="M:AvailablePart.Equals(object)"></member><member name="M:AvailablePart.Finalize"></member><member name="M:AvailablePart.GetHashCode"></member><member name="M:AvailablePart.GetType"></member><member name="M:AvailablePart.MemberwiseClone"></member><member name="M:AvailablePart.ToString"></member><member name="M:AvailablePart.#ctor"></member><member name="M:AvailablePart.#ctor(string)"></member><member name="T:BaseAction"><summary>A BaseAction object is the basic action object. There is one of these automatically created for each 'KSPAction' field in a partModule</summary></member><member name="F:BaseAction.actionGroup"><summary>Bitmap of the action groups this action is currently assigned to.
Example:</summary><code>bool isPartOfCustom01 = ((action.actionGroup &amp; KSPActionGroup.Custom01) == KSPActionGroup.Custom01</code></member><member name="F:BaseAction.active"><summary>Is this action available? Setting this false disables the action so it will not show in the available actions list. 

Note this totally disables the action, even calling it in code will not execute the action if this bool is false. (As of KSP 0.90, assumed still true in KSP 1.1)</summary></member><member name="F:BaseAction.defaultActionGroup"><summary>Assign this action to action groups upon creation ('Gear' group for landing legs)

Set the default group to Brakes only:</summary><code>action.defaultActionGroup = KSPActionGroup.Brakes;</code><remarks>Add the Custom01 group to the default groups.</remarks><code>action.defaultActionGroup = action.defaultActionGroup | KSPActionGroup.Custom01;</code><remarks>Note this value is only used when a part is placed in the editor and the values in defaultActionGroup are transferred to actionGroup at that time. Once a part is placed in the editor (or in flight mode) use the actionGroup object instead.</remarks></member><member name="F:BaseAction.guiName"><summary>Name shown in editor action groups panel, can safely be edited as any other string.</summary></member><member name="F:BaseAction.listParent"><summary>Information about what the action is attached to. listParent.module = partModule this action is a memeber of listParent.part = part this action is a member of</summary></member><member name="F:BaseAction.name"><summary>Name of the action group as seen in code where the KSPAction field exists. Do not edit, this is the identifier of the action as used in code and is not player visible. (See guiName for what is visible in game.)</summary></member><member name="P:BaseAction.onEvent"></member><member name="P:BaseAction.ActionGroupsLength"></member><member name="M:BaseAction.Equals(object)"></member><member name="M:BaseAction.Finalize"></member><member name="M:BaseAction.GetHashCode"></member><member name="M:BaseAction.GetType"></member><member name="M:BaseAction.Invoke(KSPActionParam)"><summary>Activate this action. Note that there is no toggle activation, you must check state yourself in code and activate or deactivate as appropriate  **Example code start to activate an action: KSP version 0.24.2**</summary><code>KSPActionParam actParam = new KSPActionParam(KSPActionGroup.None, KSPActionType.Activate); //okay to create this new just before invoking exampleAction.Invoke(actParam); //action defined as a KSPAction in a partModule</code><remarks>**Example code start to deactivate an action: KSP version 0.24.2**</remarks><code>KSPActionParam actParam = new KSPActionParam(KSPActionGroup.None, KSPActionType.Deactivate); //okay to create this new just before invoking exampleAction.Invoke(actParam); //action defined as a KSPAction in a partModule</code></member><member name="M:BaseAction.MemberwiseClone"></member><member name="M:BaseAction.OnLoad(ConfigNode)"></member><member name="M:BaseAction.OnSave(ConfigNode)"></member><member name="M:BaseAction.ToString"></member><member name="M:BaseAction.ContainsNonDefaultActions(Part)"></member><member name="M:BaseAction.CreateActionList(System.Collections.Generic.List,KSPActionGroup,System.Boolean)"></member><member name="M:BaseAction.CreateActionList(Part,KSPActionGroup,System.Boolean)"></member><member name="M:BaseAction.CreateGroupList(Part)"></member><member name="M:BaseAction.CreateGroupList(System.Collections.Generic.List)"></member><member name="M:BaseAction.FireAction(System.Collections.Generic.List,KSPActionGroup,KSPActionType)"></member><member name="M:BaseAction.GetActionGroups(System.Int32)"></member><member name="M:BaseAction.GetActionGroupsLength(System.Single,System.Boolean)"></member><member name="M:BaseAction.GetGroupIndex(KSPActionGroup)"></member><member name="M:BaseAction.#ctor(BaseActionList,string,BaseActionDelegate,KSPAction)"></member><member name="T:BaseActionList"><summary>A BaseActionList is an object to manipulate actions.</summary></member><member name="F:BaseActionList.module"><summary>The partModule this list of actions belongs to</summary></member><member name="F:BaseActionList.part"><summary>The Part this list of actions belongs to</summary></member><member name="P:BaseActionList.Capacity"></member><member name="P:BaseActionList.Count"></member><member name="P:BaseActionList.Item"></member><member name="P:BaseActionList.Item"></member><member name="M:BaseActionList.Add(BaseAction)"></member><member name="M:BaseActionList.AddRange(System.Collections.Generic.IEnumerable)"></member><member name="M:BaseActionList.AsReadOnly"></member><member name="M:BaseActionList.BinarySearch(System.Int32,System.Int32,BaseAction,System.Collections.Generic.IComparer)"></member><member name="M:BaseActionList.BinarySearch(BaseAction)"></member><member name="M:BaseActionList.BinarySearch(BaseAction,System.Collections.Generic.IComparer)"></member><member name="M:BaseActionList.Clear"></member><member name="M:BaseActionList.Contains(KSPActionGroup)"></member><member name="M:BaseActionList.Contains(BaseAction)"></member><member name="M:BaseActionList.ConvertAll(Converter)"></member><member name="M:BaseActionList.CopyTo(BaseAction[])"></member><member name="M:BaseActionList.CopyTo(System.Int32,BaseAction[],System.Int32,System.Int32)"></member><member name="M:BaseActionList.CopyTo(BaseAction[],System.Int32)"></member><member name="M:BaseActionList.Equals(object)"></member><member name="M:BaseActionList.Exists(System.Predicate)"></member><member name="M:BaseActionList.Finalize"></member><member name="M:BaseActionList.Find(System.Predicate)"></member><member name="M:BaseActionList.FindAll(System.Predicate)"></member><member name="M:BaseActionList.FindIndex(System.Predicate)"></member><member name="M:BaseActionList.FindIndex(System.Int32,System.Predicate)"></member><member name="M:BaseActionList.FindIndex(System.Int32,System.Int32,System.Predicate)"></member><member name="M:BaseActionList.FindLast(System.Predicate)"></member><member name="M:BaseActionList.FindLastIndex(System.Predicate)"></member><member name="M:BaseActionList.FindLastIndex(System.Int32,System.Predicate)"></member><member name="M:BaseActionList.FindLastIndex(System.Int32,System.Int32,System.Predicate)"></member><member name="M:BaseActionList.ForEach(System.Action)"></member><member name="M:BaseActionList.GetEnumerator"></member><member name="M:BaseActionList.GetHashCode"></member><member name="M:BaseActionList.GetRange(System.Int32,System.Int32)"></member><member name="M:BaseActionList.GetType"></member><member name="M:BaseActionList.IndexOf(BaseAction)"></member><member name="M:BaseActionList.IndexOf(BaseAction,System.Int32)"></member><member name="M:BaseActionList.IndexOf(BaseAction,System.Int32,System.Int32)"></member><member name="M:BaseActionList.Insert(System.Int32,BaseAction)"></member><member name="M:BaseActionList.InsertRange(System.Int32,System.Collections.Generic.IEnumerable)"></member><member name="M:BaseActionList.LastIndexOf(BaseAction)"></member><member name="M:BaseActionList.LastIndexOf(BaseAction,System.Int32)"></member><member name="M:BaseActionList.LastIndexOf(BaseAction,System.Int32,System.Int32)"></member><member name="M:BaseActionList.MemberwiseClone"></member><member name="M:BaseActionList.OnLoad(ConfigNode)"></member><member name="M:BaseActionList.OnSave(ConfigNode)"></member><member name="M:BaseActionList.Remove(BaseAction)"></member><member name="M:BaseActionList.RemoveAll(System.Predicate)"></member><member name="M:BaseActionList.RemoveAt(System.Int32)"></member><member name="M:BaseActionList.RemoveRange(System.Int32,System.Int32)"></member><member name="M:BaseActionList.Reverse"></member><member name="M:BaseActionList.Reverse(System.Int32,System.Int32)"></member><member name="M:BaseActionList.Sort"></member><member name="M:BaseActionList.Sort(System.Collections.Generic.IComparer)"></member><member name="M:BaseActionList.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer)"></member><member name="M:BaseActionList.Sort(System.Comparison)"></member><member name="M:BaseActionList.ToArray"></member><member name="M:BaseActionList.ToString"></member><member name="M:BaseActionList.TrimExcess"></member><member name="M:BaseActionList.TrueForAll(System.Predicate)"></member><member name="M:BaseActionList.#ctor(Part,PartModule)"></member><member name="T:BaseConverter"></member><member name="F:BaseConverter._resBroker"></member><member name="F:BaseConverter._resConverter"></member><member name="F:BaseConverter.AlwaysActive"><summary>Simply means that this converter is "always on" once turned on (and cannot be shut off), or that it is "always on" when in active view.</summary></member><member name="F:BaseConverter.AutoShutdown"><summary>Simply means that the converter shuts down after a predetermined set of conditions are met; such as "resource(s) full" or "used up".</summary></member><member name="F:BaseConverter.ConverterName"><summary>The name of the converter as it should appear in-game to players.</summary></member><member name="F:BaseConverter.debugCrewBon"></member><member name="F:BaseConverter.debugDelta"></member><member name="F:BaseConverter.debugEffBonus"></member><member name="F:BaseConverter.debugFinBon"></member><member name="F:BaseConverter.debugTimeFac"></member><member name="F:BaseConverter.DefaultShutoffTemp"><summary>Shuts off the converter after a certain temperature is reached. Definable?</summary></member><member name="F:BaseConverter.DirtyFlag"></member><member name="F:BaseConverter.Efficiency"><summary>A math coefficient. Let's say you've set your Input and Output levels all to 1.0 ... set your Efficiency to any number from 0.01 to 1.0 (1~100%), and now you've defined how efficient you want your converter to be. Play around with your Input and Output values as desired to get the effects you're looking for.</summary></member><member name="F:BaseConverter.EfficiencyBonus"><summary>Defines whether to *use* an Efficiency Bonus or not. 0 to not use it, 1 to use it.</summary></member><member name="F:BaseConverter.FillAmount"><summary>How much to make before shutting down, ie "fill it up". If the tank is emptied, is likely able to be filled again.</summary></member><member name="F:BaseConverter.GeneratesHeat"><summary>Whether the converter generates heat during the conversion process.</summary></member><member name="F:BaseConverter.inputList"><summary>Literally the resource we're putting *in* to be converted. Can only be one resource per entry; ie, can't rattle off two or more resources in a single entry slot. Instead, make a new entry and add a single resource to that, then repeat with new entries down the list. Strongly recommend reading the 'ResourceRatio' to view the correct way to build the list.</summary></member><member name="F:BaseConverter.IsActivated"><summary>A check to see if the convertor has been activated -- we need this to help toggle other events in the Config Code (Animations and such). Compare to If/Then/And statements? (Needs verification) :: (Could this one also be a check to "autostart/autostop" it if the parent MODULE has been activated, such as ModuleAnimateGeneric?)</summary></member><member name="F:BaseConverter.isEnabled"></member><member name="F:BaseConverter.lastHeatFlux"></member><member name="F:BaseConverter.lastTimeFactor"></member><member name="F:BaseConverter.lastUpdateTime"><summary>Time of the last (physics?) update.</summary></member><member name="F:BaseConverter.moduleName"></member><member name="F:BaseConverter.outputList"><summary>Literally the resource we want made. Can only be one resource per entry; ie, can't rattle off two or more resources in a single entry slot. Instead, make a new entry and add a single resource to that, then repeat with new entries down the list. Strongly recommend reading the 'ResourceRatio' to view the correct way to build the list.</summary></member><member name="F:BaseConverter.overrideStagingIconIfBlank"></member><member name="F:BaseConverter.reqList"></member><member name="F:BaseConverter.snapshot"></member><member name="F:BaseConverter.SpecialistBonusBase"><summary>Simply a math function to determine how much of a bonus we get for having a Specialist on board the vessel we're using the converter with. Careful with this number, because it's a multiplier!</summary></member><member name="F:BaseConverter.SpecialistEfficiencyFactor"><summary>How *quickly* the converter works with the Specialist on-board. Better speed = better efficiency.</summary></member><member name="F:BaseConverter.Specialty"><summary>Which career makes this converter more efficient? If left blank, there's no difference, and it receives NO bonuses.</summary></member><member name="F:BaseConverter.stagingDisableText"></member><member name="F:BaseConverter.stagingEnabled"></member><member name="F:BaseConverter.stagingEnableText"></member><member name="F:BaseConverter.stagingToggleEnabledEditor"></member><member name="F:BaseConverter.stagingToggleEnabledFlight"></member><member name="F:BaseConverter.StartActionName"><summary>Likely the description next to the button to commence a resource conversion.  This should be set in the craft's .cfg file.  A right-click button will be created for the part during a flight scene with this name.</summary></member><member name="F:BaseConverter.status"><summary>Probably best to not use this one, as this could cause issues if tampered with.</summary></member><member name="F:BaseConverter.StopActionName"><summary>The complement of StartActionName, this stops the resource conversion.  This should be set in the craft's .cfg file.  A right-click button will be created for the part during a flight scene with this name.</summary></member><member name="F:BaseConverter.TakeAmount"></member><member name="F:BaseConverter.TemperatureModifier"><summary>Does this converter get more (or less) efficient due to temperature? That's defined here, and is an array like ThermalEfficiency below.</summary></member><member name="F:BaseConverter.ThermalEfficiency"><summary>This is a definable array of different efficiencies over different temperatures. Opening the file /GameData/Squad/Parts/Resources/ISRU/ISRU.cfg and scrolling down to the thermalEfficiency section(s) will provide good examples of how this function is actually used.</summary></member><member name="F:BaseConverter.ToggleActionName"><summary>As with StartActionName and StopActionName, ToggleActionName is the GUI name that the Player actually sees in-game for the converter when they right-click the equipped part. The toggle function is a combination start/stop button.</summary></member><member name="F:BaseConverter.UseSpecialistBonus"><summary>If true, the converter will gain efficiency bonus if a crewmember is on board (defined in Specialty).</summary></member><member name="P:BaseConverter.Actions"></member><member name="P:BaseConverter.ClassID"></member><member name="P:BaseConverter.ClassName"></member><member name="P:BaseConverter.enabled"></member><member name="P:BaseConverter.Events"></member><member name="P:BaseConverter.Fields"></member><member name="P:BaseConverter.gameObject"></member><member name="P:BaseConverter.GUIName"></member><member name="P:BaseConverter.hideFlags"></member><member name="P:BaseConverter.isActiveAndEnabled"></member><member name="P:BaseConverter.name"></member><member name="P:BaseConverter.part"></member><member name="P:BaseConverter.ResBroker"></member><member name="P:BaseConverter.ResConverter"></member><member name="P:BaseConverter.tag"></member><member name="P:BaseConverter.transform"></member><member name="P:BaseConverter.useGUILayout"></member><member name="P:BaseConverter.vessel"></member><member name="M:BaseConverter.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:BaseConverter.BroadcastMessage(string,object)"></member><member name="M:BaseConverter.BroadcastMessage(string)"></member><member name="M:BaseConverter.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:BaseConverter.CancelInvoke"></member><member name="M:BaseConverter.CancelInvoke(string)"></member><member name="M:BaseConverter.CompareTag(string)"></member><member name="M:BaseConverter.ConvertRecipeToUnits(ConversionRecipe)"></member><member name="M:BaseConverter.DisableModule"></member><member name="M:BaseConverter.DisplayCoreHeat"></member><member name="M:BaseConverter.EnableModule"></member><member name="M:BaseConverter.Equals(object)"></member><member name="M:BaseConverter.Finalize"></member><member name="M:BaseConverter.FixedUpdate"></member><member name="M:BaseConverter.GetComponent(System.Type)"></member><member name="M:BaseConverter.GetComponent"></member><member name="M:BaseConverter.GetComponent(string)"></member><member name="M:BaseConverter.GetComponentInChildren(System.Type)"></member><member name="M:BaseConverter.GetComponentInChildren"></member><member name="M:BaseConverter.GetComponentInParent(System.Type)"></member><member name="M:BaseConverter.GetComponentInParent"></member><member name="M:BaseConverter.GetComponents(System.Type)"></member><member name="M:BaseConverter.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:BaseConverter.GetComponents(List)"></member><member name="M:BaseConverter.GetComponents"></member><member name="M:BaseConverter.GetComponentsInChildren(System.Type)"></member><member name="M:BaseConverter.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:BaseConverter.GetComponentsInChildren(System.Boolean)"></member><member name="M:BaseConverter.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:BaseConverter.GetComponentsInChildren"></member><member name="M:BaseConverter.GetComponentsInChildren(List)"></member><member name="M:BaseConverter.GetComponentsInParent(System.Type)"></member><member name="M:BaseConverter.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:BaseConverter.GetComponentsInParent(System.Boolean)"></member><member name="M:BaseConverter.GetComponentsInParent(System.Boolean,List)"></member><member name="M:BaseConverter.GetComponentsInParent"></member><member name="M:BaseConverter.GetCoreTemperature"></member><member name="M:BaseConverter.GetCrewBonus"></member><member name="M:BaseConverter.GetDeltaTime"></member><member name="M:BaseConverter.GetFlux"></member><member name="M:BaseConverter.GetGoalTemperature"></member><member name="M:BaseConverter.GetHashCode"></member><member name="M:BaseConverter.GetHeatThrottle"></member><member name="M:BaseConverter.GetInfo"></member><member name="M:BaseConverter.GetInstanceID"></member><member name="M:BaseConverter.GetStagingDisableText"></member><member name="M:BaseConverter.GetStagingEnableText"></member><member name="M:BaseConverter.GetType"></member><member name="M:BaseConverter.Invoke(string,System.Single)"></member><member name="M:BaseConverter.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:BaseConverter.IsInvoking(string)"></member><member name="M:BaseConverter.IsInvoking"></member><member name="M:BaseConverter.IsOverheating"></member><member name="M:BaseConverter.IsSituationValid"></member><member name="M:BaseConverter.IsStageable"></member><member name="M:BaseConverter.Load(ConfigNode)"></member><member name="M:BaseConverter.MemberwiseClone"></member><member name="M:BaseConverter.ModuleIsActive"></member><member name="M:BaseConverter.OnActive"></member><member name="M:BaseConverter.OnAwake"></member><member name="M:BaseConverter.OnFixedUpdate"></member><member name="M:BaseConverter.OnInactive"></member><member name="M:BaseConverter.OnInitialize"></member><member name="M:BaseConverter.OnLoad(ConfigNode)"></member><member name="M:BaseConverter.OnOverheat(System.Double)"></member><member name="M:BaseConverter.OnSave(ConfigNode)"></member><member name="M:BaseConverter.OnStart(PartModule+StartState)"></member><member name="M:BaseConverter.OnUpdate"></member><member name="M:BaseConverter.PostProcess(ConverterResults,System.Double)"></member><member name="M:BaseConverter.PostUpdateCleanup"></member><member name="M:BaseConverter.PrepareRecipe(System.Double)"></member><member name="M:BaseConverter.PreProcessing"></member><member name="M:BaseConverter.Save(ConfigNode)"></member><member name="M:BaseConverter.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:BaseConverter.SendMessage(string,object)"></member><member name="M:BaseConverter.SendMessage(string)"></member><member name="M:BaseConverter.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:BaseConverter.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:BaseConverter.SendMessageUpwards(string,object)"></member><member name="M:BaseConverter.SendMessageUpwards(string)"></member><member name="M:BaseConverter.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:BaseConverter.SetEfficiencyBonus(System.Single)"></member><member name="M:BaseConverter.SetStaging(System.Boolean)"></member><member name="M:BaseConverter.StagingEnabled"></member><member name="M:BaseConverter.StagingToggleEnabledEditor"></member><member name="M:BaseConverter.StagingToggleEnabledFlight"></member><member name="M:BaseConverter.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:BaseConverter.StartCoroutine(string,object)"></member><member name="M:BaseConverter.StartCoroutine(string)"></member><member name="M:BaseConverter.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:BaseConverter.StartResourceConverter"></member><member name="M:BaseConverter.StartResourceConverterAction(KSPActionParam)"></member><member name="M:BaseConverter.StopAllCoroutines"></member><member name="M:BaseConverter.StopCoroutine(string)"></member><member name="M:BaseConverter.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:BaseConverter.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:BaseConverter.StopResourceConverter"></member><member name="M:BaseConverter.StopResourceConverterAction(KSPActionParam)"></member><member name="M:BaseConverter.ToggleResourceConverterAction(KSPActionParam)"></member><member name="M:BaseConverter.ToggleStaging"></member><member name="M:BaseConverter.ToString"></member><member name="M:BaseConverter.UpdateConverterStatus"></member><member name="M:BaseConverter.UpdateStagingToggle"></member><member name="M:BaseConverter.#ctor"></member><member name="T:CMAssignmentDialog"><summary>This class is obsolete see</summary><see cref="KSP.UI.CrewAssignmentDialog"/></member><member name="F:CMAssignmentDialog.Instance"></member><member name="P:CMAssignmentDialog.enabled"></member><member name="P:CMAssignmentDialog.gameObject"></member><member name="P:CMAssignmentDialog.hideFlags"></member><member name="P:CMAssignmentDialog.isActiveAndEnabled"></member><member name="P:CMAssignmentDialog.name"></member><member name="P:CMAssignmentDialog.tag"></member><member name="P:CMAssignmentDialog.transform"></member><member name="P:CMAssignmentDialog.useGUILayout"></member><member name="M:CMAssignmentDialog.ApplyScaling"></member><member name="M:CMAssignmentDialog.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:CMAssignmentDialog.BroadcastMessage(string,object)"></member><member name="M:CMAssignmentDialog.BroadcastMessage(string)"></member><member name="M:CMAssignmentDialog.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:CMAssignmentDialog.ButtonAstronautComplex(POINTER_INFO&amp;)"></member><member name="M:CMAssignmentDialog.ButtonClear(POINTER_INFO&amp;)"></member><member name="M:CMAssignmentDialog.ButtonFill(POINTER_INFO&amp;)"></member><member name="M:CMAssignmentDialog.ButtonReset(POINTER_INFO&amp;)"></member><member name="M:CMAssignmentDialog.CancelInvoke"></member><member name="M:CMAssignmentDialog.CancelInvoke(string)"></member><member name="M:CMAssignmentDialog.ClearLists"></member><member name="M:CMAssignmentDialog.CompareTag(string)"></member><member name="M:CMAssignmentDialog.Equals(object)"></member><member name="M:CMAssignmentDialog.Finalize"></member><member name="M:CMAssignmentDialog.GetComponent(System.Type)"></member><member name="M:CMAssignmentDialog.GetComponent"></member><member name="M:CMAssignmentDialog.GetComponent(string)"></member><member name="M:CMAssignmentDialog.GetComponentInChildren(System.Type)"></member><member name="M:CMAssignmentDialog.GetComponentInChildren"></member><member name="M:CMAssignmentDialog.GetComponentInParent(System.Type)"></member><member name="M:CMAssignmentDialog.GetComponentInParent"></member><member name="M:CMAssignmentDialog.GetComponents(System.Type)"></member><member name="M:CMAssignmentDialog.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:CMAssignmentDialog.GetComponents(List)"></member><member name="M:CMAssignmentDialog.GetComponents"></member><member name="M:CMAssignmentDialog.GetComponentsInChildren(System.Type)"></member><member name="M:CMAssignmentDialog.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:CMAssignmentDialog.GetComponentsInChildren(System.Boolean)"></member><member name="M:CMAssignmentDialog.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:CMAssignmentDialog.GetComponentsInChildren"></member><member name="M:CMAssignmentDialog.GetComponentsInChildren(List)"></member><member name="M:CMAssignmentDialog.GetComponentsInParent(System.Type)"></member><member name="M:CMAssignmentDialog.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:CMAssignmentDialog.GetComponentsInParent(System.Boolean)"></member><member name="M:CMAssignmentDialog.GetComponentsInParent(System.Boolean,List)"></member><member name="M:CMAssignmentDialog.GetComponentsInParent"></member><member name="M:CMAssignmentDialog.GetHashCode"></member><member name="M:CMAssignmentDialog.GetInstanceID"></member><member name="M:CMAssignmentDialog.GetManifest"></member><member name="M:CMAssignmentDialog.GetType"></member><member name="M:CMAssignmentDialog.Invoke(string,System.Single)"></member><member name="M:CMAssignmentDialog.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:CMAssignmentDialog.IsInvoking(string)"></member><member name="M:CMAssignmentDialog.IsInvoking"></member><member name="M:CMAssignmentDialog.MemberwiseClone"></member><member name="M:CMAssignmentDialog.RefreshCrewLists(VesselCrewManifest,System.Boolean,System.Boolean,System.Func)"></member><member name="M:CMAssignmentDialog.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:CMAssignmentDialog.SendMessage(string,object)"></member><member name="M:CMAssignmentDialog.SendMessage(string)"></member><member name="M:CMAssignmentDialog.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:CMAssignmentDialog.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:CMAssignmentDialog.SendMessageUpwards(string,object)"></member><member name="M:CMAssignmentDialog.SendMessageUpwards(string)"></member><member name="M:CMAssignmentDialog.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:CMAssignmentDialog.SetDefaultManifest(VesselCrewManifest)"></member><member name="M:CMAssignmentDialog.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:CMAssignmentDialog.StartCoroutine(string,object)"></member><member name="M:CMAssignmentDialog.StartCoroutine(string)"></member><member name="M:CMAssignmentDialog.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:CMAssignmentDialog.StopAllCoroutines"></member><member name="M:CMAssignmentDialog.StopCoroutine(string)"></member><member name="M:CMAssignmentDialog.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:CMAssignmentDialog.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:CMAssignmentDialog.TestManifest"></member><member name="M:CMAssignmentDialog.ToString"></member><member name="M:CMAssignmentDialog.#ctor"></member><member name="T:CameraKeyFrameEvents.CameraKeyFrameEvent"></member><member name="F:CameraKeyFrameEvents.CameraKeyFrameEvent.done"></member><member name="F:CameraKeyFrameEvents.CameraKeyFrameEvent.timeIntoFrame"></member><member name="P:CameraKeyFrameEvents.CameraKeyFrameEvent.enabled"></member><member name="P:CameraKeyFrameEvents.CameraKeyFrameEvent.gameObject"></member><member name="P:CameraKeyFrameEvents.CameraKeyFrameEvent.hideFlags"></member><member name="P:CameraKeyFrameEvents.CameraKeyFrameEvent.isActiveAndEnabled"></member><member name="P:CameraKeyFrameEvents.CameraKeyFrameEvent.name"></member><member name="P:CameraKeyFrameEvents.CameraKeyFrameEvent.tag"></member><member name="P:CameraKeyFrameEvents.CameraKeyFrameEvent.transform"></member><member name="P:CameraKeyFrameEvents.CameraKeyFrameEvent.useGUILayout"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.BroadcastMessage(string,object)"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.BroadcastMessage(string)"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.CancelInvoke"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.CancelInvoke(string)"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.CompareTag(string)"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.Equals(object)"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.Finalize"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.GetComponent(System.Type)"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.GetComponent"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.GetComponent(string)"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.GetComponentInChildren(System.Type)"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.GetComponentInChildren"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.GetComponentInParent(System.Type)"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.GetComponentInParent"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.GetComponents(System.Type)"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.GetComponents(List)"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.GetComponents"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.GetComponentsInChildren(System.Type)"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.GetComponentsInChildren(System.Boolean)"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.GetComponentsInChildren"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.GetComponentsInChildren(List)"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.GetComponentsInParent(System.Type)"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.GetComponentsInParent(System.Boolean)"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.GetComponentsInParent(System.Boolean,List)"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.GetComponentsInParent"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.GetHashCode"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.GetInstanceID"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.GetType"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.Invoke(string,System.Single)"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.IsInvoking(string)"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.IsInvoking"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.MemberwiseClone"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.RunEvent"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.SendMessage(string,object)"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.SendMessage(string)"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.SendMessageUpwards(string,object)"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.SendMessageUpwards(string)"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.StartCoroutine(string,object)"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.StartCoroutine(string)"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.StopAllCoroutines"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.StopCoroutine(string)"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.ToString"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.#ctor"></member><member name="T:CameraManager"></member><member name="F:CameraManager.currentCameraMode"></member><member name="F:CameraManager.existingFlightFoV"></member><member name="F:CameraManager.existingIVAFoV"></member><member name="F:CameraManager.previousCameraMode"></member><member name="P:CameraManager.enabled"></member><member name="P:CameraManager.gameObject"></member><member name="P:CameraManager.hideFlags"></member><member name="P:CameraManager.isActiveAndEnabled"></member><member name="P:CameraManager.IVACameraActiveKerbal"><summary>The Kerbal that the current/last IVA Camera is/was attached to.</summary></member><member name="P:CameraManager.IVACameraActiveKerbalIndex"><summary>This is the index in the activeVessel.GetVesselCrew() list of the current/las IVACameraActiveKerbal</summary></member><member name="P:CameraManager.name"></member><member name="P:CameraManager.tag"></member><member name="P:CameraManager.transform"></member><member name="P:CameraManager.useGUILayout"></member><member name="P:CameraManager.Instance"></member><member name="M:CameraManager.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:CameraManager.BroadcastMessage(string,object)"></member><member name="M:CameraManager.BroadcastMessage(string)"></member><member name="M:CameraManager.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:CameraManager.CancelInvoke"></member><member name="M:CameraManager.CancelInvoke(string)"></member><member name="M:CameraManager.CompareTag(string)"></member><member name="M:CameraManager.Equals(object)"></member><member name="M:CameraManager.Finalize"></member><member name="M:CameraManager.GetComponent(System.Type)"></member><member name="M:CameraManager.GetComponent"></member><member name="M:CameraManager.GetComponent(string)"></member><member name="M:CameraManager.GetComponentInChildren(System.Type)"></member><member name="M:CameraManager.GetComponentInChildren"></member><member name="M:CameraManager.GetComponentInParent(System.Type)"></member><member name="M:CameraManager.GetComponentInParent"></member><member name="M:CameraManager.GetComponents(System.Type)"></member><member name="M:CameraManager.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:CameraManager.GetComponents(List)"></member><member name="M:CameraManager.GetComponents"></member><member name="M:CameraManager.GetComponentsInChildren(System.Type)"></member><member name="M:CameraManager.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:CameraManager.GetComponentsInChildren(System.Boolean)"></member><member name="M:CameraManager.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:CameraManager.GetComponentsInChildren"></member><member name="M:CameraManager.GetComponentsInChildren(List)"></member><member name="M:CameraManager.GetComponentsInParent(System.Type)"></member><member name="M:CameraManager.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:CameraManager.GetComponentsInParent(System.Boolean)"></member><member name="M:CameraManager.GetComponentsInParent(System.Boolean,List)"></member><member name="M:CameraManager.GetComponentsInParent"></member><member name="M:CameraManager.GetHashCode"></member><member name="M:CameraManager.GetInstanceID"></member><member name="M:CameraManager.GetType"></member><member name="M:CameraManager.Invoke(string,System.Single)"></member><member name="M:CameraManager.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:CameraManager.IsInvoking(string)"></member><member name="M:CameraManager.IsInvoking"></member><member name="M:CameraManager.MemberwiseClone"></member><member name="M:CameraManager.NextCamera"></member><member name="M:CameraManager.NextCameraIVA"></member><member name="M:CameraManager.NextCameraMode"></member><member name="M:CameraManager.PreviousCameraMode"></member><member name="M:CameraManager.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:CameraManager.SendMessage(string,object)"></member><member name="M:CameraManager.SendMessage(string)"></member><member name="M:CameraManager.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:CameraManager.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:CameraManager.SendMessageUpwards(string,object)"></member><member name="M:CameraManager.SendMessageUpwards(string)"></member><member name="M:CameraManager.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:CameraManager.SetCameraFlight"></member><member name="M:CameraManager.SetCameraInternal(InternalModel,UnityEngine.Transform)"></member><member name="M:CameraManager.SetCameraIVA"></member><member name="M:CameraManager.SetCameraIVA(Kerbal,System.Boolean)"></member><member name="M:CameraManager.SetCameraMap"></member><member name="M:CameraManager.SetCameraMode(CameraManager+CameraMode)"></member><member name="M:CameraManager.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:CameraManager.StartCoroutine(string,object)"></member><member name="M:CameraManager.StartCoroutine(string)"></member><member name="M:CameraManager.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:CameraManager.StopAllCoroutines"></member><member name="M:CameraManager.StopCoroutine(string)"></member><member name="M:CameraManager.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:CameraManager.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:CameraManager.ToString"></member><member name="M:CameraManager.GetCurrentCamera"></member><member name="M:CameraManager.ICameras_DeactivateAll"></member><member name="M:CameraManager.ICameras_ResetAll"></member><member name="M:CameraManager.#ctor"></member><member name="T:CelestialBody"><summary>The Sun, the planets, and the moons are all CelestialBodies.</summary></member><member name="F:CelestialBody.afg"></member><member name="F:CelestialBody.albedo"></member><member name="F:CelestialBody.angularV"><summary>The magnitude of the angular velocity of the body's rotation, in radians per second.</summary></member><member name="F:CelestialBody.angularVelocity"><summary>The body's angular velocity vector, in rotations per second. This points along the axis of rotation and its magnitude is the rotation rate in radians per second.</summary></member><member name="F:CelestialBody.atmDensityASL"></member><member name="F:CelestialBody.atmosphere"><summary>Whether this body has an atmosphere</summary></member><member name="F:CelestialBody.atmosphereAdiabaticIndex"></member><member name="F:CelestialBody.atmosphereContainsOxygen"><summary>Presumably, whether jet engines will work in this body's atmosphere</summary></member><member name="F:CelestialBody.atmosphereDepth"></member><member name="F:CelestialBody.atmosphereGasMassLapseRate"></member><member name="F:CelestialBody.atmosphereMolarMass"></member><member name="F:CelestialBody.atmospherePressureCurve"></member><member name="F:CelestialBody.atmospherePressureCurveIsNormalized"></member><member name="F:CelestialBody.atmospherePressureSeaLevel"></member><member name="F:CelestialBody.atmosphereTemperatureCurve"></member><member name="F:CelestialBody.atmosphereTemperatureCurveIsNormalized"></member><member name="F:CelestialBody.atmosphereTemperatureLapseRate"></member><member name="F:CelestialBody.atmosphereTemperatureSeaLevel"></member><member name="F:CelestialBody.atmosphereTemperatureSunMultCurve"></member><member name="F:CelestialBody.atmosphereUsePressureCurve"></member><member name="F:CelestialBody.atmosphereUseTemperatureCurve"></member><member name="F:CelestialBody.atmosphericAmbientColor"></member><member name="F:CelestialBody.axialTemperatureSunBiasCurve"></member><member name="F:CelestialBody.axialTemperatureSunMultCurve"></member><member name="F:CelestialBody.BiomeMap"></member><member name="F:CelestialBody.bodyDescription"></member><member name="F:CelestialBody.bodyName"><summary>The name of the body, as a string.</summary></member><member name="F:CelestialBody.bodyTransform"></member><member name="F:CelestialBody.bodyType"></member><member name="F:CelestialBody.convectionMultiplier"></member><member name="F:CelestialBody.coreTemperatureOffset"></member><member name="F:CelestialBody.Density"></member><member name="F:CelestialBody.directRotAngle"></member><member name="F:CelestialBody.eccentricityTemperatureBiasCurve"></member><member name="F:CelestialBody.emissivity"></member><member name="F:CelestialBody.GeeASL"><summary>The gravitational acceleration of the body at sea level, in units of gees (1 gee = 9.81 m/s^2)</summary></member><member name="F:CelestialBody.gMagnitudeAtCenter"><summary>The gravitational acceleration (in m/s^2) at a radius r (in m) from the body's center is gMagnitudeAtCenter / r^2</summary></member><member name="F:CelestialBody.gravParameter"><summary>The gravitational parameter GM is the universal gravitational constant G times the mass M of the body.  In KSP the gravitational constant G is exactly 6.673 m^3 / (kg s^2), and the body mass is measured in kilograms.</summary></member><member name="F:CelestialBody.hillSphere"><summary>Unused?</summary></member><member name="F:CelestialBody.initialRotation"></member><member name="F:CelestialBody.inverseRotation"></member><member name="F:CelestialBody.inverseRotThresholdAltitude"></member><member name="F:CelestialBody.isHomeWorld"></member><member name="F:CelestialBody.latitudeTemperatureBiasCurve"></member><member name="F:CelestialBody.latitudeTemperatureSunMultCurve"></member><member name="F:CelestialBody.Mass"><summary>The mass of the body in kilograms. Computed</summary></member><member name="F:CelestialBody.maxAxialDot"></member><member name="F:CelestialBody.navballSwitchRadiusMult"></member><member name="F:CelestialBody.ocean"><summary>Whether this planet has an ocean at "sea level"</summary></member><member name="F:CelestialBody.oceanAFGAltMult"></member><member name="F:CelestialBody.oceanAFGBase"></member><member name="F:CelestialBody.oceanAFGLerp"></member><member name="F:CelestialBody.oceanAFGMin"></member><member name="F:CelestialBody.oceanAlbedoDistanceScalar"></member><member name="F:CelestialBody.oceanAlphaDistanceScalar"></member><member name="F:CelestialBody.oceanDensity"></member><member name="F:CelestialBody.oceanFogColorEnd"></member><member name="F:CelestialBody.oceanFogColorStart"></member><member name="F:CelestialBody.oceanFogDawnFactor"></member><member name="F:CelestialBody.oceanFogDensityAltScalar"></member><member name="F:CelestialBody.oceanFogDensityEnd"></member><member name="F:CelestialBody.oceanFogDensityExponent"></member><member name="F:CelestialBody.oceanFogDensityPQSMult"></member><member name="F:CelestialBody.oceanFogDensityStart"></member><member name="F:CelestialBody.oceanFogPQSDepth"></member><member name="F:CelestialBody.oceanFogPQSDepthRecip"></member><member name="F:CelestialBody.oceanMaxAlbedoFog"></member><member name="F:CelestialBody.oceanMaxAlphaFog"></member><member name="F:CelestialBody.oceanMinAlphaFogDistance"></member><member name="F:CelestialBody.oceanSkyColorMult"></member><member name="F:CelestialBody.oceanSkyColorOpacityAltMult"></member><member name="F:CelestialBody.oceanSkyColorOpacityBase"></member><member name="F:CelestialBody.oceanSunAltMult"></member><member name="F:CelestialBody.oceanSunBase"></member><member name="F:CelestialBody.oceanSunMin"></member><member name="F:CelestialBody.oceanUseFog"></member><member name="F:CelestialBody.orbitDriver"><summary>this is what gives the celestial body its orbit and makes it go along the orbit as well</summary></member><member name="F:CelestialBody.orbitingBodies"><summary>A list of this body's moons (or, in the case of the Sun, a list of the planets).</summary></member><member name="F:CelestialBody.pqsController"><summary>The pqsController computes the terrain of the planet. Note that for the Sun and Gas Giants, pqsController = null.</summary></member><member name="F:CelestialBody.progressTree"></member><member name="F:CelestialBody.Radius"><summary>The radius of the planet in meters. Note that this is only the radius of "sea level"; the actual terrain may be higher.</summary></member><member name="F:CelestialBody.radiusAtmoFactor"></member><member name="F:CelestialBody.rotates"></member><member name="F:CelestialBody.rotation"></member><member name="F:CelestialBody.rotationAngle"></member><member name="F:CelestialBody.rotationPeriod"><summary>The time, in seconds, for the body to complete one rotation around its axis</summary></member><member name="F:CelestialBody.scaledBody"></member><member name="F:CelestialBody.scienceValues"></member><member name="F:CelestialBody.shockTemperatureMultiplier"></member><member name="F:CelestialBody.solarDayLength"></member><member name="F:CelestialBody.solarRotationPeriod"></member><member name="F:CelestialBody.sphereOfInfluence"><summary>The radius of this body's sphere of influence (measured from the center of the body), in meters.</summary></member><member name="F:CelestialBody.SurfaceArea"></member><member name="F:CelestialBody.tidallyLocked"><summary>Presumably, whether this body is tidally locked to the body around with it orbits.</summary></member><member name="F:CelestialBody.timeWarpAltitudeLimits"><summary>Presumably, this gives the minimum altitude you must have in order to be allowed to use each warp rate when in this body's sphere of influence.</summary></member><member name="F:CelestialBody.use_The_InName"></member><member name="F:CelestialBody.zUpAngularVelocity"></member><member name="P:CelestialBody.DiscoveryInfo"><summary>Describes to what extent this body has been explored</summary></member><member name="P:CelestialBody.enabled"></member><member name="P:CelestialBody.flightGlobalsIndex"></member><member name="P:CelestialBody.gameObject"></member><member name="P:CelestialBody.hideFlags"></member><member name="P:CelestialBody.isActiveAndEnabled"></member><member name="P:CelestialBody.MapObject"></member><member name="P:CelestialBody.name"></member><member name="P:CelestialBody.orbit"><summary>Describes the orbit of this body around its primary.</summary></member><member name="P:CelestialBody.position"><summary>The position of the center of the body, in world coordinates.</summary></member><member name="P:CelestialBody.referenceBody"><summary>Presumably, the body this body orbits around</summary></member><member name="P:CelestialBody.ResourceMap"></member><member name="P:CelestialBody.Resources"></member><member name="P:CelestialBody.RotationAxis"></member><member name="P:CelestialBody.tag"></member><member name="P:CelestialBody.theName"></member><member name="P:CelestialBody.transform"></member><member name="P:CelestialBody.useGUILayout"></member><member name="M:CelestialBody.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:CelestialBody.BroadcastMessage(string,object)"></member><member name="M:CelestialBody.BroadcastMessage(string)"></member><member name="M:CelestialBody.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:CelestialBody.CancelInvoke"></member><member name="M:CelestialBody.CancelInvoke(string)"></member><member name="M:CelestialBody.CBUpdate"></member><member name="M:CelestialBody.CompareTag(string)"></member><member name="M:CelestialBody.debugTimeWarpLimits"></member><member name="M:CelestialBody.DisplaySurfaceResource(System.Int32)"></member><member name="M:CelestialBody.Equals(object)"></member><member name="M:CelestialBody.Finalize"></member><member name="M:CelestialBody.GetAltitude(Vector3d)"><summary>Gets the height of a given position above this body's sea level, in meters.</summary><param name="worldPos">A position in world coordinates</param><returns>Altitude in meters</returns></member><member name="M:CelestialBody.getBounds"></member><member name="M:CelestialBody.GetComponent(System.Type)"></member><member name="M:CelestialBody.GetComponent"></member><member name="M:CelestialBody.GetComponent(string)"></member><member name="M:CelestialBody.GetComponentInChildren(System.Type)"></member><member name="M:CelestialBody.GetComponentInChildren"></member><member name="M:CelestialBody.GetComponentInParent(System.Type)"></member><member name="M:CelestialBody.GetComponentInParent"></member><member name="M:CelestialBody.GetComponents(System.Type)"></member><member name="M:CelestialBody.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:CelestialBody.GetComponents(List)"></member><member name="M:CelestialBody.GetComponents"></member><member name="M:CelestialBody.GetComponentsInChildren(System.Type)"></member><member name="M:CelestialBody.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:CelestialBody.GetComponentsInChildren(System.Boolean)"></member><member name="M:CelestialBody.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:CelestialBody.GetComponentsInChildren"></member><member name="M:CelestialBody.GetComponentsInChildren(List)"></member><member name="M:CelestialBody.GetComponentsInParent(System.Type)"></member><member name="M:CelestialBody.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:CelestialBody.GetComponentsInParent(System.Boolean)"></member><member name="M:CelestialBody.GetComponentsInParent(System.Boolean,List)"></member><member name="M:CelestialBody.GetComponentsInParent"></member><member name="M:CelestialBody.GetDensity(System.Double,System.Double)"></member><member name="M:CelestialBody.GetFrameVel"><summary>The velocity of the CelestialBody, {AliceWorld, Sun}. (See Orbit.cs for the reference frame definitions).</summary></member><member name="M:CelestialBody.GetFrameVelAtUT(System.Double)"></member><member name="M:CelestialBody.GetFwdVector"></member><member name="M:CelestialBody.GetHashCode"></member><member name="M:CelestialBody.GetInstanceID"></member><member name="M:CelestialBody.GetLatitude(Vector3d)"><summary>Gets the latitude of a given position, in degrees.</summary><param name="worldPos">A position in world coordinates</param><returns>Latitude in degrees</returns></member><member name="M:CelestialBody.GetLongitude(Vector3d)"><summary>Gets the longitude of a given position, in degrees. Note that you CANNOT count on this value being in any particular range. This function may for example return 420, meaning 60 degrees east. You would be well advised to coerce it into a standard range like -180 to 180 before using it.</summary><param name="worldPos">A position in world coordinates</param><returns>Longitude in degrees</returns></member><member name="M:CelestialBody.GetName"></member><member name="M:CelestialBody.GetObtVelocity"></member><member name="M:CelestialBody.GetOrbit"></member><member name="M:CelestialBody.GetOrbitDriver"></member><member name="M:CelestialBody.getPositionAtUT(System.Double)"></member><member name="M:CelestialBody.GetPressure(System.Double)"></member><member name="M:CelestialBody.GetRelSurfaceNVector(System.Double,System.Double)"></member><member name="M:CelestialBody.GetRelSurfacePosition(System.Double,System.Double,System.Double)"><summary>Returns a vector pointing from the center of the body to the given latitude, longitude, and altitude.</summary><param name="lat">Latitude in degrees</param><param name="lon">Longitude in degrees</param><param name="alt">Altitude above sea level in meters</param><returns>A position vector relative to the center of the body</returns></member><member name="M:CelestialBody.GetRelSurfacePosition(Vector3d)"></member><member name="M:CelestialBody.getRFrmVel(Vector3d)"><summary>Returns the velocity at a given position of the frame of reference that rotates with the planet. This velocity is the difference between the "orbit" and "surface" velocities.</summary><param name="worldPos">A position in world coordinates</param><returns>Velocity of the rotating reference frame</returns></member><member name="M:CelestialBody.GetSolarPowerFactor(System.Double)"></member><member name="M:CelestialBody.GetSpeedOfSound(System.Double,System.Double)"></member><member name="M:CelestialBody.GetSrfVelocity"></member><member name="M:CelestialBody.GetSurfaceNVector(System.Double,System.Double)"><summary>Returns a unit vector perpendicular to the surface of the body at the given latitude and longitude (pretending for the moment that the body is a perfect sphere).</summary><param name="lat">Latitude in degrees</param><param name="lon">Longitude in degrees</param><returns>A unit normal vector to the surface</returns></member><member name="M:CelestialBody.GetTargetingMode"></member><member name="M:CelestialBody.GetTemperature(System.Double)"></member><member name="M:CelestialBody.GetTransform"></member><member name="M:CelestialBody.getTruePositionAtUT(System.Double)"></member><member name="M:CelestialBody.GetType"></member><member name="M:CelestialBody.GetVessel"></member><member name="M:CelestialBody.GetWorldSurfacePosition(System.Double,System.Double,System.Double)"><summary>Returns the position, in world coordinates, of a given latitude, longitude, and altitude</summary><param name="lat">Latitude in degrees</param><param name="lon">Longitude in degrees</param><param name="alt">Altitude above sea level in meters</param><returns>Position in world coordinates</returns></member><member name="M:CelestialBody.HasChild(CelestialBody)"></member><member name="M:CelestialBody.HasParent(CelestialBody)"></member><member name="M:CelestialBody.HideSurfaceResource"></member><member name="M:CelestialBody.Invoke(string,System.Single)"></member><member name="M:CelestialBody.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:CelestialBody.IsInvoking(string)"></member><member name="M:CelestialBody.IsInvoking"></member><member name="M:CelestialBody.MemberwiseClone"></member><member name="M:CelestialBody.resetTimeWarpLimits"></member><member name="M:CelestialBody.RevealAltitude"><summary>Returns the body's altitude above the reference sphere of its primary  Implements IDiscoverable</summary></member><member name="M:CelestialBody.RevealMass"><summary>Returns the body's mass, in kg  Implements IDiscoverable</summary></member><member name="M:CelestialBody.RevealName"><summary>Returns the body's tracking station name  Implements IDiscoverable</summary></member><member name="M:CelestialBody.RevealSituationString"><summary>Describes the state of the body</summary><returns>A string containing the sphere of influence and trajectory of the object</returns><example>"Orbiting the Sun"</example><remarks>Implements IDiscoverable</remarks></member><member name="M:CelestialBody.RevealSpeed"><summary>Returns the body's speed  Implements IDiscoverable</summary></member><member name="M:CelestialBody.RevealType"><summary>Returns the type of the body</summary><returns>One of "Sun", "Planet", or "Moon"</returns><remarks>Implements IDiscoverable</remarks></member><member name="M:CelestialBody.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:CelestialBody.SendMessage(string,object)"></member><member name="M:CelestialBody.SendMessage(string)"></member><member name="M:CelestialBody.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:CelestialBody.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:CelestialBody.SendMessageUpwards(string,object)"></member><member name="M:CelestialBody.SendMessageUpwards(string)"></member><member name="M:CelestialBody.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:CelestialBody.SetResourceMap(UnityEngine.Texture2D)"></member><member name="M:CelestialBody.SetupConstants"></member><member name="M:CelestialBody.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:CelestialBody.StartCoroutine(string,object)"></member><member name="M:CelestialBody.StartCoroutine(string)"></member><member name="M:CelestialBody.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:CelestialBody.StopAllCoroutines"></member><member name="M:CelestialBody.StopCoroutine(string)"></member><member name="M:CelestialBody.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:CelestialBody.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:CelestialBody.TerrainAltitude(System.Double,System.Double)"></member><member name="M:CelestialBody.ToString"></member><member name="M:CelestialBody.GetRSrfNVector(System.Double,System.Double)"></member><member name="M:CelestialBody.#ctor"></member><member name="T:Contracts.Contract"></member><member name="F:Contracts.Contract.agent"></member><member name="F:Contracts.Contract.AutoAccept"></member><member name="F:Contracts.Contract.dateAccepted"></member><member name="F:Contracts.Contract.dateDeadline"></member><member name="F:Contracts.Contract.dateExpire"></member><member name="F:Contracts.Contract.dateFinished"></member><member name="F:Contracts.Contract.deadlineType"></member><member name="F:Contracts.Contract.expiryType"></member><member name="F:Contracts.Contract.FundsAdvance"></member><member name="F:Contracts.Contract.FundsCompletion"></member><member name="F:Contracts.Contract.FundsFailure"></member><member name="F:Contracts.Contract.IgnoresWeight"></member><member name="F:Contracts.Contract.OnStateChange"></member><member name="F:Contracts.Contract.prestige"></member><member name="F:Contracts.Contract.ReputationCompletion"></member><member name="F:Contracts.Contract.ReputationFailure"></member><member name="F:Contracts.Contract.ScienceCompletion"></member><member name="F:Contracts.Contract.TimeDeadline"></member><member name="F:Contracts.Contract.TimeExpiry"></member><member name="P:Contracts.Contract.Agent"></member><member name="P:Contracts.Contract.AllParameters"></member><member name="P:Contracts.Contract.ContractGuid"></member><member name="P:Contracts.Contract.ContractID"></member><member name="P:Contracts.Contract.ContractState"></member><member name="P:Contracts.Contract.DateAccepted"></member><member name="P:Contracts.Contract.DateDeadline"></member><member name="P:Contracts.Contract.DateExpire"></member><member name="P:Contracts.Contract.DateFinished"></member><member name="P:Contracts.Contract.Description"></member><member name="P:Contracts.Contract.Item"></member><member name="P:Contracts.Contract.Item"></member><member name="P:Contracts.Contract.Item"></member><member name="P:Contracts.Contract.Keywords"></member><member name="P:Contracts.Contract.KeywordsRequired"></member><member name="P:Contracts.Contract.MissionSeed"></member><member name="P:Contracts.Contract.Notes"></member><member name="P:Contracts.Contract.ParameterCount"></member><member name="P:Contracts.Contract.Parent"></member><member name="P:Contracts.Contract.Prestige"></member><member name="P:Contracts.Contract.Root"></member><member name="P:Contracts.Contract.Synopsys"></member><member name="P:Contracts.Contract.Title"></member><member name="P:Contracts.Contract.contractsInExistance"></member><member name="P:Contracts.Contract.GameTime"></member><member name="M:Contracts.Contract.Accept"></member><member name="M:Contracts.Contract.AddKeywords(string[])"></member><member name="M:Contracts.Contract.AddKeywordsRequired(string[])"></member><member name="M:Contracts.Contract.AddParameter(Contracts.ContractParameter,string)"></member><member name="M:Contracts.Contract.AwardAdvance"></member><member name="M:Contracts.Contract.AwardCompletion"></member><member name="M:Contracts.Contract.CanBeCancelled"></member><member name="M:Contracts.Contract.CanBeDeclined"></member><member name="M:Contracts.Contract.CanBeFailed"></member><member name="M:Contracts.Contract.Cancel"></member><member name="M:Contracts.Contract.Complete"></member><member name="M:Contracts.Contract.Decline"></member><member name="M:Contracts.Contract.Equals(object)"></member><member name="M:Contracts.Contract.Fail"></member><member name="M:Contracts.Contract.Finalize"></member><member name="M:Contracts.Contract.Generate"></member><member name="M:Contracts.Contract.GenerateFailed"></member><member name="M:Contracts.Contract.GetDescription"></member><member name="M:Contracts.Contract.GetDestinationWeight(CelestialBody)"></member><member name="M:Contracts.Contract.GetHashCode"></member><member name="M:Contracts.Contract.GetHashString"></member><member name="M:Contracts.Contract.GetNotes"></member><member name="M:Contracts.Contract.GetParameter(System.Int32)"></member><member name="M:Contracts.Contract.GetParameter(string)"></member><member name="M:Contracts.Contract.GetParameter(System.Type)"></member><member name="M:Contracts.Contract.GetParameter(string)"></member><member name="M:Contracts.Contract.GetSynopsys"></member><member name="M:Contracts.Contract.GetTitle"></member><member name="M:Contracts.Contract.GetType"></member><member name="M:Contracts.Contract.IsFinished"></member><member name="M:Contracts.Contract.Kill"></member><member name="M:Contracts.Contract.MeetRequirements"></member><member name="M:Contracts.Contract.MemberwiseClone"></member><member name="M:Contracts.Contract.MessageAccepted"></member><member name="M:Contracts.Contract.MessageAdvances"></member><member name="M:Contracts.Contract.MessageCancellationPenalties(System.Double,System.Single)"></member><member name="M:Contracts.Contract.MessageCancelled"></member><member name="M:Contracts.Contract.MessageCompleted"></member><member name="M:Contracts.Contract.MessageDeadlineExpired"></member><member name="M:Contracts.Contract.MessageFailed"></member><member name="M:Contracts.Contract.MessageFailurePenalties"></member><member name="M:Contracts.Contract.MessageOffered"></member><member name="M:Contracts.Contract.MessageOfferExpired"></member><member name="M:Contracts.Contract.MessageRewards"></member><member name="M:Contracts.Contract.MissionControlTextRich"></member><member name="M:Contracts.Contract.MissionNotes"></member><member name="M:Contracts.Contract.MissionParameter(Contracts.ContractParameter,System.Int32)"></member><member name="M:Contracts.Contract.Offer"></member><member name="M:Contracts.Contract.OnAccepted"></member><member name="M:Contracts.Contract.OnCancelled"></member><member name="M:Contracts.Contract.OnCompleted"></member><member name="M:Contracts.Contract.OnDeadlineExpired"></member><member name="M:Contracts.Contract.OnDeclined"></member><member name="M:Contracts.Contract.OnFailed"></member><member name="M:Contracts.Contract.OnFinished"></member><member name="M:Contracts.Contract.OnGenerateFailed"></member><member name="M:Contracts.Contract.OnLoad(ConfigNode)"></member><member name="M:Contracts.Contract.OnOffered"></member><member name="M:Contracts.Contract.OnOfferExpired"></member><member name="M:Contracts.Contract.OnParameterStateChange(Contracts.ContractParameter)"></member><member name="M:Contracts.Contract.OnRegister"></member><member name="M:Contracts.Contract.OnReset"></member><member name="M:Contracts.Contract.OnSave(ConfigNode)"></member><member name="M:Contracts.Contract.OnUnregister"></member><member name="M:Contracts.Contract.OnUpdate"></member><member name="M:Contracts.Contract.OnWithdrawn"></member><member name="M:Contracts.Contract.ParameterStateUpdate(Contracts.ContractParameter)"></member><member name="M:Contracts.Contract.PenalizeCancellation"></member><member name="M:Contracts.Contract.PenalizeFailure"></member><member name="M:Contracts.Contract.Register"></member><member name="M:Contracts.Contract.RemoveParameter(System.Int32)"></member><member name="M:Contracts.Contract.RemoveParameter(string)"></member><member name="M:Contracts.Contract.RemoveParameter(System.Type)"></member><member name="M:Contracts.Contract.RemoveParameter(Contracts.ContractParameter)"></member><member name="M:Contracts.Contract.Reset"></member><member name="M:Contracts.Contract.Save(ConfigNode)"></member><member name="M:Contracts.Contract.SendStateMessage(string,string,KSP.UI.Screens.MessageSystemButton+MessageButtonColor,KSP.UI.Screens.MessageSystemButton+ButtonIcons)"></member><member name="M:Contracts.Contract.SetDeadlineDays(System.Single,CelestialBody)"></member><member name="M:Contracts.Contract.SetDeadlineYears(System.Single,CelestialBody)"></member><member name="M:Contracts.Contract.SetExpiry"></member><member name="M:Contracts.Contract.SetExpiry(System.Int32,System.Int32)"></member><member name="M:Contracts.Contract.SetExpiry(System.Single,System.Single)"></member><member name="M:Contracts.Contract.SetFunds(System.Single,System.Single,CelestialBody)"></member><member name="M:Contracts.Contract.SetFunds(System.Single,System.Single,System.Single,CelestialBody)"></member><member name="M:Contracts.Contract.SetReputation(System.Single,System.Single,CelestialBody)"></member><member name="M:Contracts.Contract.SetReputation(System.Single,CelestialBody)"></member><member name="M:Contracts.Contract.SetScience(System.Single,CelestialBody)"></member><member name="M:Contracts.Contract.SetState(Contracts.Contract+State)"></member><member name="M:Contracts.Contract.ToString"></member><member name="M:Contracts.Contract.Unregister"></member><member name="M:Contracts.Contract.Update"></member><member name="M:Contracts.Contract.Withdraw"></member><member name="M:Contracts.Contract.CountBodies_Complete(System.Boolean,System.Boolean,string)"></member><member name="M:Contracts.Contract.CountBodies_Reached(System.Boolean,System.Boolean)"></member><member name="M:Contracts.Contract.Generate(System.Type,Contracts.Contract+ContractPrestige,System.Int32,Contracts.Contract+State)"></member><member name="M:Contracts.Contract.GetBodies(System.Boolean,System.Boolean)"></member><member name="M:Contracts.Contract.GetBodies(string,Contracts.Contract+ProgressState,System.Func)"></member><member name="M:Contracts.Contract.GetBodies(Contracts.Contract+ProgressState,System.Func)"></member><member name="M:Contracts.Contract.GetBodies(Contracts.Contract+ProgressState,string,Contracts.Contract+ProgressState,System.Func)"></member><member name="M:Contracts.Contract.GetBodies(Contract.ProgressState,Func&lt;CelestialBody,bool&gt;)"></member><member name="M:Contracts.Contract.GetBodies(string,Contract.ProgressState,Func&lt;CelestialBody,bool&gt;)"></member><member name="M:Contracts.Contract.GetBodies(Contract.ProgressState,string,Contract.ProgressState,Func&lt;CelestialBody,bool&gt;)"></member><member name="M:Contracts.Contract.GetBodies_Complete(System.Boolean,System.Boolean,string)"></member><member name="M:Contracts.Contract.GetBodies_InComplete(System.Boolean,System.Boolean,string)"></member><member name="M:Contracts.Contract.GetBodies_NextUnreached(System.Int32,System.Func)"></member><member name="M:Contracts.Contract.GetBodies_NextUnreached(System.Int32,Func&lt;CelestialBody,bool&gt;)"></member><member name="M:Contracts.Contract.GetBodies_NotReached(System.Boolean,System.Boolean)"></member><member name="M:Contracts.Contract.GetBodies_Reached(System.Boolean,System.Boolean)"></member><member name="M:Contracts.Contract.Load(Contracts.Contract,ConfigNode)"></member><member name="M:Contracts.Contract.#ctor"></member><member name="T:Contracts.ContractParameter"></member><member name="F:Contracts.ContractParameter.disableOnStateChange"></member><member name="F:Contracts.ContractParameter.enabled"></member><member name="F:Contracts.ContractParameter.FundsCompletion"></member><member name="F:Contracts.ContractParameter.FundsFailure"></member><member name="F:Contracts.ContractParameter.id"></member><member name="F:Contracts.ContractParameter.OnStateChange"></member><member name="F:Contracts.ContractParameter.optional"></member><member name="F:Contracts.ContractParameter.ReputationCompletion"></member><member name="F:Contracts.ContractParameter.ReputationFailure"></member><member name="F:Contracts.ContractParameter.ScienceCompletion"></member><member name="F:Contracts.ContractParameter.state"></member><member name="P:Contracts.ContractParameter.AllParameters"></member><member name="P:Contracts.ContractParameter.DisableOnStateChange"></member><member name="P:Contracts.ContractParameter.Enabled"></member><member name="P:Contracts.ContractParameter.HashString"></member><member name="P:Contracts.ContractParameter.ID"></member><member name="P:Contracts.ContractParameter.Item"></member><member name="P:Contracts.ContractParameter.Item"></member><member name="P:Contracts.ContractParameter.Item"></member><member name="P:Contracts.ContractParameter.MessageComplete"></member><member name="P:Contracts.ContractParameter.MessageFailed"></member><member name="P:Contracts.ContractParameter.MessageIncomplete"></member><member name="P:Contracts.ContractParameter.Notes"></member><member name="P:Contracts.ContractParameter.Optional"></member><member name="P:Contracts.ContractParameter.ParameterCount"></member><member name="P:Contracts.ContractParameter.Parent"></member><member name="P:Contracts.ContractParameter.Root"></member><member name="P:Contracts.ContractParameter.State"></member><member name="P:Contracts.ContractParameter.Title"></member><member name="M:Contracts.ContractParameter.AddParameter(Contracts.ContractParameter,string)"></member><member name="M:Contracts.ContractParameter.AllChildParametersComplete"></member><member name="M:Contracts.ContractParameter.AnyChildParametersFailed"></member><member name="M:Contracts.ContractParameter.AwardCompletion"></member><member name="M:Contracts.ContractParameter.CreateID"></member><member name="M:Contracts.ContractParameter.Disable"></member><member name="M:Contracts.ContractParameter.Enable"></member><member name="M:Contracts.ContractParameter.Equals(object)"></member><member name="M:Contracts.ContractParameter.Finalize"></member><member name="M:Contracts.ContractParameter.GetHashCode"></member><member name="M:Contracts.ContractParameter.GetHashString"></member><member name="M:Contracts.ContractParameter.GetMessageComplete"></member><member name="M:Contracts.ContractParameter.GetMessageFailed"></member><member name="M:Contracts.ContractParameter.GetMessageIncomplete"></member><member name="M:Contracts.ContractParameter.GetNotes"></member><member name="M:Contracts.ContractParameter.GetParameter(System.Int32)"></member><member name="M:Contracts.ContractParameter.GetParameter(string)"></member><member name="M:Contracts.ContractParameter.GetParameter(System.Type)"></member><member name="M:Contracts.ContractParameter.GetParameter(string)"></member><member name="M:Contracts.ContractParameter.GetTitle"></member><member name="M:Contracts.ContractParameter.GetType"></member><member name="M:Contracts.ContractParameter.Load(ConfigNode)"></member><member name="M:Contracts.ContractParameter.MemberwiseClone"></member><member name="M:Contracts.ContractParameter.NestToParent(Contracts.IContractParameterHost)"></member><member name="M:Contracts.ContractParameter.OnLoad(ConfigNode)"></member><member name="M:Contracts.ContractParameter.OnParameterStateChange(Contracts.ContractParameter)"></member><member name="M:Contracts.ContractParameter.OnRegister"></member><member name="M:Contracts.ContractParameter.OnReset"></member><member name="M:Contracts.ContractParameter.OnSave(ConfigNode)"></member><member name="M:Contracts.ContractParameter.OnUnregister"></member><member name="M:Contracts.ContractParameter.OnUpdate"></member><member name="M:Contracts.ContractParameter.ParameterStateUpdate(Contracts.ContractParameter)"></member><member name="M:Contracts.ContractParameter.PenalizeFailure"></member><member name="M:Contracts.ContractParameter.Register"></member><member name="M:Contracts.ContractParameter.RemoveParameter(System.Int32)"></member><member name="M:Contracts.ContractParameter.RemoveParameter(string)"></member><member name="M:Contracts.ContractParameter.RemoveParameter(System.Type)"></member><member name="M:Contracts.ContractParameter.RemoveParameter(Contracts.ContractParameter)"></member><member name="M:Contracts.ContractParameter.Reset"></member><member name="M:Contracts.ContractParameter.Save(ConfigNode)"></member><member name="M:Contracts.ContractParameter.SendStateMessage(string,string,KSP.UI.Screens.MessageSystemButton+MessageButtonColor,KSP.UI.Screens.MessageSystemButton+ButtonIcons)"></member><member name="M:Contracts.ContractParameter.SetComplete"></member><member name="M:Contracts.ContractParameter.SetFailed"></member><member name="M:Contracts.ContractParameter.SetFunds(System.Single,CelestialBody)"></member><member name="M:Contracts.ContractParameter.SetFunds(System.Single,System.Single,CelestialBody)"></member><member name="M:Contracts.ContractParameter.SetIncomplete"></member><member name="M:Contracts.ContractParameter.SetReputation(System.Single,System.Single,CelestialBody)"></member><member name="M:Contracts.ContractParameter.SetReputation(System.Single,CelestialBody)"></member><member name="M:Contracts.ContractParameter.SetScience(System.Single,CelestialBody)"></member><member name="M:Contracts.ContractParameter.ToString"></member><member name="M:Contracts.ContractParameter.Unregister"></member><member name="M:Contracts.ContractParameter.Update"></member><member name="M:Contracts.ContractParameter.#ctor"></member><member name="T:Contracts.ContractPredicate"></member><member name="P:Contracts.ContractPredicate.AllowMultiple"></member><member name="P:Contracts.ContractPredicate.Description"></member><member name="P:Contracts.ContractPredicate.Parent"></member><member name="P:Contracts.ContractPredicate.Root"></member><member name="M:Contracts.ContractPredicate.Equals(object)"></member><member name="M:Contracts.ContractPredicate.Finalize"></member><member name="M:Contracts.ContractPredicate.GetAllowMultiple"></member><member name="M:Contracts.ContractPredicate.GetDescription"></member><member name="M:Contracts.ContractPredicate.GetHashCode"></member><member name="M:Contracts.ContractPredicate.GetType"></member><member name="M:Contracts.ContractPredicate.Load(ConfigNode)"></member><member name="M:Contracts.ContractPredicate.MemberwiseClone"></member><member name="M:Contracts.ContractPredicate.OnLoad(ConfigNode)"></member><member name="M:Contracts.ContractPredicate.OnSave(ConfigNode)"></member><member name="M:Contracts.ContractPredicate.OnUpdate"></member><member name="M:Contracts.ContractPredicate.Save(ConfigNode)"></member><member name="M:Contracts.ContractPredicate.Test(Vessel)"></member><member name="M:Contracts.ContractPredicate.Test(ProtoVessel)"></member><member name="M:Contracts.ContractPredicate.ToString"></member><member name="M:Contracts.ContractPredicate.Update"></member><member name="M:Contracts.ContractPredicate.#ctor(Contracts.IContractParameterHost)"></member><member name="T:Contracts.ContractSystem"></member><member name="F:Contracts.ContractSystem.runner"></member><member name="F:Contracts.ContractSystem.snapshot"></member><member name="F:Contracts.ContractSystem.targetScenes"></member><member name="F:Contracts.ContractSystem.ContractTypes"></member><member name="F:Contracts.ContractSystem.ContractWeights"></member><member name="F:Contracts.ContractSystem.generateContractIterations"></member><member name="F:Contracts.ContractSystem.ParameterTypes"></member><member name="F:Contracts.ContractSystem.PredicateTypes"></member><member name="P:Contracts.ContractSystem.ClassID"></member><member name="P:Contracts.ContractSystem.ClassName"></member><member name="P:Contracts.ContractSystem.Contracts"></member><member name="P:Contracts.ContractSystem.ContractsFinished"></member><member name="P:Contracts.ContractSystem.enabled"></member><member name="P:Contracts.ContractSystem.Events"></member><member name="P:Contracts.ContractSystem.Fields"></member><member name="P:Contracts.ContractSystem.gameObject"></member><member name="P:Contracts.ContractSystem.hideFlags"></member><member name="P:Contracts.ContractSystem.isActiveAndEnabled"></member><member name="P:Contracts.ContractSystem.name"></member><member name="P:Contracts.ContractSystem.tag"></member><member name="P:Contracts.ContractSystem.transform"></member><member name="P:Contracts.ContractSystem.useGUILayout"></member><member name="P:Contracts.ContractSystem.Instance"></member><member name="M:Contracts.ContractSystem.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:Contracts.ContractSystem.BroadcastMessage(string,object)"></member><member name="M:Contracts.ContractSystem.BroadcastMessage(string)"></member><member name="M:Contracts.ContractSystem.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:Contracts.ContractSystem.CancelInvoke"></member><member name="M:Contracts.ContractSystem.CancelInvoke(string)"></member><member name="M:Contracts.ContractSystem.ClearContractsCurrent"></member><member name="M:Contracts.ContractSystem.ClearContractsFinished"></member><member name="M:Contracts.ContractSystem.CompareTag(string)"></member><member name="M:Contracts.ContractSystem.CountContracts(Contracts.Contract+ContractPrestige)"></member><member name="M:Contracts.ContractSystem.Equals(object)"></member><member name="M:Contracts.ContractSystem.Finalize"></member><member name="M:Contracts.ContractSystem.GenerateContract(int&amp;,Contracts.Contract+ContractPrestige)"></member><member name="M:Contracts.ContractSystem.GenerateContract(System.Int32,Contracts.Contract+ContractPrestige,System.Type)"></member><member name="M:Contracts.ContractSystem.GenerateContracts(int&amp;,Contracts.Contract+ContractPrestige,System.Int32)"></member><member name="M:Contracts.ContractSystem.GetActiveContractCount"></member><member name="M:Contracts.ContractSystem.GetCompletedContracts"></member><member name="M:Contracts.ContractSystem.GetComponent(System.Type)"></member><member name="M:Contracts.ContractSystem.GetComponent"></member><member name="M:Contracts.ContractSystem.GetComponent(string)"></member><member name="M:Contracts.ContractSystem.GetComponentInChildren(System.Type)"></member><member name="M:Contracts.ContractSystem.GetComponentInChildren"></member><member name="M:Contracts.ContractSystem.GetComponentInParent(System.Type)"></member><member name="M:Contracts.ContractSystem.GetComponentInParent"></member><member name="M:Contracts.ContractSystem.GetComponents(System.Type)"></member><member name="M:Contracts.ContractSystem.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:Contracts.ContractSystem.GetComponents(List)"></member><member name="M:Contracts.ContractSystem.GetComponents"></member><member name="M:Contracts.ContractSystem.GetComponentsInChildren(System.Type)"></member><member name="M:Contracts.ContractSystem.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:Contracts.ContractSystem.GetComponentsInChildren(System.Boolean)"></member><member name="M:Contracts.ContractSystem.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:Contracts.ContractSystem.GetComponentsInChildren"></member><member name="M:Contracts.ContractSystem.GetComponentsInChildren(List)"></member><member name="M:Contracts.ContractSystem.GetComponentsInParent(System.Type)"></member><member name="M:Contracts.ContractSystem.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:Contracts.ContractSystem.GetComponentsInParent(System.Boolean)"></member><member name="M:Contracts.ContractSystem.GetComponentsInParent(System.Boolean,List)"></member><member name="M:Contracts.ContractSystem.GetComponentsInParent"></member><member name="M:Contracts.ContractSystem.GetCurrentActiveContracts"></member><member name="M:Contracts.ContractSystem.GetCurrentContracts"></member><member name="M:Contracts.ContractSystem.GetHashCode"></member><member name="M:Contracts.ContractSystem.GetInstanceID"></member><member name="M:Contracts.ContractSystem.GetType"></member><member name="M:Contracts.ContractSystem.HasCompletedContract(System.Type)"></member><member name="M:Contracts.ContractSystem.Invoke(string,System.Single)"></member><member name="M:Contracts.ContractSystem.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:Contracts.ContractSystem.IsInvoking(string)"></member><member name="M:Contracts.ContractSystem.IsInvoking"></member><member name="M:Contracts.ContractSystem.Load(ConfigNode)"></member><member name="M:Contracts.ContractSystem.MemberwiseClone"></member><member name="M:Contracts.ContractSystem.OnAwake"></member><member name="M:Contracts.ContractSystem.OnLoad(ConfigNode)"></member><member name="M:Contracts.ContractSystem.OnSave(ConfigNode)"></member><member name="M:Contracts.ContractSystem.RebuildContracts"></member><member name="M:Contracts.ContractSystem.Save(ConfigNode)"></member><member name="M:Contracts.ContractSystem.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:Contracts.ContractSystem.SendMessage(string,object)"></member><member name="M:Contracts.ContractSystem.SendMessage(string)"></member><member name="M:Contracts.ContractSystem.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:Contracts.ContractSystem.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:Contracts.ContractSystem.SendMessageUpwards(string,object)"></member><member name="M:Contracts.ContractSystem.SendMessageUpwards(string)"></member><member name="M:Contracts.ContractSystem.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:Contracts.ContractSystem.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:Contracts.ContractSystem.StartCoroutine(string,object)"></member><member name="M:Contracts.ContractSystem.StartCoroutine(string)"></member><member name="M:Contracts.ContractSystem.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:Contracts.ContractSystem.StopAllCoroutines"></member><member name="M:Contracts.ContractSystem.StopCoroutine(string)"></member><member name="M:Contracts.ContractSystem.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:Contracts.ContractSystem.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:Contracts.ContractSystem.ToString"></member><member name="M:Contracts.ContractSystem.WithdrawSurplusContracts(Contracts.Contract+ContractPrestige,System.Int32)"></member><member name="M:Contracts.ContractSystem.GetContractCounts(System.Single,System.Int32,int&amp;,int&amp;,int&amp;)"></member><member name="M:Contracts.ContractSystem.GetContractCounts(System.Single,System.Int32,System.Int32,System.Int32,System.Int32)"></member><member name="M:Contracts.ContractSystem.GetContractType(string)"></member><member name="M:Contracts.ContractSystem.GetParameterType(string)"></member><member name="M:Contracts.ContractSystem.GetPredicateType(string)"></member><member name="M:Contracts.ContractSystem.ResetWeights"></member><member name="M:Contracts.ContractSystem.WeightAdjustment(System.Type,System.Int32)"></member><member name="M:Contracts.ContractSystem.WeightAssignment(System.Type,System.Int32)"></member><member name="M:Contracts.ContractSystem.WeightLower(System.Type)"></member><member name="M:Contracts.ContractSystem.WeightRaise(System.Type)"></member><member name="M:Contracts.ContractSystem.#ctor"></member><member name="T:Contracts.TextGen"></member><member name="F:Contracts.TextGen.Agencies"></member><member name="M:Contracts.TextGen.Equals(object)"></member><member name="M:Contracts.TextGen.Finalize"></member><member name="M:Contracts.TextGen.GetHashCode"></member><member name="M:Contracts.TextGen.GetType"></member><member name="M:Contracts.TextGen.MemberwiseClone"></member><member name="M:Contracts.TextGen.ToString"></member><member name="M:Contracts.TextGen.GenerateBackStories(string,string,string,string,string,System.Int32)"></member><member name="M:Contracts.TextGen.GetMergedConfigNodes(string)"></member><member name="M:Contracts.TextGen.Setup"></member><member name="T:ControlTypes"><summary>The different controls that it is possible to lock the player out of using InputLockManager. You can OR them together to lock the player out of multiple controls at once.   TaranisElsu compiled this list of the binary values of the enum members as of KSP 0.24.2, which makes it clearer which controls are locked in each case:</summary><code>None                                                                                          0 PITCH                                                                                         1 ROLL                                                                                        100 YAW                                                                                        1000 THROTTLE                                                                                  10000 SAS                                                                                      100000 PAUSE                                                                                   1000000 STAGING                                                                                10000000 CAMERAMODES                                                                          1 00000000 MISC                                                                                10 00000000 CAMERACONTROLS                                                                     100 00000000 TIMEWARP                                                                          1000 00000000 MAP                                                                              10000 00000000 LINEAR                                                                          100000 00000000 QUICKSAVE                                                                      1000000 00000000 QUICKLOAD                                                                     10000000 00000000 VESSEL_SWITCHING                                                            1 00000000 00000000 CUSTOM_ACTION_GROUPS                                                       10 00000000 00000000 GROUP_ABORT                                                               100 00000000 00000000 GROUP_GEARS                                                              1000 00000000 00000000 GROUP_LIGHTS                                                            10000 00000000 00000000 GROUP_BRAKES                                                           100000 00000000 00000000 GROUP_STAGE                                                           1000000 00000000 00000000 GROUPS_ALL                                                            1111110 00000000 00000000 ACTIONS_SHIP                                                         10000000 00000000 00000000 ACTIONS_EXTERNAL                                                   1 00000000 00000000 00000000 ACTIONS_ALL                                                        1 10000000 00000000 00000000 RCS                                                               10 00000000 00000000 00000000 WHEEL_STEER                                                      100 00000000 00000000 00000000 WHEEL_THROTTLE                                                  1000 00000000 00000000 00000000 EVA_INPUT                                                      10000 00000000 00000000 00000000 EDITOR_ICON_HOVER                                             100000 00000000 00000000 00000000 EDITOR_ICON_PICK                                             1000000 00000000 00000000 00000000 EDITOR_TAB_SWITCH                                           10000000 00000000 00000000 00000000 EDITOR_SAVE                                               1 00000000 00000000 00000000 00000000 EDITOR_LOAD                                              10 00000000 00000000 00000000 00000000 EDITOR_EXIT                                             100 00000000 00000000 00000000 00000000 EDITOR_NEW                                             1000 00000000 00000000 00000000 00000000 EDITOR_LAUNCH                                         10000 00000000 00000000 00000000 00000000 EDITOR_UI_TOPRIGHT                                    11111 00000000 00000000 00000000 00000000 EDITOR_PAD_PICK_PLACE                                100000 00000000 00000000 00000000 00000000 EDITOR_PAD_PICK_COPY                                1000000 00000000 00000000 00000000 00000000 EDITOR_EDIT_STAGES                                 10000000 00000000 00000000 00000000 00000000 EDITOR_EDIT_NAME_FIELDS                          1 00000000 00000000 00000000 00000000 00000000 EDITOR_ROTATE_PARTS                             10 00000000 00000000 00000000 00000000 00000000 EDITOR_UNDO_REDO                               100 00000000 00000000 00000000 00000000 00000000 EDITOR_SYM_SNAP                               1000 00000000 00000000 00000000 00000000 00000000 EDITOR_OVERLAYS                              10000 00000000 00000000 00000000 00000000 00000000 EDITOR_MODE_SWITCH                          100000 00000000 00000000 00000000 00000000 00000000 EDITOR_UI_TOPBAR                            100001 00011111 00000000 00000000 00000000 00000000 EDITOR_UI                                   101101 10011111 00000000 00000000 00000000 00000000 EDITOR_SOFT_LOCK                            111110 01100000 11100000 00000000 00000000 00000000 EDITOR_LOCK                                 111110 01100000 11100000 00000000 00000100 00000000 TRACKINGSTATION_UI                         1000000 00000000 00000000 00000000 00000000 00000000 TRACKINGSTATION_ALL                        1000000 00000000 00000000 00000000 00001100 00000000 KSC_FACILITIES                            10000000 00000000 00000000 00000000 00000000 00000000 KSC_UI                                  1 00000000 00000000 00000000 00000000 00000000 00000000 KSC_ALL                                 1 10000000 00000000 00000000 00000000 00001100 00000000 APPLAUNCHER_BUTTONS                    10 00000000 00000000 00000000 00000000 00000000 00000000 ALL_SHIP_CONTROLS       11111111 11111111 11111111 11111111 11111111 11111110 00100010 10111111 All                     11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111</code></member><member name="T:CrewHatchController"></member><member name="F:CrewHatchController.anchorOffset"></member><member name="F:CrewHatchController.fetch"></member><member name="P:CrewHatchController.enabled"></member><member name="P:CrewHatchController.gameObject"></member><member name="P:CrewHatchController.hideFlags"></member><member name="P:CrewHatchController.isActiveAndEnabled"></member><member name="P:CrewHatchController.name"></member><member name="P:CrewHatchController.tag"></member><member name="P:CrewHatchController.transform"></member><member name="P:CrewHatchController.useGUILayout"></member><member name="M:CrewHatchController.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:CrewHatchController.BroadcastMessage(string,object)"></member><member name="M:CrewHatchController.BroadcastMessage(string)"></member><member name="M:CrewHatchController.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:CrewHatchController.CancelInvoke"></member><member name="M:CrewHatchController.CancelInvoke(string)"></member><member name="M:CrewHatchController.CompareTag(string)"></member><member name="M:CrewHatchController.DespawnUIs"></member><member name="M:CrewHatchController.DisableInterface"><summary>Will turn off the Hatch GUI window - so it will no longer be available on any part.</summary></member><member name="M:CrewHatchController.DismissDialog"></member><member name="M:CrewHatchController.EnableInterface"><summary>Will turn on the Hatch GUI window - so it will now be available on any part.</summary></member><member name="M:CrewHatchController.Equals(object)"></member><member name="M:CrewHatchController.Finalize"></member><member name="M:CrewHatchController.GetComponent(System.Type)"></member><member name="M:CrewHatchController.GetComponent"></member><member name="M:CrewHatchController.GetComponent(string)"></member><member name="M:CrewHatchController.GetComponentInChildren(System.Type)"></member><member name="M:CrewHatchController.GetComponentInChildren"></member><member name="M:CrewHatchController.GetComponentInParent(System.Type)"></member><member name="M:CrewHatchController.GetComponentInParent"></member><member name="M:CrewHatchController.GetComponents(System.Type)"></member><member name="M:CrewHatchController.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:CrewHatchController.GetComponents(List)"></member><member name="M:CrewHatchController.GetComponents"></member><member name="M:CrewHatchController.GetComponentsInChildren(System.Type)"></member><member name="M:CrewHatchController.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:CrewHatchController.GetComponentsInChildren(System.Boolean)"></member><member name="M:CrewHatchController.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:CrewHatchController.GetComponentsInChildren"></member><member name="M:CrewHatchController.GetComponentsInChildren(List)"></member><member name="M:CrewHatchController.GetComponentsInParent(System.Type)"></member><member name="M:CrewHatchController.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:CrewHatchController.GetComponentsInParent(System.Boolean)"></member><member name="M:CrewHatchController.GetComponentsInParent(System.Boolean,List)"></member><member name="M:CrewHatchController.GetComponentsInParent"></member><member name="M:CrewHatchController.GetHashCode"></member><member name="M:CrewHatchController.GetInstanceID"></member><member name="M:CrewHatchController.GetMouseUiPos"></member><member name="M:CrewHatchController.GetType"></member><member name="M:CrewHatchController.HideTooltip"></member><member name="M:CrewHatchController.Invoke(string,System.Single)"></member><member name="M:CrewHatchController.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:CrewHatchController.IsInvoking(string)"></member><member name="M:CrewHatchController.IsInvoking"></member><member name="M:CrewHatchController.MemberwiseClone"></member><member name="M:CrewHatchController.OnCrewDialogDismiss"></member><member name="M:CrewHatchController.OnEVABtn(ProtoCrewMember)"></member><member name="M:CrewHatchController.OnTransferBtn(ProtoCrewMember)"></member><member name="M:CrewHatchController.OnVesselSwitch(Vessel)"></member><member name="M:CrewHatchController.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:CrewHatchController.SendMessage(string,object)"></member><member name="M:CrewHatchController.SendMessage(string)"></member><member name="M:CrewHatchController.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:CrewHatchController.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:CrewHatchController.SendMessageUpwards(string,object)"></member><member name="M:CrewHatchController.SendMessageUpwards(string)"></member><member name="M:CrewHatchController.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:CrewHatchController.ShowTooltip"></member><member name="M:CrewHatchController.SpawnCrewDialog(Part,System.Boolean,System.Boolean)"><summary>Spawns the Hatch dialog GUI window for part. If showEVA is true will show EVA buttons, if showTransfer is true will show Transfer buttons.
It is called by left clicking the hatch on a part. Unfortunately it appears there is no way to intercept and change the value of the two bools if you wanted to.</summary></member><member name="M:CrewHatchController.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:CrewHatchController.StartCoroutine(string,object)"></member><member name="M:CrewHatchController.StartCoroutine(string)"></member><member name="M:CrewHatchController.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:CrewHatchController.StopAllCoroutines"></member><member name="M:CrewHatchController.StopCoroutine(string)"></member><member name="M:CrewHatchController.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:CrewHatchController.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:CrewHatchController.TooltipUpdate(Part)"></member><member name="M:CrewHatchController.ToString"></member><member name="M:CrewHatchController.#ctor"></member><member name="T:CurrencyModifierQuery"></member><member name="F:CurrencyModifierQuery.reason"></member><member name="M:CurrencyModifierQuery.AddDelta(Currency,System.Single)"></member><member name="M:CurrencyModifierQuery.Equals(object)"></member><member name="M:CurrencyModifierQuery.Finalize"></member><member name="M:CurrencyModifierQuery.GetEffectDelta(Currency)"></member><member name="M:CurrencyModifierQuery.GetEffectDeltaText(Currency,string,CurrencyModifierQuery+TextStyling)"></member><member name="M:CurrencyModifierQuery.GetEffectPercentageText(Currency,string,CurrencyModifierQuery+TextStyling)"></member><member name="M:CurrencyModifierQuery.GetHashCode"></member><member name="M:CurrencyModifierQuery.GetInput(Currency)"></member><member name="M:CurrencyModifierQuery.GetType"></member><member name="M:CurrencyModifierQuery.MemberwiseClone"></member><member name="M:CurrencyModifierQuery.ToString"></member><member name="M:CurrencyModifierQuery.RunQuery(TransactionReasons,System.Single,System.Single,System.Single)"></member><member name="M:CurrencyModifierQuery.#ctor(TransactionReasons,System.Single,System.Single,System.Single)"></member><member name="T:Decoupler"><summary>The old, deprecated class that used to be used to implement decouplers before PartModules. Use ModuleDecouple or ModuleAnchoredDecoupler instead.</summary></member><member name="F:Decoupler.absorptiveConstant"></member><member name="F:Decoupler.ActivatesEvenIfDisconnected"></member><member name="F:Decoupler.aerodynamicArea"></member><member name="F:Decoupler.airlock"></member><member name="F:Decoupler.airstreamShields"></member><member name="F:Decoupler.analyticInternalInsulationFactor"></member><member name="F:Decoupler.analyticSkinInsulationFactor"></member><member name="F:Decoupler.angularDrag"></member><member name="F:Decoupler.angularDragByFI"></member><member name="F:Decoupler.atmDensity"></member><member name="F:Decoupler.attached"></member><member name="F:Decoupler.attachJoint"></member><member name="F:Decoupler.attachMethod"></member><member name="F:Decoupler.attachMode"></member><member name="F:Decoupler.attachNodes"></member><member name="F:Decoupler.attachRules"></member><member name="F:Decoupler.attPos"></member><member name="F:Decoupler.attPos0"></member><member name="F:Decoupler.attRotation"></member><member name="F:Decoupler.attRotation0"></member><member name="F:Decoupler.blackBodyRadiationAlphaMult"></member><member name="F:Decoupler.bodyLiftLocalPosition"></member><member name="F:Decoupler.bodyLiftLocalVector"></member><member name="F:Decoupler.bodyLiftMultiplier"></member><member name="F:Decoupler.bodyLiftScalar"></member><member name="F:Decoupler.boundsMultiplier"></member><member name="F:Decoupler.breakingForce"></member><member name="F:Decoupler.breakingTorque"></member><member name="F:Decoupler.buoyancy"></member><member name="F:Decoupler.buoyancyUseCubeNamed"></member><member name="F:Decoupler.buoyancyUseSine"></member><member name="F:Decoupler.CenterOfBuoyancy"></member><member name="F:Decoupler.CenterOfDisplacement"></member><member name="F:Decoupler.children"></member><member name="F:Decoupler.childStageOffset"></member><member name="F:Decoupler.collider"></member><member name="F:Decoupler.collisionEnhancer"></member><member name="F:Decoupler.CoLOffset"></member><member name="F:Decoupler.CoMOffset"></member><member name="F:Decoupler.connected"></member><member name="F:Decoupler.CoPOffset"></member><member name="F:Decoupler.craftID"></member><member name="F:Decoupler.crashTolerance"></member><member name="F:Decoupler.CrewCapacity"></member><member name="F:Decoupler.crewRespawnTime"></member><member name="F:Decoupler.crewTransferAvailable"></member><member name="F:Decoupler.currentCollisions"></member><member name="F:Decoupler.customPartData"></member><member name="F:Decoupler.defaultInverseStage"></member><member name="F:Decoupler.depth"></member><member name="F:Decoupler.dragModel"></member><member name="F:Decoupler.dragReferenceVector"></member><member name="F:Decoupler.dragScalar"></member><member name="F:Decoupler.dragVector"></member><member name="F:Decoupler.dragVectorDir"></member><member name="F:Decoupler.dragVectorDirLocal"></member><member name="F:Decoupler.dragVectorMag"></member><member name="F:Decoupler.dragVectorSqrMag"></member><member name="F:Decoupler.dynamicPressurekPa"></member><member name="F:Decoupler.edgeHighlightThresholdMult"></member><member name="F:Decoupler.editorCollision"></member><member name="F:Decoupler.editorLinks"></member><member name="F:Decoupler.editorStarted"></member><member name="F:Decoupler.ejectionForce"></member><member name="F:Decoupler.emissiveConstant"></member><member name="F:Decoupler.explosionPotential"></member><member name="F:Decoupler.exposedArea"></member><member name="F:Decoupler.flagURL"></member><member name="F:Decoupler.flightID"></member><member name="F:Decoupler.frozen"></member><member name="F:Decoupler.fuelCrossFeed"></member><member name="F:Decoupler.fuelLookupTargets"></member><member name="F:Decoupler.fxGroups"></member><member name="F:Decoupler.gaugeThresholdMult"></member><member name="F:Decoupler.GroundContact"></member><member name="F:Decoupler.gTolerance"></member><member name="F:Decoupler.habitableVolume"></member><member name="F:Decoupler.hasHeiarchyModel"></member><member name="F:Decoupler.hasLiftModule"></member><member name="F:Decoupler.hatchObstructionCheckInwardDistance"></member><member name="F:Decoupler.hatchObstructionCheckInwardOffset"></member><member name="F:Decoupler.hatchObstructionCheckOutwardDistance"></member><member name="F:Decoupler.hatchObstructionCheckSphereRadius"></member><member name="F:Decoupler.heatConductivity"></member><member name="F:Decoupler.heatConvectiveConstant"></member><member name="F:Decoupler.highlightColor"></member><member name="F:Decoupler.highlighter"></member><member name="F:Decoupler.highlightType"></member><member name="F:Decoupler.initialVesselName"></member><member name="F:Decoupler.inStageIndex"></member><member name="F:Decoupler.internalModel"></member><member name="F:Decoupler.InternalModelName"></member><member name="F:Decoupler.inverseStage"></member><member name="F:Decoupler.isClone"></member><member name="F:Decoupler.isControlSource"></member><member name="F:Decoupler.isMirrored"></member><member name="F:Decoupler.isPersistent"></member><member name="F:Decoupler.lastFuelRequestId"></member><member name="F:Decoupler.launchID"></member><member name="F:Decoupler.machNumber"></member><member name="F:Decoupler.manualStageOffset"></member><member name="F:Decoupler.mass"></member><member name="F:Decoupler.maxDepth"></member><member name="F:Decoupler.maximum_drag"></member><member name="F:Decoupler.maxTemp"></member><member name="F:Decoupler.minDepth"></member><member name="F:Decoupler.minimum_drag"></member><member name="F:Decoupler.mirrorAxis"></member><member name="F:Decoupler.mirrorRefAxis"></member><member name="F:Decoupler.mirrorVector"></member><member name="F:Decoupler.missionID"></member><member name="F:Decoupler.moduleSize"></member><member name="F:Decoupler.needPrefabMass"></member><member name="F:Decoupler.noAutoEVAAny"></member><member name="F:Decoupler.noAutoEVAMulti"></member><member name="F:Decoupler.NoCrossFeedNodeKey"></member><member name="F:Decoupler.OnEditorAttach"></member><member name="F:Decoupler.OnEditorDestroy"></member><member name="F:Decoupler.OnEditorDetach"></member><member name="F:Decoupler.OnJustAboutToBeDestroyed"></member><member name="F:Decoupler.orgPos"></member><member name="F:Decoupler.orgRot"></member><member name="F:Decoupler.originalStage"></member><member name="F:Decoupler.overrideSkillUpdate"></member><member name="F:Decoupler.overrideSkillUpdateModules"></member><member name="F:Decoupler.packed"></member><member name="F:Decoupler.parent"></member><member name="F:Decoupler.partBuoyancy"></member><member name="F:Decoupler.partInfo"></member><member name="F:Decoupler.partName"></member><member name="F:Decoupler.partTransform"></member><member name="F:Decoupler.PermanentGroundContact"></member><member name="F:Decoupler.physicalSignificance"></member><member name="F:Decoupler.PhysicsSignificance"></member><member name="F:Decoupler.potentialParent"></member><member name="F:Decoupler.prefabMass"></member><member name="F:Decoupler.prefabSize"></member><member name="F:Decoupler.protoModuleCrew"></member><member name="F:Decoupler.protoPartSnapshot"></member><member name="F:Decoupler.ptd"></member><member name="F:Decoupler.radiativeArea"></member><member name="F:Decoupler.radiatorCritical"></member><member name="F:Decoupler.radiatorHeadroom"></member><member name="F:Decoupler.radiatorMax"></member><member name="F:Decoupler.rb"></member><member name="F:Decoupler.rescaleFactor"></member><member name="F:Decoupler.resourceMass"></member><member name="F:Decoupler.resourceRequestRemainingThreshold"></member><member name="F:Decoupler.resourceTargets"></member><member name="F:Decoupler.resourceThermalMass"></member><member name="F:Decoupler.ResumeState"></member><member name="F:Decoupler.scaleFactor"></member><member name="F:Decoupler.separationIndex"></member><member name="F:Decoupler.skinExposedArea"></member><member name="F:Decoupler.skinExposedAreaFrac"></member><member name="F:Decoupler.skinExposedMassMult"></member><member name="F:Decoupler.skinInternalConductionMult"></member><member name="F:Decoupler.skinMassPerArea"></member><member name="F:Decoupler.skinMaxTemp"></member><member name="F:Decoupler.skinSkinConductionMult"></member><member name="F:Decoupler.skinTemperature"></member><member name="F:Decoupler.skinThermalMass"></member><member name="F:Decoupler.skinThermalMassModifier"></member><member name="F:Decoupler.skinThermalMassRecip"></member><member name="F:Decoupler.skinToInternalFlux"></member><member name="F:Decoupler.skinUnexposedExternalTemp"></member><member name="F:Decoupler.skinUnexposedMassMult"></member><member name="F:Decoupler.skinUnexposedTemperature"></member><member name="F:Decoupler.skipColliderIgnores"></member><member name="F:Decoupler.srfAttachNode"></member><member name="F:Decoupler.stackIcon"></member><member name="F:Decoupler.stackIconGrouping"></member><member name="F:Decoupler.stackPriThreshold"></member><member name="F:Decoupler.stackSymmetry"></member><member name="F:Decoupler.stageAfter"></member><member name="F:Decoupler.stageBefore"></member><member name="F:Decoupler.stageOffset"></member><member name="F:Decoupler.stagingIcon"></member><member name="F:Decoupler.stagingIconAlwaysShown"></member><member name="F:Decoupler.stagingOn"></member><member name="F:Decoupler.started"></member><member name="F:Decoupler.state"></member><member name="F:Decoupler.staticPressureAtm"></member><member name="F:Decoupler.submergedDragScalar"></member><member name="F:Decoupler.submergedDynamicPressurekPa"></member><member name="F:Decoupler.submergedLiftScalar"></member><member name="F:Decoupler.submergedPortion"></member><member name="F:Decoupler.surfaceAreas"></member><member name="F:Decoupler.symMethod"></member><member name="F:Decoupler.symmetryCounterparts"></member><member name="F:Decoupler.temperature"></member><member name="F:Decoupler.terrainCollider"></member><member name="F:Decoupler.thermalConductionFlux"></member><member name="F:Decoupler.thermalConvectionFlux"></member><member name="F:Decoupler.thermalExposedFlux"></member><member name="F:Decoupler.thermalExposedFluxPrevious"></member><member name="F:Decoupler.thermalInternalFlux"></member><member name="F:Decoupler.thermalInternalFluxPrevious"></member><member name="F:Decoupler.thermalMass"></member><member name="F:Decoupler.thermalMassModifier"></member><member name="F:Decoupler.thermalMassReciprocal"></member><member name="F:Decoupler.thermalRadiationFlux"></member><member name="F:Decoupler.thermalSkinFlux"></member><member name="F:Decoupler.thermalSkinFluxPrevious"></member><member name="F:Decoupler.topNode"></member><member name="F:Decoupler.vel"></member><member name="F:Decoupler.vessel"></member><member name="F:Decoupler.vesselType"></member><member name="F:Decoupler.waterAngularDragMultiplier"></member><member name="F:Decoupler.WaterContact"></member><member name="P:Decoupler.Actions"></member><member name="P:Decoupler.ClassID"></member><member name="P:Decoupler.ClassName"></member><member name="P:Decoupler.DragCubes"></member><member name="P:Decoupler.Effects"></member><member name="P:Decoupler.enabled"></member><member name="P:Decoupler.Events"></member><member name="P:Decoupler.Fields"></member><member name="P:Decoupler.gameObject"></member><member name="P:Decoupler.hasStagingIcon"></member><member name="P:Decoupler.hideFlags"></member><member name="P:Decoupler.HighlightActive"></member><member name="P:Decoupler.HighlightRendererCount"></member><member name="P:Decoupler.HighlightRenderers"></member><member name="P:Decoupler.isActiveAndEnabled"></member><member name="P:Decoupler.isAttachable"></member><member name="P:Decoupler.isAttached"></member><member name="P:Decoupler.isConnected"></member><member name="P:Decoupler.isControllable"></member><member name="P:Decoupler.Landed"></member><member name="P:Decoupler.localRoot"></member><member name="P:Decoupler.Modules"></member><member name="P:Decoupler.MouseOver"></member><member name="P:Decoupler.name"></member><member name="P:Decoupler.NoAutoEVA"></member><member name="P:Decoupler.orbit"></member><member name="P:Decoupler.PartValues"></member><member name="P:Decoupler.RecurseHighlight"></member><member name="P:Decoupler.Resources"></member><member name="P:Decoupler.Rigidbody"></member><member name="P:Decoupler.ShieldedFromAirstream"></member><member name="P:Decoupler.Splashed"></member><member name="P:Decoupler.State"></member><member name="P:Decoupler.tag"></member><member name="P:Decoupler.transform"></member><member name="P:Decoupler.useGUILayout"></member><member name="P:Decoupler.WCoM"></member><member name="M:Decoupler.activate(System.Int32,Vessel)"></member><member name="M:Decoupler.AddAttachNode(ConfigNode)"></member><member name="M:Decoupler.addChild(Part)"></member><member name="M:Decoupler.AddCrewmember(ProtoCrewMember)"></member><member name="M:Decoupler.AddCrewmemberAt(ProtoCrewMember,System.Int32)"></member><member name="M:Decoupler.AddExposedThermalFlux(System.Double)"></member><member name="M:Decoupler.AddInternalPart(ConfigNode)"></member><member name="M:Decoupler.AddModule(string)"></member><member name="M:Decoupler.AddModule(ConfigNode)"></member><member name="M:Decoupler.AddOnMouseDown(Part+OnActionDelegate)"></member><member name="M:Decoupler.AddOnMouseEnter(Part+OnActionDelegate)"></member><member name="M:Decoupler.AddOnMouseExit(Part+OnActionDelegate)"></member><member name="M:Decoupler.AddResource(ConfigNode)"></member><member name="M:Decoupler.AddShield(IAirstreamShield)"></member><member name="M:Decoupler.AddSkinThermalFlux(System.Double)"></member><member name="M:Decoupler.AddThermalFlux(System.Double)"></member><member name="M:Decoupler.AlreadyProcessedRequest(System.Int32)"></member><member name="M:Decoupler.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:Decoupler.BroadcastMessage(string,object)"></member><member name="M:Decoupler.BroadcastMessage(string)"></member><member name="M:Decoupler.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:Decoupler.CancelInvoke"></member><member name="M:Decoupler.CancelInvoke(string)"></member><member name="M:Decoupler.CheckCollision(UnityEngine.Collision)"></member><member name="M:Decoupler.checkLanded"></member><member name="M:Decoupler.checkPermanentLandedAt"></member><member name="M:Decoupler.checkSplashed"></member><member name="M:Decoupler.CheckTransferDialog"></member><member name="M:Decoupler.cleanReferencesFromOtherParts"></member><member name="M:Decoupler.CompareTag(string)"></member><member name="M:Decoupler.Couple(Part)"></member><member name="M:Decoupler.CreateInternalModel"></member><member name="M:Decoupler.deactivate"></member><member name="M:Decoupler.decouple(System.Single)"></member><member name="M:Decoupler.DespawnIVA"></member><member name="M:Decoupler.Die"></member><member name="M:Decoupler.disconnect(System.Boolean)"></member><member name="M:Decoupler.DrainFuel(System.Single)"></member><member name="M:Decoupler.drawStats"></member><member name="M:Decoupler.Effect(string)"></member><member name="M:Decoupler.Effect(string,System.Single)"></member><member name="M:Decoupler.Equals(object)"></member><member name="M:Decoupler.explode"></member><member name="M:Decoupler.Finalize"></member><member name="M:Decoupler.findAttachNode(string)"></member><member name="M:Decoupler.findAttachNodeByPart(Part)"></member><member name="M:Decoupler.findAttachNodes(string)"></member><member name="M:Decoupler.FindChildPart(string)"></member><member name="M:Decoupler.FindChildPart(string,System.Boolean)"></member><member name="M:Decoupler.FindChildPart"></member><member name="M:Decoupler.FindChildPart(System.Boolean)"></member><member name="M:Decoupler.FindChildParts"></member><member name="M:Decoupler.FindChildParts(System.Boolean)"></member><member name="M:Decoupler.FindFuel(Part,System.Collections.Generic.List,System.UInt32)"></member><member name="M:Decoupler.findFxGroup(string)"></member><member name="M:Decoupler.FindModelAnimator(string,string)"></member><member name="M:Decoupler.FindModelAnimators(string)"></member><member name="M:Decoupler.FindModelAnimators"></member><member name="M:Decoupler.FindModelComponent"></member><member name="M:Decoupler.FindModelComponent(string)"></member><member name="M:Decoupler.FindModelComponents"></member><member name="M:Decoupler.FindModelComponents(string)"></member><member name="M:Decoupler.FindModelTransform(string)"></member><member name="M:Decoupler.FindModelTransforms(string)"></member><member name="M:Decoupler.FindModuleImplementing"></member><member name="M:Decoupler.FindModulesImplementing"></member><member name="M:Decoupler.FindNonPhysicslessChildren(System.Collections.Generic.List)"></member><member name="M:Decoupler.FindNonPhysicslessParent"></member><member name="M:Decoupler.FindPartThroughNodes(Part,Part)"></member><member name="M:Decoupler.FindResource_StackPriority(Part,System.Collections.Generic.List,System.Int32,System.Double,System.Int32,System.Boolean,double&amp;,double&amp;,System.Collections.Generic.List,System.Boolean)"></member><member name="M:Decoupler.force_activate"></member><member name="M:Decoupler.freeze"></member><member name="M:Decoupler.GetComponent(System.Type)"></member><member name="M:Decoupler.GetComponent"></member><member name="M:Decoupler.GetComponent(string)"></member><member name="M:Decoupler.GetComponentInChildren(System.Type)"></member><member name="M:Decoupler.GetComponentInChildren"></member><member name="M:Decoupler.GetComponentInParent(System.Type)"></member><member name="M:Decoupler.GetComponentInParent"></member><member name="M:Decoupler.GetComponents(System.Type)"></member><member name="M:Decoupler.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:Decoupler.GetComponents(List)"></member><member name="M:Decoupler.GetComponents"></member><member name="M:Decoupler.GetComponentsInChildren(System.Type)"></member><member name="M:Decoupler.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:Decoupler.GetComponentsInChildren(System.Boolean)"></member><member name="M:Decoupler.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:Decoupler.GetComponentsInChildren"></member><member name="M:Decoupler.GetComponentsInChildren(List)"></member><member name="M:Decoupler.GetComponentsInParent(System.Type)"></member><member name="M:Decoupler.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:Decoupler.GetComponentsInParent(System.Boolean)"></member><member name="M:Decoupler.GetComponentsInParent(System.Boolean,List)"></member><member name="M:Decoupler.GetComponentsInParent"></member><member name="M:Decoupler.GetConnectedResources(System.Int32,ResourceFlowMode,System.Collections.Generic.List)"></member><member name="M:Decoupler.GetConnectedResources(System.Int32,ResourceFlowMode,System.Collections.Generic.List,double&amp;,double&amp;)"></member><member name="M:Decoupler.GetHashCode"></member><member name="M:Decoupler.GetInstanceID"></member><member name="M:Decoupler.GetModuleCosts(System.Single)"></member><member name="M:Decoupler.GetModuleMass(System.Single)"></member><member name="M:Decoupler.GetModuleSize(UnityEngine.Vector3)"></member><member name="M:Decoupler.GetPhysicslessChildMass"></member><member name="M:Decoupler.GetReferenceTransform"></member><member name="M:Decoupler.GetResourceMass"></member><member name="M:Decoupler.GetResourceMass(float&amp;)"></member><member name="M:Decoupler.GetResourceMass(double&amp;)"></member><member name="M:Decoupler.getSymmetryCounterPart(System.Int32)"></member><member name="M:Decoupler.GetType"></member><member name="M:Decoupler.HandleCollision(UnityEngine.Collision)"></member><member name="M:Decoupler.hasIndirectChild(Part)"></member><member name="M:Decoupler.hasIndirectParent(Part)"></member><member name="M:Decoupler.highlight(UnityEngine.Color)"></member><member name="M:Decoupler.highlightRecursive(UnityEngine.Color)"></member><member name="M:Decoupler.InitializeEffects"></member><member name="M:Decoupler.InitializeModules"></member><member name="M:Decoupler.Invoke(string,System.Single)"></member><member name="M:Decoupler.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:Decoupler.IsInvoking(string)"></member><member name="M:Decoupler.IsInvoking"></member><member name="M:Decoupler.isSymmetryCounterPart(Part)"></member><member name="M:Decoupler.LateUpdate"></member><member name="M:Decoupler.LoadEffects(ConfigNode)"></member><member name="M:Decoupler.LoadModule(ConfigNode,int&amp;)"></member><member name="M:Decoupler.MemberwiseClone"></member><member name="M:Decoupler.onActiveFixedUpdate"></member><member name="M:Decoupler.onActiveUpdate"></member><member name="M:Decoupler.onAttach(Part,System.Boolean)"></member><member name="M:Decoupler.onBackup"></member><member name="M:Decoupler.OnCollisionEnter(UnityEngine.Collision)"></member><member name="M:Decoupler.OnCollisionExit(UnityEngine.Collision)"></member><member name="M:Decoupler.OnCollisionStay(UnityEngine.Collision)"></member><member name="M:Decoupler.OnCopy(Part,System.Boolean)"></member><member name="M:Decoupler.onCopy(Part,System.Boolean)"></member><member name="M:Decoupler.onCtrlUpd(FlightCtrlState)"></member><member name="M:Decoupler.onDecouple(System.Single)"></member><member name="M:Decoupler.OnDelete"></member><member name="M:Decoupler.onDetach(System.Boolean)"></member><member name="M:Decoupler.onDisconnect"></member><member name="M:Decoupler.OnDrawStats"></member><member name="M:Decoupler.onEditorUpdate"></member><member name="M:Decoupler.onFlightStart"></member><member name="M:Decoupler.onFlightStartAtLaunchPad"></member><member name="M:Decoupler.onFlightStateLoad(System.Collections.Generic.Dictionary)"></member><member name="M:Decoupler.onFlightStateSave(System.Collections.Generic.Dictionary)"></member><member name="M:Decoupler.onGamePause"></member><member name="M:Decoupler.onGameResume"></member><member name="M:Decoupler.OnGetStats"></member><member name="M:Decoupler.onJointDisable"></member><member name="M:Decoupler.onJointReset"></member><member name="M:Decoupler.OnLiftOff"></member><member name="M:Decoupler.OnLoad"></member><member name="M:Decoupler.OnLoad(ConfigNode)"></member><member name="M:Decoupler.onPack"></member><member name="M:Decoupler.onPartActivate"></member><member name="M:Decoupler.onPartAttach(Part)"></member><member name="M:Decoupler.onPartAwake"></member><member name="M:Decoupler.onPartDeactivate"></member><member name="M:Decoupler.onPartDelete"></member><member name="M:Decoupler.onPartDestroy"></member><member name="M:Decoupler.onPartDetach"></member><member name="M:Decoupler.onPartExplode"></member><member name="M:Decoupler.onPartFixedUpdate"></member><member name="M:Decoupler.OnPartJointBreak(System.Single)"></member><member name="M:Decoupler.onPartLiftOff"></member><member name="M:Decoupler.onPartLoad"></member><member name="M:Decoupler.onPartSplashdown"></member><member name="M:Decoupler.onPartStart"></member><member name="M:Decoupler.onPartTouchdown"></member><member name="M:Decoupler.onPartUpdate"></member><member name="M:Decoupler.OnPointerClick(UnityEngine.EventSystems.PointerEventData)"></member><member name="M:Decoupler.OnSave(ConfigNode)"></member><member name="M:Decoupler.OnSplashDown"></member><member name="M:Decoupler.onStartComplete"></member><member name="M:Decoupler.OnTouchDown"></member><member name="M:Decoupler.onUnpack"></member><member name="M:Decoupler.Pack"></member><member name="M:Decoupler.PromoteToPhysicalPart"></member><member name="M:Decoupler.propagateControlUpdate(FlightCtrlState)"></member><member name="M:Decoupler.RegisterCrew"></member><member name="M:Decoupler.removeChild(Part)"></member><member name="M:Decoupler.RemoveCrewmember(ProtoCrewMember)"></member><member name="M:Decoupler.RemoveModule(PartModule)"></member><member name="M:Decoupler.RemoveModules"></member><member name="M:Decoupler.RemoveOnMouseDown(Part+OnActionDelegate)"></member><member name="M:Decoupler.RemoveOnMouseEnter(Part+OnActionDelegate)"></member><member name="M:Decoupler.RemoveOnMouseExit(Part+OnActionDelegate)"></member><member name="M:Decoupler.RemoveShield(IAirstreamShield)"></member><member name="M:Decoupler.RequestFuel(Part,System.Single,System.UInt32)"></member><member name="M:Decoupler.RequestRCS(System.Single,System.Int32)"></member><member name="M:Decoupler.RequestResource(System.Int32,System.Single)"></member><member name="M:Decoupler.RequestResource(string,System.Single)"></member><member name="M:Decoupler.RequestResource(System.Int32,System.Double)"></member><member name="M:Decoupler.RequestResource(string,System.Double)"></member><member name="M:Decoupler.RequestResource(System.Int32,System.Double,ResourceFlowMode)"></member><member name="M:Decoupler.RequestResource(string,System.Double,ResourceFlowMode)"></member><member name="M:Decoupler.ResetCollisionIgnores"></member><member name="M:Decoupler.ResetJoints"></member><member name="M:Decoupler.ResumeVelocity"></member><member name="M:Decoupler.SaveEffects(ConfigNode)"></member><member name="M:Decoupler.ScheduleSetCollisionIgnores"></member><member name="M:Decoupler.SendEvent(string)"></member><member name="M:Decoupler.SendEvent(string,BaseEventData)"></member><member name="M:Decoupler.SendEvent(string,BaseEventData,System.Int32)"></member><member name="M:Decoupler.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:Decoupler.SendMessage(string,object)"></member><member name="M:Decoupler.SendMessage(string)"></member><member name="M:Decoupler.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:Decoupler.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:Decoupler.SendMessageUpwards(string,object)"></member><member name="M:Decoupler.SendMessageUpwards(string)"></member><member name="M:Decoupler.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:Decoupler.SetCollisionIgnores"></member><member name="M:Decoupler.SetDetectCollisions(System.Boolean)"></member><member name="M:Decoupler.SetHierarchyRoot(Part)"></member><member name="M:Decoupler.SetHighlight(System.Boolean,System.Boolean)"></member><member name="M:Decoupler.SetHighlightColor(UnityEngine.Color)"></member><member name="M:Decoupler.SetHighlightColor"></member><member name="M:Decoupler.SetHighlightDefault"></member><member name="M:Decoupler.SetHighlightType(Part+HighlightType)"></member><member name="M:Decoupler.SetLayer(UnityEngine.GameObject,System.Int32)"></member><member name="M:Decoupler.SetMirror(UnityEngine.Vector3)"></member><member name="M:Decoupler.setOpacity(System.Single)"></member><member name="M:Decoupler.setParent(Part)"></member><member name="M:Decoupler.SetReferenceTransform(UnityEngine.Transform)"></member><member name="M:Decoupler.SetResource(ConfigNode)"></member><member name="M:Decoupler.SpawnIVA"></member><member name="M:Decoupler.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:Decoupler.StartCoroutine(string,object)"></member><member name="M:Decoupler.StartCoroutine(string)"></member><member name="M:Decoupler.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:Decoupler.StopAllCoroutines"></member><member name="M:Decoupler.StopCoroutine(string)"></member><member name="M:Decoupler.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:Decoupler.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:Decoupler.ToString"></member><member name="M:Decoupler.TransferResource(System.Int32,System.Double)"></member><member name="M:Decoupler.TransferResource(PartResource,System.Double,Part)"></member><member name="M:Decoupler.Undock(DockedVesselInfo)"></member><member name="M:Decoupler.unfreeze"></member><member name="M:Decoupler.Unpack"></member><member name="M:Decoupler.UnregisterCrew"></member><member name="M:Decoupler.UpdateOrgPosAndRot(Part)"></member><member name="M:Decoupler.UpdateStageability(System.Boolean,System.Boolean)"></member><member name="M:Decoupler.#ctor"></member><member name="T:DecouplerGUI"><summary>An old, deprecated class that used to be used to implement decouplers before PartModules. Use ModuleDecouple or ModuleAnchoredDecoupler instead.</summary></member><member name="F:DecouplerGUI.absorptiveConstant"></member><member name="F:DecouplerGUI.ActivatesEvenIfDisconnected"></member><member name="F:DecouplerGUI.aerodynamicArea"></member><member name="F:DecouplerGUI.airlock"></member><member name="F:DecouplerGUI.airstreamShields"></member><member name="F:DecouplerGUI.analyticInternalInsulationFactor"></member><member name="F:DecouplerGUI.analyticSkinInsulationFactor"></member><member name="F:DecouplerGUI.angularDrag"></member><member name="F:DecouplerGUI.angularDragByFI"></member><member name="F:DecouplerGUI.atmDensity"></member><member name="F:DecouplerGUI.attached"></member><member name="F:DecouplerGUI.attachJoint"></member><member name="F:DecouplerGUI.attachMethod"></member><member name="F:DecouplerGUI.attachMode"></member><member name="F:DecouplerGUI.attachNodes"></member><member name="F:DecouplerGUI.attachRules"></member><member name="F:DecouplerGUI.attPos"></member><member name="F:DecouplerGUI.attPos0"></member><member name="F:DecouplerGUI.attRotation"></member><member name="F:DecouplerGUI.attRotation0"></member><member name="F:DecouplerGUI.blackBodyRadiationAlphaMult"></member><member name="F:DecouplerGUI.bodyLiftLocalPosition"></member><member name="F:DecouplerGUI.bodyLiftLocalVector"></member><member name="F:DecouplerGUI.bodyLiftMultiplier"></member><member name="F:DecouplerGUI.bodyLiftScalar"></member><member name="F:DecouplerGUI.boundsMultiplier"></member><member name="F:DecouplerGUI.breakingForce"></member><member name="F:DecouplerGUI.breakingTorque"></member><member name="F:DecouplerGUI.buoyancy"></member><member name="F:DecouplerGUI.buoyancyUseCubeNamed"></member><member name="F:DecouplerGUI.buoyancyUseSine"></member><member name="F:DecouplerGUI.CenterOfBuoyancy"></member><member name="F:DecouplerGUI.CenterOfDisplacement"></member><member name="F:DecouplerGUI.children"></member><member name="F:DecouplerGUI.childStageOffset"></member><member name="F:DecouplerGUI.collider"></member><member name="F:DecouplerGUI.collisionEnhancer"></member><member name="F:DecouplerGUI.CoLOffset"></member><member name="F:DecouplerGUI.CoMOffset"></member><member name="F:DecouplerGUI.connected"></member><member name="F:DecouplerGUI.CoPOffset"></member><member name="F:DecouplerGUI.craftID"></member><member name="F:DecouplerGUI.crashTolerance"></member><member name="F:DecouplerGUI.CrewCapacity"></member><member name="F:DecouplerGUI.crewRespawnTime"></member><member name="F:DecouplerGUI.crewTransferAvailable"></member><member name="F:DecouplerGUI.currentCollisions"></member><member name="F:DecouplerGUI.customPartData"></member><member name="F:DecouplerGUI.defaultInverseStage"></member><member name="F:DecouplerGUI.depth"></member><member name="F:DecouplerGUI.dragModel"></member><member name="F:DecouplerGUI.dragReferenceVector"></member><member name="F:DecouplerGUI.dragScalar"></member><member name="F:DecouplerGUI.dragVector"></member><member name="F:DecouplerGUI.dragVectorDir"></member><member name="F:DecouplerGUI.dragVectorDirLocal"></member><member name="F:DecouplerGUI.dragVectorMag"></member><member name="F:DecouplerGUI.dragVectorSqrMag"></member><member name="F:DecouplerGUI.dynamicPressurekPa"></member><member name="F:DecouplerGUI.edgeHighlightThresholdMult"></member><member name="F:DecouplerGUI.editorCollision"></member><member name="F:DecouplerGUI.editorLinks"></member><member name="F:DecouplerGUI.editorStarted"></member><member name="F:DecouplerGUI.ejectionForce"></member><member name="F:DecouplerGUI.emissiveConstant"></member><member name="F:DecouplerGUI.explosionPotential"></member><member name="F:DecouplerGUI.exposedArea"></member><member name="F:DecouplerGUI.flagURL"></member><member name="F:DecouplerGUI.flightID"></member><member name="F:DecouplerGUI.frozen"></member><member name="F:DecouplerGUI.fuelCrossFeed"></member><member name="F:DecouplerGUI.fuelLookupTargets"></member><member name="F:DecouplerGUI.fxGroups"></member><member name="F:DecouplerGUI.gaugeThresholdMult"></member><member name="F:DecouplerGUI.GroundContact"></member><member name="F:DecouplerGUI.gTolerance"></member><member name="F:DecouplerGUI.habitableVolume"></member><member name="F:DecouplerGUI.hasHeiarchyModel"></member><member name="F:DecouplerGUI.hasLiftModule"></member><member name="F:DecouplerGUI.hatchObstructionCheckInwardDistance"></member><member name="F:DecouplerGUI.hatchObstructionCheckInwardOffset"></member><member name="F:DecouplerGUI.hatchObstructionCheckOutwardDistance"></member><member name="F:DecouplerGUI.hatchObstructionCheckSphereRadius"></member><member name="F:DecouplerGUI.heatConductivity"></member><member name="F:DecouplerGUI.heatConvectiveConstant"></member><member name="F:DecouplerGUI.highlightColor"></member><member name="F:DecouplerGUI.highlighter"></member><member name="F:DecouplerGUI.highlightType"></member><member name="F:DecouplerGUI.initialVesselName"></member><member name="F:DecouplerGUI.inStageIndex"></member><member name="F:DecouplerGUI.internalModel"></member><member name="F:DecouplerGUI.InternalModelName"></member><member name="F:DecouplerGUI.inverseStage"></member><member name="F:DecouplerGUI.isClone"></member><member name="F:DecouplerGUI.isControlSource"></member><member name="F:DecouplerGUI.isMirrored"></member><member name="F:DecouplerGUI.isPersistent"></member><member name="F:DecouplerGUI.lastFuelRequestId"></member><member name="F:DecouplerGUI.launchID"></member><member name="F:DecouplerGUI.machNumber"></member><member name="F:DecouplerGUI.manualStageOffset"></member><member name="F:DecouplerGUI.mass"></member><member name="F:DecouplerGUI.maxDepth"></member><member name="F:DecouplerGUI.maximum_drag"></member><member name="F:DecouplerGUI.maxTemp"></member><member name="F:DecouplerGUI.minDepth"></member><member name="F:DecouplerGUI.minimum_drag"></member><member name="F:DecouplerGUI.mirrorAxis"></member><member name="F:DecouplerGUI.mirrorRefAxis"></member><member name="F:DecouplerGUI.mirrorVector"></member><member name="F:DecouplerGUI.missionID"></member><member name="F:DecouplerGUI.moduleSize"></member><member name="F:DecouplerGUI.needPrefabMass"></member><member name="F:DecouplerGUI.noAutoEVAAny"></member><member name="F:DecouplerGUI.noAutoEVAMulti"></member><member name="F:DecouplerGUI.NoCrossFeedNodeKey"></member><member name="F:DecouplerGUI.OnEditorAttach"></member><member name="F:DecouplerGUI.OnEditorDestroy"></member><member name="F:DecouplerGUI.OnEditorDetach"></member><member name="F:DecouplerGUI.OnJustAboutToBeDestroyed"></member><member name="F:DecouplerGUI.orgPos"></member><member name="F:DecouplerGUI.orgRot"></member><member name="F:DecouplerGUI.originalStage"></member><member name="F:DecouplerGUI.overrideSkillUpdate"></member><member name="F:DecouplerGUI.overrideSkillUpdateModules"></member><member name="F:DecouplerGUI.packed"></member><member name="F:DecouplerGUI.parent"></member><member name="F:DecouplerGUI.partBuoyancy"></member><member name="F:DecouplerGUI.partInfo"></member><member name="F:DecouplerGUI.partName"></member><member name="F:DecouplerGUI.partTransform"></member><member name="F:DecouplerGUI.PermanentGroundContact"></member><member name="F:DecouplerGUI.physicalSignificance"></member><member name="F:DecouplerGUI.PhysicsSignificance"></member><member name="F:DecouplerGUI.potentialParent"></member><member name="F:DecouplerGUI.prefabMass"></member><member name="F:DecouplerGUI.prefabSize"></member><member name="F:DecouplerGUI.protoModuleCrew"></member><member name="F:DecouplerGUI.protoPartSnapshot"></member><member name="F:DecouplerGUI.ptd"></member><member name="F:DecouplerGUI.radiativeArea"></member><member name="F:DecouplerGUI.radiatorCritical"></member><member name="F:DecouplerGUI.radiatorHeadroom"></member><member name="F:DecouplerGUI.radiatorMax"></member><member name="F:DecouplerGUI.rb"></member><member name="F:DecouplerGUI.rescaleFactor"></member><member name="F:DecouplerGUI.resourceMass"></member><member name="F:DecouplerGUI.resourceRequestRemainingThreshold"></member><member name="F:DecouplerGUI.resourceTargets"></member><member name="F:DecouplerGUI.resourceThermalMass"></member><member name="F:DecouplerGUI.ResumeState"></member><member name="F:DecouplerGUI.scaleFactor"></member><member name="F:DecouplerGUI.separationIndex"></member><member name="F:DecouplerGUI.skinExposedArea"></member><member name="F:DecouplerGUI.skinExposedAreaFrac"></member><member name="F:DecouplerGUI.skinExposedMassMult"></member><member name="F:DecouplerGUI.skinInternalConductionMult"></member><member name="F:DecouplerGUI.skinMassPerArea"></member><member name="F:DecouplerGUI.skinMaxTemp"></member><member name="F:DecouplerGUI.skinSkinConductionMult"></member><member name="F:DecouplerGUI.skinTemperature"></member><member name="F:DecouplerGUI.skinThermalMass"></member><member name="F:DecouplerGUI.skinThermalMassModifier"></member><member name="F:DecouplerGUI.skinThermalMassRecip"></member><member name="F:DecouplerGUI.skinToInternalFlux"></member><member name="F:DecouplerGUI.skinUnexposedExternalTemp"></member><member name="F:DecouplerGUI.skinUnexposedMassMult"></member><member name="F:DecouplerGUI.skinUnexposedTemperature"></member><member name="F:DecouplerGUI.skipColliderIgnores"></member><member name="F:DecouplerGUI.srfAttachNode"></member><member name="F:DecouplerGUI.stackIcon"></member><member name="F:DecouplerGUI.stackIconGrouping"></member><member name="F:DecouplerGUI.stackPriThreshold"></member><member name="F:DecouplerGUI.stackSymmetry"></member><member name="F:DecouplerGUI.stageAfter"></member><member name="F:DecouplerGUI.stageBefore"></member><member name="F:DecouplerGUI.stageOffset"></member><member name="F:DecouplerGUI.stagingIcon"></member><member name="F:DecouplerGUI.stagingIconAlwaysShown"></member><member name="F:DecouplerGUI.stagingOn"></member><member name="F:DecouplerGUI.started"></member><member name="F:DecouplerGUI.state"></member><member name="F:DecouplerGUI.staticPressureAtm"></member><member name="F:DecouplerGUI.submergedDragScalar"></member><member name="F:DecouplerGUI.submergedDynamicPressurekPa"></member><member name="F:DecouplerGUI.submergedLiftScalar"></member><member name="F:DecouplerGUI.submergedPortion"></member><member name="F:DecouplerGUI.surfaceAreas"></member><member name="F:DecouplerGUI.symMethod"></member><member name="F:DecouplerGUI.symmetryCounterparts"></member><member name="F:DecouplerGUI.temperature"></member><member name="F:DecouplerGUI.terrainCollider"></member><member name="F:DecouplerGUI.thermalConductionFlux"></member><member name="F:DecouplerGUI.thermalConvectionFlux"></member><member name="F:DecouplerGUI.thermalExposedFlux"></member><member name="F:DecouplerGUI.thermalExposedFluxPrevious"></member><member name="F:DecouplerGUI.thermalInternalFlux"></member><member name="F:DecouplerGUI.thermalInternalFluxPrevious"></member><member name="F:DecouplerGUI.thermalMass"></member><member name="F:DecouplerGUI.thermalMassModifier"></member><member name="F:DecouplerGUI.thermalMassReciprocal"></member><member name="F:DecouplerGUI.thermalRadiationFlux"></member><member name="F:DecouplerGUI.thermalSkinFlux"></member><member name="F:DecouplerGUI.thermalSkinFluxPrevious"></member><member name="F:DecouplerGUI.topNode"></member><member name="F:DecouplerGUI.vel"></member><member name="F:DecouplerGUI.vessel"></member><member name="F:DecouplerGUI.vesselType"></member><member name="F:DecouplerGUI.waterAngularDragMultiplier"></member><member name="F:DecouplerGUI.WaterContact"></member><member name="P:DecouplerGUI.Actions"></member><member name="P:DecouplerGUI.ClassID"></member><member name="P:DecouplerGUI.ClassName"></member><member name="P:DecouplerGUI.DragCubes"></member><member name="P:DecouplerGUI.Effects"></member><member name="P:DecouplerGUI.enabled"></member><member name="P:DecouplerGUI.Events"></member><member name="P:DecouplerGUI.Fields"></member><member name="P:DecouplerGUI.gameObject"></member><member name="P:DecouplerGUI.hasStagingIcon"></member><member name="P:DecouplerGUI.hideFlags"></member><member name="P:DecouplerGUI.HighlightActive"></member><member name="P:DecouplerGUI.HighlightRendererCount"></member><member name="P:DecouplerGUI.HighlightRenderers"></member><member name="P:DecouplerGUI.isActiveAndEnabled"></member><member name="P:DecouplerGUI.isAttachable"></member><member name="P:DecouplerGUI.isAttached"></member><member name="P:DecouplerGUI.isConnected"></member><member name="P:DecouplerGUI.isControllable"></member><member name="P:DecouplerGUI.Landed"></member><member name="P:DecouplerGUI.localRoot"></member><member name="P:DecouplerGUI.Modules"></member><member name="P:DecouplerGUI.MouseOver"></member><member name="P:DecouplerGUI.name"></member><member name="P:DecouplerGUI.NoAutoEVA"></member><member name="P:DecouplerGUI.orbit"></member><member name="P:DecouplerGUI.PartValues"></member><member name="P:DecouplerGUI.RecurseHighlight"></member><member name="P:DecouplerGUI.Resources"></member><member name="P:DecouplerGUI.Rigidbody"></member><member name="P:DecouplerGUI.ShieldedFromAirstream"></member><member name="P:DecouplerGUI.Splashed"></member><member name="P:DecouplerGUI.State"></member><member name="P:DecouplerGUI.tag"></member><member name="P:DecouplerGUI.transform"></member><member name="P:DecouplerGUI.useGUILayout"></member><member name="P:DecouplerGUI.WCoM"></member><member name="M:DecouplerGUI.activate(System.Int32,Vessel)"></member><member name="M:DecouplerGUI.AddAttachNode(ConfigNode)"></member><member name="M:DecouplerGUI.addChild(Part)"></member><member name="M:DecouplerGUI.AddCrewmember(ProtoCrewMember)"></member><member name="M:DecouplerGUI.AddCrewmemberAt(ProtoCrewMember,System.Int32)"></member><member name="M:DecouplerGUI.AddExposedThermalFlux(System.Double)"></member><member name="M:DecouplerGUI.AddInternalPart(ConfigNode)"></member><member name="M:DecouplerGUI.AddModule(string)"></member><member name="M:DecouplerGUI.AddModule(ConfigNode)"></member><member name="M:DecouplerGUI.AddOnMouseDown(Part+OnActionDelegate)"></member><member name="M:DecouplerGUI.AddOnMouseEnter(Part+OnActionDelegate)"></member><member name="M:DecouplerGUI.AddOnMouseExit(Part+OnActionDelegate)"></member><member name="M:DecouplerGUI.AddResource(ConfigNode)"></member><member name="M:DecouplerGUI.AddShield(IAirstreamShield)"></member><member name="M:DecouplerGUI.AddSkinThermalFlux(System.Double)"></member><member name="M:DecouplerGUI.AddThermalFlux(System.Double)"></member><member name="M:DecouplerGUI.AlreadyProcessedRequest(System.Int32)"></member><member name="M:DecouplerGUI.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:DecouplerGUI.BroadcastMessage(string,object)"></member><member name="M:DecouplerGUI.BroadcastMessage(string)"></member><member name="M:DecouplerGUI.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:DecouplerGUI.CancelInvoke"></member><member name="M:DecouplerGUI.CancelInvoke(string)"></member><member name="M:DecouplerGUI.CheckCollision(UnityEngine.Collision)"></member><member name="M:DecouplerGUI.checkLanded"></member><member name="M:DecouplerGUI.checkPermanentLandedAt"></member><member name="M:DecouplerGUI.checkSplashed"></member><member name="M:DecouplerGUI.CheckTransferDialog"></member><member name="M:DecouplerGUI.cleanReferencesFromOtherParts"></member><member name="M:DecouplerGUI.CompareTag(string)"></member><member name="M:DecouplerGUI.Couple(Part)"></member><member name="M:DecouplerGUI.CreateInternalModel"></member><member name="M:DecouplerGUI.deactivate"></member><member name="M:DecouplerGUI.decouple(System.Single)"></member><member name="M:DecouplerGUI.DecoupleAction(KSPActionParam)"></member><member name="M:DecouplerGUI.DespawnIVA"></member><member name="M:DecouplerGUI.Die"></member><member name="M:DecouplerGUI.disconnect(System.Boolean)"></member><member name="M:DecouplerGUI.DrainFuel(System.Single)"></member><member name="M:DecouplerGUI.drawStats"></member><member name="M:DecouplerGUI.Effect(string)"></member><member name="M:DecouplerGUI.Effect(string,System.Single)"></member><member name="M:DecouplerGUI.Equals(object)"></member><member name="M:DecouplerGUI.explode"></member><member name="M:DecouplerGUI.Finalize"></member><member name="M:DecouplerGUI.findAttachNode(string)"></member><member name="M:DecouplerGUI.findAttachNodeByPart(Part)"></member><member name="M:DecouplerGUI.findAttachNodes(string)"></member><member name="M:DecouplerGUI.FindChildPart(string)"></member><member name="M:DecouplerGUI.FindChildPart(string,System.Boolean)"></member><member name="M:DecouplerGUI.FindChildPart"></member><member name="M:DecouplerGUI.FindChildPart(System.Boolean)"></member><member name="M:DecouplerGUI.FindChildParts"></member><member name="M:DecouplerGUI.FindChildParts(System.Boolean)"></member><member name="M:DecouplerGUI.FindFuel(Part,System.Collections.Generic.List,System.UInt32)"></member><member name="M:DecouplerGUI.findFxGroup(string)"></member><member name="M:DecouplerGUI.FindModelAnimator(string,string)"></member><member name="M:DecouplerGUI.FindModelAnimators(string)"></member><member name="M:DecouplerGUI.FindModelAnimators"></member><member name="M:DecouplerGUI.FindModelComponent"></member><member name="M:DecouplerGUI.FindModelComponent(string)"></member><member name="M:DecouplerGUI.FindModelComponents"></member><member name="M:DecouplerGUI.FindModelComponents(string)"></member><member name="M:DecouplerGUI.FindModelTransform(string)"></member><member name="M:DecouplerGUI.FindModelTransforms(string)"></member><member name="M:DecouplerGUI.FindModuleImplementing"></member><member name="M:DecouplerGUI.FindModulesImplementing"></member><member name="M:DecouplerGUI.FindNonPhysicslessChildren(System.Collections.Generic.List)"></member><member name="M:DecouplerGUI.FindNonPhysicslessParent"></member><member name="M:DecouplerGUI.FindPartThroughNodes(Part,Part)"></member><member name="M:DecouplerGUI.FindResource_StackPriority(Part,System.Collections.Generic.List,System.Int32,System.Double,System.Int32,System.Boolean,double&amp;,double&amp;,System.Collections.Generic.List,System.Boolean)"></member><member name="M:DecouplerGUI.force_activate"></member><member name="M:DecouplerGUI.freeze"></member><member name="M:DecouplerGUI.GetComponent(System.Type)"></member><member name="M:DecouplerGUI.GetComponent"></member><member name="M:DecouplerGUI.GetComponent(string)"></member><member name="M:DecouplerGUI.GetComponentInChildren(System.Type)"></member><member name="M:DecouplerGUI.GetComponentInChildren"></member><member name="M:DecouplerGUI.GetComponentInParent(System.Type)"></member><member name="M:DecouplerGUI.GetComponentInParent"></member><member name="M:DecouplerGUI.GetComponents(System.Type)"></member><member name="M:DecouplerGUI.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:DecouplerGUI.GetComponents(List)"></member><member name="M:DecouplerGUI.GetComponents"></member><member name="M:DecouplerGUI.GetComponentsInChildren(System.Type)"></member><member name="M:DecouplerGUI.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:DecouplerGUI.GetComponentsInChildren(System.Boolean)"></member><member name="M:DecouplerGUI.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:DecouplerGUI.GetComponentsInChildren"></member><member name="M:DecouplerGUI.GetComponentsInChildren(List)"></member><member name="M:DecouplerGUI.GetComponentsInParent(System.Type)"></member><member name="M:DecouplerGUI.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:DecouplerGUI.GetComponentsInParent(System.Boolean)"></member><member name="M:DecouplerGUI.GetComponentsInParent(System.Boolean,List)"></member><member name="M:DecouplerGUI.GetComponentsInParent"></member><member name="M:DecouplerGUI.GetConnectedResources(System.Int32,ResourceFlowMode,System.Collections.Generic.List)"></member><member name="M:DecouplerGUI.GetConnectedResources(System.Int32,ResourceFlowMode,System.Collections.Generic.List,double&amp;,double&amp;)"></member><member name="M:DecouplerGUI.GetHashCode"></member><member name="M:DecouplerGUI.GetInstanceID"></member><member name="M:DecouplerGUI.GetModuleCosts(System.Single)"></member><member name="M:DecouplerGUI.GetModuleMass(System.Single)"></member><member name="M:DecouplerGUI.GetModuleSize(UnityEngine.Vector3)"></member><member name="M:DecouplerGUI.GetPhysicslessChildMass"></member><member name="M:DecouplerGUI.GetReferenceTransform"></member><member name="M:DecouplerGUI.GetResourceMass"></member><member name="M:DecouplerGUI.GetResourceMass(float&amp;)"></member><member name="M:DecouplerGUI.GetResourceMass(double&amp;)"></member><member name="M:DecouplerGUI.getSymmetryCounterPart(System.Int32)"></member><member name="M:DecouplerGUI.GetType"></member><member name="M:DecouplerGUI.GUIDecouple"></member><member name="M:DecouplerGUI.HandleCollision(UnityEngine.Collision)"></member><member name="M:DecouplerGUI.hasIndirectChild(Part)"></member><member name="M:DecouplerGUI.hasIndirectParent(Part)"></member><member name="M:DecouplerGUI.highlight(UnityEngine.Color)"></member><member name="M:DecouplerGUI.highlightRecursive(UnityEngine.Color)"></member><member name="M:DecouplerGUI.InitializeEffects"></member><member name="M:DecouplerGUI.InitializeModules"></member><member name="M:DecouplerGUI.Invoke(string,System.Single)"></member><member name="M:DecouplerGUI.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:DecouplerGUI.IsInvoking(string)"></member><member name="M:DecouplerGUI.IsInvoking"></member><member name="M:DecouplerGUI.isSymmetryCounterPart(Part)"></member><member name="M:DecouplerGUI.LateUpdate"></member><member name="M:DecouplerGUI.LoadEffects(ConfigNode)"></member><member name="M:DecouplerGUI.LoadModule(ConfigNode,int&amp;)"></member><member name="M:DecouplerGUI.MemberwiseClone"></member><member name="M:DecouplerGUI.onActiveFixedUpdate"></member><member name="M:DecouplerGUI.onActiveUpdate"></member><member name="M:DecouplerGUI.onAttach(Part,System.Boolean)"></member><member name="M:DecouplerGUI.onBackup"></member><member name="M:DecouplerGUI.OnCollisionEnter(UnityEngine.Collision)"></member><member name="M:DecouplerGUI.OnCollisionExit(UnityEngine.Collision)"></member><member name="M:DecouplerGUI.OnCollisionStay(UnityEngine.Collision)"></member><member name="M:DecouplerGUI.OnCopy(Part,System.Boolean)"></member><member name="M:DecouplerGUI.onCopy(Part,System.Boolean)"></member><member name="M:DecouplerGUI.onCtrlUpd(FlightCtrlState)"></member><member name="M:DecouplerGUI.onDecouple(System.Single)"></member><member name="M:DecouplerGUI.OnDelete"></member><member name="M:DecouplerGUI.onDetach(System.Boolean)"></member><member name="M:DecouplerGUI.onDisconnect"></member><member name="M:DecouplerGUI.OnDrawStats"></member><member name="M:DecouplerGUI.onEditorUpdate"></member><member name="M:DecouplerGUI.onFlightStart"></member><member name="M:DecouplerGUI.onFlightStartAtLaunchPad"></member><member name="M:DecouplerGUI.onFlightStateLoad(System.Collections.Generic.Dictionary)"></member><member name="M:DecouplerGUI.onFlightStateSave(System.Collections.Generic.Dictionary)"></member><member name="M:DecouplerGUI.onGamePause"></member><member name="M:DecouplerGUI.onGameResume"></member><member name="M:DecouplerGUI.OnGetStats"></member><member name="M:DecouplerGUI.onJointDisable"></member><member name="M:DecouplerGUI.onJointReset"></member><member name="M:DecouplerGUI.OnLiftOff"></member><member name="M:DecouplerGUI.OnLoad"></member><member name="M:DecouplerGUI.OnLoad(ConfigNode)"></member><member name="M:DecouplerGUI.onPack"></member><member name="M:DecouplerGUI.onPartActivate"></member><member name="M:DecouplerGUI.onPartAttach(Part)"></member><member name="M:DecouplerGUI.onPartAwake"></member><member name="M:DecouplerGUI.onPartDeactivate"></member><member name="M:DecouplerGUI.onPartDelete"></member><member name="M:DecouplerGUI.onPartDestroy"></member><member name="M:DecouplerGUI.onPartDetach"></member><member name="M:DecouplerGUI.onPartExplode"></member><member name="M:DecouplerGUI.onPartFixedUpdate"></member><member name="M:DecouplerGUI.OnPartJointBreak(System.Single)"></member><member name="M:DecouplerGUI.onPartLiftOff"></member><member name="M:DecouplerGUI.onPartLoad"></member><member name="M:DecouplerGUI.onPartSplashdown"></member><member name="M:DecouplerGUI.onPartStart"></member><member name="M:DecouplerGUI.onPartTouchdown"></member><member name="M:DecouplerGUI.onPartUpdate"></member><member name="M:DecouplerGUI.OnPointerClick(UnityEngine.EventSystems.PointerEventData)"></member><member name="M:DecouplerGUI.OnSave(ConfigNode)"></member><member name="M:DecouplerGUI.OnSplashDown"></member><member name="M:DecouplerGUI.onStartComplete"></member><member name="M:DecouplerGUI.OnTouchDown"></member><member name="M:DecouplerGUI.onUnpack"></member><member name="M:DecouplerGUI.Pack"></member><member name="M:DecouplerGUI.PromoteToPhysicalPart"></member><member name="M:DecouplerGUI.propagateControlUpdate(FlightCtrlState)"></member><member name="M:DecouplerGUI.RegisterCrew"></member><member name="M:DecouplerGUI.removeChild(Part)"></member><member name="M:DecouplerGUI.RemoveCrewmember(ProtoCrewMember)"></member><member name="M:DecouplerGUI.RemoveModule(PartModule)"></member><member name="M:DecouplerGUI.RemoveModules"></member><member name="M:DecouplerGUI.RemoveOnMouseDown(Part+OnActionDelegate)"></member><member name="M:DecouplerGUI.RemoveOnMouseEnter(Part+OnActionDelegate)"></member><member name="M:DecouplerGUI.RemoveOnMouseExit(Part+OnActionDelegate)"></member><member name="M:DecouplerGUI.RemoveShield(IAirstreamShield)"></member><member name="M:DecouplerGUI.RequestFuel(Part,System.Single,System.UInt32)"></member><member name="M:DecouplerGUI.RequestRCS(System.Single,System.Int32)"></member><member name="M:DecouplerGUI.RequestResource(System.Int32,System.Single)"></member><member name="M:DecouplerGUI.RequestResource(string,System.Single)"></member><member name="M:DecouplerGUI.RequestResource(System.Int32,System.Double)"></member><member name="M:DecouplerGUI.RequestResource(string,System.Double)"></member><member name="M:DecouplerGUI.RequestResource(System.Int32,System.Double,ResourceFlowMode)"></member><member name="M:DecouplerGUI.RequestResource(string,System.Double,ResourceFlowMode)"></member><member name="M:DecouplerGUI.ResetCollisionIgnores"></member><member name="M:DecouplerGUI.ResetJoints"></member><member name="M:DecouplerGUI.ResumeVelocity"></member><member name="M:DecouplerGUI.SaveEffects(ConfigNode)"></member><member name="M:DecouplerGUI.ScheduleSetCollisionIgnores"></member><member name="M:DecouplerGUI.SendEvent(string)"></member><member name="M:DecouplerGUI.SendEvent(string,BaseEventData)"></member><member name="M:DecouplerGUI.SendEvent(string,BaseEventData,System.Int32)"></member><member name="M:DecouplerGUI.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:DecouplerGUI.SendMessage(string,object)"></member><member name="M:DecouplerGUI.SendMessage(string)"></member><member name="M:DecouplerGUI.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:DecouplerGUI.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:DecouplerGUI.SendMessageUpwards(string,object)"></member><member name="M:DecouplerGUI.SendMessageUpwards(string)"></member><member name="M:DecouplerGUI.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:DecouplerGUI.SetCollisionIgnores"></member><member name="M:DecouplerGUI.SetDetectCollisions(System.Boolean)"></member><member name="M:DecouplerGUI.SetHierarchyRoot(Part)"></member><member name="M:DecouplerGUI.SetHighlight(System.Boolean,System.Boolean)"></member><member name="M:DecouplerGUI.SetHighlightColor(UnityEngine.Color)"></member><member name="M:DecouplerGUI.SetHighlightColor"></member><member name="M:DecouplerGUI.SetHighlightDefault"></member><member name="M:DecouplerGUI.SetHighlightType(Part+HighlightType)"></member><member name="M:DecouplerGUI.SetLayer(UnityEngine.GameObject,System.Int32)"></member><member name="M:DecouplerGUI.SetMirror(UnityEngine.Vector3)"></member><member name="M:DecouplerGUI.setOpacity(System.Single)"></member><member name="M:DecouplerGUI.setParent(Part)"></member><member name="M:DecouplerGUI.SetReferenceTransform(UnityEngine.Transform)"></member><member name="M:DecouplerGUI.SetResource(ConfigNode)"></member><member name="M:DecouplerGUI.SpawnIVA"></member><member name="M:DecouplerGUI.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:DecouplerGUI.StartCoroutine(string,object)"></member><member name="M:DecouplerGUI.StartCoroutine(string)"></member><member name="M:DecouplerGUI.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:DecouplerGUI.StopAllCoroutines"></member><member name="M:DecouplerGUI.StopCoroutine(string)"></member><member name="M:DecouplerGUI.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:DecouplerGUI.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:DecouplerGUI.ToString"></member><member name="M:DecouplerGUI.TransferResource(System.Int32,System.Double)"></member><member name="M:DecouplerGUI.TransferResource(PartResource,System.Double,Part)"></member><member name="M:DecouplerGUI.Undock(DockedVesselInfo)"></member><member name="M:DecouplerGUI.unfreeze"></member><member name="M:DecouplerGUI.Unpack"></member><member name="M:DecouplerGUI.UnregisterCrew"></member><member name="M:DecouplerGUI.UpdateOrgPosAndRot(Part)"></member><member name="M:DecouplerGUI.UpdateStageability(System.Boolean,System.Boolean)"></member><member name="M:DecouplerGUI.#ctor"></member><member name="T:DiscoverableObjectsUtil"><summary>Static methods used by asteroids</summary></member><member name="M:DiscoverableObjectsUtil.Equals(object)"></member><member name="M:DiscoverableObjectsUtil.Finalize"></member><member name="M:DiscoverableObjectsUtil.GetHashCode"></member><member name="M:DiscoverableObjectsUtil.GetType"></member><member name="M:DiscoverableObjectsUtil.MemberwiseClone"></member><member name="M:DiscoverableObjectsUtil.ToString"></member><member name="M:DiscoverableObjectsUtil.GenerateAsteroidName"><summary>Generates an suitably science-y asteroid name</summary><returns>A random string of the form "Ast. XXX-###".</returns></member><member name="M:DiscoverableObjectsUtil.SpawnAsteroid(string,Orbit,System.UInt32,UntrackedObjectClass,System.Double,System.Double)"></member><member name="T:DiscoveryInfo"><summary>Represents the "remote sensing" information available for an IDiscoverable</summary><invariant>this.fadeUT = this.lastObservedTime + this.unobservedLifetime</invariant></member><member name="F:DiscoveryInfo.distance"><summary>Tracking station wrapper for IDiscoverable.RevealAltitude()  Requires DiscoveryLevels.StateVectors</summary></member><member name="F:DiscoveryInfo.mass"><summary>Tracking station wrapper for IDiscoverable.RevealMass()  Requires DiscoveryLevels.Appearance</summary></member><member name="F:DiscoveryInfo.name"><summary>Tracking station wrapper for IDiscoverable.RevealName()  Requires DiscoveryLevels.Name</summary></member><member name="F:DiscoveryInfo.signalStrengthLevel"><summary>Tracking station wrapper for GetSignalStrengthCaption()  Always visible</summary></member><member name="F:DiscoveryInfo.signalStrengthPercent"><summary>Tracking station wrapper for GetSignalStrength()  Rounded to the nearest 0.1%. Always visible</summary></member><member name="F:DiscoveryInfo.situation"><summary>Tracking station wrapper for IDiscoverable.RevealSituationString()  Requires DiscoveryLevels.StateVectors</summary></member><member name="F:DiscoveryInfo.size"><summary>Tracking station wrapper for this.objectSize  Always visible</summary></member><member name="F:DiscoveryInfo.speed"><summary>Tracking station wrapper for IDiscoverable.RevealSpeed()  Requires DiscoveryLevels.StateVectors</summary></member><member name="F:DiscoveryInfo.trackingStatus"><summary>Tracking station wrapper for Level?  Always visible</summary></member><member name="F:DiscoveryInfo.type"><summary>Tracking station wrapper for IDiscoverable.RevealType()  Requires DiscoveryLevels.Appearance</summary></member><member name="P:DiscoveryInfo.fadeUT"><summary>The time at which the asteroid is scheduled to be deleted</summary></member><member name="P:DiscoveryInfo.lastObservedTime"><summary>The time at which the asteroid was last tracked Stored in persistence file</summary></member><member name="P:DiscoveryInfo.Level"><summary>The asteroid's tracking state Stored in persistence file as state</summary></member><member name="P:DiscoveryInfo.objectSize"><summary>The size class (A-E) of the asteroid Stored in persistence file as size</summary></member><member name="P:DiscoveryInfo.referenceLifetime"><summary>The time for which an asteroid can go untracked if it starts at full signal strength Alternate definition: the time needed for the signal strength to fall by 1 unit. Always equals 86400 × ScenarioDiscoverableObjects.maxUntrackedLifetime. For the default spawn settings, this is 1728000 seconds, or 20 Earth days.  Stored in persistence file as refTime</summary></member><member name="P:DiscoveryInfo.unobservedLifetime"><summary>The time for which the asteroid can go untracked before it is deleted  Stored in persistence file as lifetime</summary></member><member name="M:DiscoveryInfo.Equals(object)"></member><member name="M:DiscoveryInfo.Finalize"></member><member name="M:DiscoveryInfo.GetHashCode"></member><member name="M:DiscoveryInfo.GetSignalLife(System.Double)"><summary>Returns the fraction of the asteroid's unobservedLifetime that remains</summary><param name="UT">The time at which the signal life is measured</param><remarks>GetSignalLife(t_discover) == 1.0 GetSignalLife(fadeUT) == 0.0</remarks></member><member name="M:DiscoveryInfo.GetSignalStrength(System.Double)"><summary>Returns amount of time remaining until the asteroid is lost, in units of referenceLifetime</summary><param name="UT">The time at which the signal strength is measured</param><remarks>GetSignalStrength(t_discover) == unobservedLifetime / referenceLifetime GetSignalStrength(fadeUT) == 0.0</remarks></member><member name="M:DiscoveryInfo.GetType"></member><member name="M:DiscoveryInfo.HaveKnowledgeAbout(DiscoveryLevels)"><summary>Function testing if an asteroid has a particular discovery level</summary><param name="lvl">The flag(s) whose presence must be tested.</param><returns>True if at least one of the flags in<paramref name="lvl"/>is in 	this object, false otherwise</returns></member><member name="M:DiscoveryInfo.Load(ConfigNode)"></member><member name="M:DiscoveryInfo.MemberwiseClone"></member><member name="M:DiscoveryInfo.Save(ConfigNode)"></member><member name="M:DiscoveryInfo.SetLastObservedTime(System.Double)"><summary>Logs an asteroid observation</summary><param name="UT">The new time of last observation</param></member><member name="M:DiscoveryInfo.SetLevel(DiscoveryLevels)"><summary>Sets the level of knowledge the player has for the asteroid</summary><param name="level">The flags representing the asteroid's exploration state</param></member><member name="M:DiscoveryInfo.SetReferenceLifetime(System.Double)"><summary>Updates the reference lifetime</summary><param name="time">Changes the scaling of signal strength.</param></member><member name="M:DiscoveryInfo.SetUnobservedLifetime(System.Double)"><summary>Updates the time for which the asteroid can go untracked, preserving class invariants</summary><param name="time">The maximum time to track the asteroid</param></member><member name="M:DiscoveryInfo.SetUntrackedObjectSize(UntrackedObjectClass)"><summary>Updates the asteroid size</summary><param name="size">The asteroid class (A-E)</param></member><member name="M:DiscoveryInfo.ToString"></member><member name="M:DiscoveryInfo.GetSignalStrengthCaption(System.Double)"><summary>Returns a text description of the signal strength</summary><returns>If<paramref name="signal"/>is in [0.0, 0.2), returns "Very Weak"</returns><returns>If<paramref name="signal"/>is in [0.2, 0.4), returns "Weak"</returns><returns>If<paramref name="signal"/>is in [0.4, 0.6), returns "Average"</returns><returns>If<paramref name="signal"/>is in [0.6, 0.8), returns "Good"</returns><returns>If<paramref name="signal"/>is in [0.8, 1.0], returns "Strong"</returns></member><member name="M:DiscoveryInfo.GetSizeClassDescription(UntrackedObjectClass)"><summary>Returns long description of asteroid type</summary><param name="sizeClass">The asteroid type to label</param><returns>The asteroid class explanation printed on the tracking station's info panel.<example>"Class C Objects are about average-sized..."</example>If not a valid value of UntrackedObjectClass, returns "This seems to be a non-standard size class. Who knows what it'll look like?"</returns></member><member name="M:DiscoveryInfo.GetSizeClassSizes(UntrackedObjectClass)"><summary>Returns asteroid size displayed in map view</summary><param name="sizeClass">The asteroid type to label</param><returns>The asteroid class printed beneath an untracked asteroid.<example>"C (Medium)"</example>If not a valid value of UntrackedObjectClass, returns "???"</returns></member><member name="M:DiscoveryInfo.#ctor(IDiscoverable)"><summary>Initializes a Class C asteroid, and assumes all properties are already known.</summary><param name="host">The vessel or celestial body to which this DiscoveryInfo applies</param></member><member name="M:DiscoveryInfo.#ctor(IDiscoverable,System.Double)"><summary>Initializes a Class C asteroid, and assumes all properties are already known.</summary><param name="host">The vessel or celestial body to which this DiscoveryInfo applies</param><param name="untrackedLifetime">The amount of time the asteroid can remain untracked  	before disappearing</param></member><member name="M:DiscoveryInfo.#ctor(IDiscoverable,DiscoveryLevels,System.Double)"><summary>Initializes a Class C asteroid</summary><param name="host">The vessel or celestial body to which this DiscoveryInfo applies</param><param name="level">The amount of knowledge for the asteroid</param><param name="untrackedLifetime">The amount of time the asteroid can remain untracked  	before disappearing</param></member><member name="T:DiscoveryLevels"><summary>Describes an IDiscoverable object's state regarding tracking and exploration.</summary></member><member name="T:DockingPort"><summary>An unused class; use ModuleDockingNode instead.</summary></member><member name="F:DockingPort.absorptiveConstant"></member><member name="F:DockingPort.ActivatesEvenIfDisconnected"></member><member name="F:DockingPort.aerodynamicArea"></member><member name="F:DockingPort.airlock"></member><member name="F:DockingPort.airstreamShields"></member><member name="F:DockingPort.analyticInternalInsulationFactor"></member><member name="F:DockingPort.analyticSkinInsulationFactor"></member><member name="F:DockingPort.angularDrag"></member><member name="F:DockingPort.angularDragByFI"></member><member name="F:DockingPort.atmDensity"></member><member name="F:DockingPort.attached"></member><member name="F:DockingPort.attachJoint"></member><member name="F:DockingPort.attachMethod"></member><member name="F:DockingPort.attachMode"></member><member name="F:DockingPort.attachNodes"></member><member name="F:DockingPort.attachRules"></member><member name="F:DockingPort.attPos"></member><member name="F:DockingPort.attPos0"></member><member name="F:DockingPort.attRotation"></member><member name="F:DockingPort.attRotation0"></member><member name="F:DockingPort.blackBodyRadiationAlphaMult"></member><member name="F:DockingPort.bodyLiftLocalPosition"></member><member name="F:DockingPort.bodyLiftLocalVector"></member><member name="F:DockingPort.bodyLiftMultiplier"></member><member name="F:DockingPort.bodyLiftScalar"></member><member name="F:DockingPort.boundsMultiplier"></member><member name="F:DockingPort.breakingForce"></member><member name="F:DockingPort.breakingTorque"></member><member name="F:DockingPort.buoyancy"></member><member name="F:DockingPort.buoyancyUseCubeNamed"></member><member name="F:DockingPort.buoyancyUseSine"></member><member name="F:DockingPort.CenterOfBuoyancy"></member><member name="F:DockingPort.CenterOfDisplacement"></member><member name="F:DockingPort.children"></member><member name="F:DockingPort.childStageOffset"></member><member name="F:DockingPort.collider"></member><member name="F:DockingPort.collisionEnhancer"></member><member name="F:DockingPort.CoLOffset"></member><member name="F:DockingPort.CoMOffset"></member><member name="F:DockingPort.connected"></member><member name="F:DockingPort.CoPOffset"></member><member name="F:DockingPort.craftID"></member><member name="F:DockingPort.crashTolerance"></member><member name="F:DockingPort.CrewCapacity"></member><member name="F:DockingPort.crewRespawnTime"></member><member name="F:DockingPort.crewTransferAvailable"></member><member name="F:DockingPort.currentCollisions"></member><member name="F:DockingPort.customPartData"></member><member name="F:DockingPort.defaultInverseStage"></member><member name="F:DockingPort.depth"></member><member name="F:DockingPort.dockingNodeOrientation"></member><member name="F:DockingPort.dockingNodePosition"></member><member name="F:DockingPort.dragModel"></member><member name="F:DockingPort.dragReferenceVector"></member><member name="F:DockingPort.dragScalar"></member><member name="F:DockingPort.dragVector"></member><member name="F:DockingPort.dragVectorDir"></member><member name="F:DockingPort.dragVectorDirLocal"></member><member name="F:DockingPort.dragVectorMag"></member><member name="F:DockingPort.dragVectorSqrMag"></member><member name="F:DockingPort.dynamicPressurekPa"></member><member name="F:DockingPort.edgeHighlightThresholdMult"></member><member name="F:DockingPort.editorCollision"></member><member name="F:DockingPort.editorLinks"></member><member name="F:DockingPort.editorStarted"></member><member name="F:DockingPort.ejectionForce"></member><member name="F:DockingPort.emissiveConstant"></member><member name="F:DockingPort.explosionPotential"></member><member name="F:DockingPort.exposedArea"></member><member name="F:DockingPort.flagURL"></member><member name="F:DockingPort.flightID"></member><member name="F:DockingPort.frozen"></member><member name="F:DockingPort.fuelCrossFeed"></member><member name="F:DockingPort.fuelLookupTargets"></member><member name="F:DockingPort.fxGroups"></member><member name="F:DockingPort.gaugeThresholdMult"></member><member name="F:DockingPort.GroundContact"></member><member name="F:DockingPort.gTolerance"></member><member name="F:DockingPort.habitableVolume"></member><member name="F:DockingPort.hasHeiarchyModel"></member><member name="F:DockingPort.hasLiftModule"></member><member name="F:DockingPort.hatchObstructionCheckInwardDistance"></member><member name="F:DockingPort.hatchObstructionCheckInwardOffset"></member><member name="F:DockingPort.hatchObstructionCheckOutwardDistance"></member><member name="F:DockingPort.hatchObstructionCheckSphereRadius"></member><member name="F:DockingPort.heatConductivity"></member><member name="F:DockingPort.heatConvectiveConstant"></member><member name="F:DockingPort.highlightColor"></member><member name="F:DockingPort.highlighter"></member><member name="F:DockingPort.highlightType"></member><member name="F:DockingPort.initialVesselName"></member><member name="F:DockingPort.inStageIndex"></member><member name="F:DockingPort.internalModel"></member><member name="F:DockingPort.InternalModelName"></member><member name="F:DockingPort.inverseStage"></member><member name="F:DockingPort.isClone"></member><member name="F:DockingPort.isControlSource"></member><member name="F:DockingPort.isMirrored"></member><member name="F:DockingPort.isPersistent"></member><member name="F:DockingPort.lastFuelRequestId"></member><member name="F:DockingPort.launchID"></member><member name="F:DockingPort.machNumber"></member><member name="F:DockingPort.manualStageOffset"></member><member name="F:DockingPort.mass"></member><member name="F:DockingPort.maxDepth"></member><member name="F:DockingPort.maximum_drag"></member><member name="F:DockingPort.maxTemp"></member><member name="F:DockingPort.minDepth"></member><member name="F:DockingPort.minimum_drag"></member><member name="F:DockingPort.mirrorAxis"></member><member name="F:DockingPort.mirrorRefAxis"></member><member name="F:DockingPort.mirrorVector"></member><member name="F:DockingPort.missionID"></member><member name="F:DockingPort.moduleSize"></member><member name="F:DockingPort.needPrefabMass"></member><member name="F:DockingPort.noAutoEVAAny"></member><member name="F:DockingPort.noAutoEVAMulti"></member><member name="F:DockingPort.NoCrossFeedNodeKey"></member><member name="F:DockingPort.OnEditorAttach"></member><member name="F:DockingPort.OnEditorDestroy"></member><member name="F:DockingPort.OnEditorDetach"></member><member name="F:DockingPort.OnJustAboutToBeDestroyed"></member><member name="F:DockingPort.orgPos"></member><member name="F:DockingPort.orgRot"></member><member name="F:DockingPort.originalStage"></member><member name="F:DockingPort.overrideSkillUpdate"></member><member name="F:DockingPort.overrideSkillUpdateModules"></member><member name="F:DockingPort.packed"></member><member name="F:DockingPort.parent"></member><member name="F:DockingPort.partBuoyancy"></member><member name="F:DockingPort.partInfo"></member><member name="F:DockingPort.partName"></member><member name="F:DockingPort.partTransform"></member><member name="F:DockingPort.PermanentGroundContact"></member><member name="F:DockingPort.physicalSignificance"></member><member name="F:DockingPort.PhysicsSignificance"></member><member name="F:DockingPort.potentialParent"></member><member name="F:DockingPort.prefabMass"></member><member name="F:DockingPort.prefabSize"></member><member name="F:DockingPort.protoModuleCrew"></member><member name="F:DockingPort.protoPartSnapshot"></member><member name="F:DockingPort.ptd"></member><member name="F:DockingPort.radiativeArea"></member><member name="F:DockingPort.radiatorCritical"></member><member name="F:DockingPort.radiatorHeadroom"></member><member name="F:DockingPort.radiatorMax"></member><member name="F:DockingPort.rb"></member><member name="F:DockingPort.rescaleFactor"></member><member name="F:DockingPort.resourceMass"></member><member name="F:DockingPort.resourceRequestRemainingThreshold"></member><member name="F:DockingPort.resourceTargets"></member><member name="F:DockingPort.resourceThermalMass"></member><member name="F:DockingPort.ResumeState"></member><member name="F:DockingPort.scaleFactor"></member><member name="F:DockingPort.separationIndex"></member><member name="F:DockingPort.skinExposedArea"></member><member name="F:DockingPort.skinExposedAreaFrac"></member><member name="F:DockingPort.skinExposedMassMult"></member><member name="F:DockingPort.skinInternalConductionMult"></member><member name="F:DockingPort.skinMassPerArea"></member><member name="F:DockingPort.skinMaxTemp"></member><member name="F:DockingPort.skinSkinConductionMult"></member><member name="F:DockingPort.skinTemperature"></member><member name="F:DockingPort.skinThermalMass"></member><member name="F:DockingPort.skinThermalMassModifier"></member><member name="F:DockingPort.skinThermalMassRecip"></member><member name="F:DockingPort.skinToInternalFlux"></member><member name="F:DockingPort.skinUnexposedExternalTemp"></member><member name="F:DockingPort.skinUnexposedMassMult"></member><member name="F:DockingPort.skinUnexposedTemperature"></member><member name="F:DockingPort.skipColliderIgnores"></member><member name="F:DockingPort.srfAttachNode"></member><member name="F:DockingPort.stackIcon"></member><member name="F:DockingPort.stackIconGrouping"></member><member name="F:DockingPort.stackPriThreshold"></member><member name="F:DockingPort.stackSymmetry"></member><member name="F:DockingPort.stageAfter"></member><member name="F:DockingPort.stageBefore"></member><member name="F:DockingPort.stageOffset"></member><member name="F:DockingPort.stagingIcon"></member><member name="F:DockingPort.stagingIconAlwaysShown"></member><member name="F:DockingPort.stagingOn"></member><member name="F:DockingPort.started"></member><member name="F:DockingPort.state"></member><member name="F:DockingPort.staticPressureAtm"></member><member name="F:DockingPort.submergedDragScalar"></member><member name="F:DockingPort.submergedDynamicPressurekPa"></member><member name="F:DockingPort.submergedLiftScalar"></member><member name="F:DockingPort.submergedPortion"></member><member name="F:DockingPort.surfaceAreas"></member><member name="F:DockingPort.symMethod"></member><member name="F:DockingPort.symmetryCounterparts"></member><member name="F:DockingPort.temperature"></member><member name="F:DockingPort.terrainCollider"></member><member name="F:DockingPort.thermalConductionFlux"></member><member name="F:DockingPort.thermalConvectionFlux"></member><member name="F:DockingPort.thermalExposedFlux"></member><member name="F:DockingPort.thermalExposedFluxPrevious"></member><member name="F:DockingPort.thermalInternalFlux"></member><member name="F:DockingPort.thermalInternalFluxPrevious"></member><member name="F:DockingPort.thermalMass"></member><member name="F:DockingPort.thermalMassModifier"></member><member name="F:DockingPort.thermalMassReciprocal"></member><member name="F:DockingPort.thermalRadiationFlux"></member><member name="F:DockingPort.thermalSkinFlux"></member><member name="F:DockingPort.thermalSkinFluxPrevious"></member><member name="F:DockingPort.topNode"></member><member name="F:DockingPort.vel"></member><member name="F:DockingPort.vessel"></member><member name="F:DockingPort.vesselType"></member><member name="F:DockingPort.waterAngularDragMultiplier"></member><member name="F:DockingPort.WaterContact"></member><member name="P:DockingPort.Actions"></member><member name="P:DockingPort.ClassID"></member><member name="P:DockingPort.ClassName"></member><member name="P:DockingPort.DragCubes"></member><member name="P:DockingPort.Effects"></member><member name="P:DockingPort.enabled"></member><member name="P:DockingPort.Events"></member><member name="P:DockingPort.Fields"></member><member name="P:DockingPort.gameObject"></member><member name="P:DockingPort.hasStagingIcon"></member><member name="P:DockingPort.hideFlags"></member><member name="P:DockingPort.HighlightActive"></member><member name="P:DockingPort.HighlightRendererCount"></member><member name="P:DockingPort.HighlightRenderers"></member><member name="P:DockingPort.isActiveAndEnabled"></member><member name="P:DockingPort.isAttachable"></member><member name="P:DockingPort.isAttached"></member><member name="P:DockingPort.isConnected"></member><member name="P:DockingPort.isControllable"></member><member name="P:DockingPort.Landed"></member><member name="P:DockingPort.localRoot"></member><member name="P:DockingPort.Modules"></member><member name="P:DockingPort.MouseOver"></member><member name="P:DockingPort.name"></member><member name="P:DockingPort.NoAutoEVA"></member><member name="P:DockingPort.orbit"></member><member name="P:DockingPort.PartValues"></member><member name="P:DockingPort.RecurseHighlight"></member><member name="P:DockingPort.Resources"></member><member name="P:DockingPort.Rigidbody"></member><member name="P:DockingPort.ShieldedFromAirstream"></member><member name="P:DockingPort.Splashed"></member><member name="P:DockingPort.State"></member><member name="P:DockingPort.tag"></member><member name="P:DockingPort.transform"></member><member name="P:DockingPort.useGUILayout"></member><member name="P:DockingPort.WCoM"></member><member name="M:DockingPort.activate(System.Int32,Vessel)"></member><member name="M:DockingPort.ActivateAutoDock"></member><member name="M:DockingPort.AddAttachNode(ConfigNode)"></member><member name="M:DockingPort.addChild(Part)"></member><member name="M:DockingPort.AddCrewmember(ProtoCrewMember)"></member><member name="M:DockingPort.AddCrewmemberAt(ProtoCrewMember,System.Int32)"></member><member name="M:DockingPort.AddExposedThermalFlux(System.Double)"></member><member name="M:DockingPort.AddInternalPart(ConfigNode)"></member><member name="M:DockingPort.AddModule(string)"></member><member name="M:DockingPort.AddModule(ConfigNode)"></member><member name="M:DockingPort.AddOnMouseDown(Part+OnActionDelegate)"></member><member name="M:DockingPort.AddOnMouseEnter(Part+OnActionDelegate)"></member><member name="M:DockingPort.AddOnMouseExit(Part+OnActionDelegate)"></member><member name="M:DockingPort.AddResource(ConfigNode)"></member><member name="M:DockingPort.AddShield(IAirstreamShield)"></member><member name="M:DockingPort.AddSkinThermalFlux(System.Double)"></member><member name="M:DockingPort.AddThermalFlux(System.Double)"></member><member name="M:DockingPort.AlreadyProcessedRequest(System.Int32)"></member><member name="M:DockingPort.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:DockingPort.BroadcastMessage(string,object)"></member><member name="M:DockingPort.BroadcastMessage(string)"></member><member name="M:DockingPort.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:DockingPort.CancelInvoke"></member><member name="M:DockingPort.CancelInvoke(string)"></member><member name="M:DockingPort.CheckCollision(UnityEngine.Collision)"></member><member name="M:DockingPort.checkLanded"></member><member name="M:DockingPort.checkPermanentLandedAt"></member><member name="M:DockingPort.checkSplashed"></member><member name="M:DockingPort.CheckTransferDialog"></member><member name="M:DockingPort.cleanReferencesFromOtherParts"></member><member name="M:DockingPort.CompareTag(string)"></member><member name="M:DockingPort.Couple(Part)"></member><member name="M:DockingPort.CreateInternalModel"></member><member name="M:DockingPort.deactivate"></member><member name="M:DockingPort.decouple(System.Single)"></member><member name="M:DockingPort.DespawnIVA"></member><member name="M:DockingPort.Die"></member><member name="M:DockingPort.disconnect(System.Boolean)"></member><member name="M:DockingPort.DrainFuel(System.Single)"></member><member name="M:DockingPort.drawStats"></member><member name="M:DockingPort.Effect(string)"></member><member name="M:DockingPort.Effect(string,System.Single)"></member><member name="M:DockingPort.Equals(object)"></member><member name="M:DockingPort.explode"></member><member name="M:DockingPort.Finalize"></member><member name="M:DockingPort.findAttachNode(string)"></member><member name="M:DockingPort.findAttachNodeByPart(Part)"></member><member name="M:DockingPort.findAttachNodes(string)"></member><member name="M:DockingPort.FindChildPart(string)"></member><member name="M:DockingPort.FindChildPart(string,System.Boolean)"></member><member name="M:DockingPort.FindChildPart"></member><member name="M:DockingPort.FindChildPart(System.Boolean)"></member><member name="M:DockingPort.FindChildParts"></member><member name="M:DockingPort.FindChildParts(System.Boolean)"></member><member name="M:DockingPort.FindFuel(Part,System.Collections.Generic.List,System.UInt32)"></member><member name="M:DockingPort.findFxGroup(string)"></member><member name="M:DockingPort.FindModelAnimator(string,string)"></member><member name="M:DockingPort.FindModelAnimators(string)"></member><member name="M:DockingPort.FindModelAnimators"></member><member name="M:DockingPort.FindModelComponent"></member><member name="M:DockingPort.FindModelComponent(string)"></member><member name="M:DockingPort.FindModelComponents"></member><member name="M:DockingPort.FindModelComponents(string)"></member><member name="M:DockingPort.FindModelTransform(string)"></member><member name="M:DockingPort.FindModelTransforms(string)"></member><member name="M:DockingPort.FindModuleImplementing"></member><member name="M:DockingPort.FindModulesImplementing"></member><member name="M:DockingPort.FindNonPhysicslessChildren(System.Collections.Generic.List)"></member><member name="M:DockingPort.FindNonPhysicslessParent"></member><member name="M:DockingPort.FindPartThroughNodes(Part,Part)"></member><member name="M:DockingPort.FindResource_StackPriority(Part,System.Collections.Generic.List,System.Int32,System.Double,System.Int32,System.Boolean,double&amp;,double&amp;,System.Collections.Generic.List,System.Boolean)"></member><member name="M:DockingPort.force_activate"></member><member name="M:DockingPort.freeze"></member><member name="M:DockingPort.GetComponent(System.Type)"></member><member name="M:DockingPort.GetComponent"></member><member name="M:DockingPort.GetComponent(string)"></member><member name="M:DockingPort.GetComponentInChildren(System.Type)"></member><member name="M:DockingPort.GetComponentInChildren"></member><member name="M:DockingPort.GetComponentInParent(System.Type)"></member><member name="M:DockingPort.GetComponentInParent"></member><member name="M:DockingPort.GetComponents(System.Type)"></member><member name="M:DockingPort.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:DockingPort.GetComponents(List)"></member><member name="M:DockingPort.GetComponents"></member><member name="M:DockingPort.GetComponentsInChildren(System.Type)"></member><member name="M:DockingPort.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:DockingPort.GetComponentsInChildren(System.Boolean)"></member><member name="M:DockingPort.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:DockingPort.GetComponentsInChildren"></member><member name="M:DockingPort.GetComponentsInChildren(List)"></member><member name="M:DockingPort.GetComponentsInParent(System.Type)"></member><member name="M:DockingPort.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:DockingPort.GetComponentsInParent(System.Boolean)"></member><member name="M:DockingPort.GetComponentsInParent(System.Boolean,List)"></member><member name="M:DockingPort.GetComponentsInParent"></member><member name="M:DockingPort.GetConnectedResources(System.Int32,ResourceFlowMode,System.Collections.Generic.List)"></member><member name="M:DockingPort.GetConnectedResources(System.Int32,ResourceFlowMode,System.Collections.Generic.List,double&amp;,double&amp;)"></member><member name="M:DockingPort.GetHashCode"></member><member name="M:DockingPort.GetInstanceID"></member><member name="M:DockingPort.GetModuleCosts(System.Single)"></member><member name="M:DockingPort.GetModuleMass(System.Single)"></member><member name="M:DockingPort.GetModuleSize(UnityEngine.Vector3)"></member><member name="M:DockingPort.GetPhysicslessChildMass"></member><member name="M:DockingPort.GetReferenceTransform"></member><member name="M:DockingPort.GetResourceMass"></member><member name="M:DockingPort.GetResourceMass(float&amp;)"></member><member name="M:DockingPort.GetResourceMass(double&amp;)"></member><member name="M:DockingPort.getSymmetryCounterPart(System.Int32)"></member><member name="M:DockingPort.GetType"></member><member name="M:DockingPort.HandleCollision(UnityEngine.Collision)"></member><member name="M:DockingPort.hasIndirectChild(Part)"></member><member name="M:DockingPort.hasIndirectParent(Part)"></member><member name="M:DockingPort.highlight(UnityEngine.Color)"></member><member name="M:DockingPort.highlightRecursive(UnityEngine.Color)"></member><member name="M:DockingPort.InitializeEffects"></member><member name="M:DockingPort.InitializeModules"></member><member name="M:DockingPort.Invoke(string,System.Single)"></member><member name="M:DockingPort.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:DockingPort.IsInvoking(string)"></member><member name="M:DockingPort.IsInvoking"></member><member name="M:DockingPort.isSymmetryCounterPart(Part)"></member><member name="M:DockingPort.LateUpdate"></member><member name="M:DockingPort.LoadEffects(ConfigNode)"></member><member name="M:DockingPort.LoadModule(ConfigNode,int&amp;)"></member><member name="M:DockingPort.MemberwiseClone"></member><member name="M:DockingPort.onActiveFixedUpdate"></member><member name="M:DockingPort.onActiveUpdate"></member><member name="M:DockingPort.onAttach(Part,System.Boolean)"></member><member name="M:DockingPort.onBackup"></member><member name="M:DockingPort.OnCollisionEnter(UnityEngine.Collision)"></member><member name="M:DockingPort.OnCollisionExit(UnityEngine.Collision)"></member><member name="M:DockingPort.OnCollisionStay(UnityEngine.Collision)"></member><member name="M:DockingPort.OnCopy(Part,System.Boolean)"></member><member name="M:DockingPort.onCopy(Part,System.Boolean)"></member><member name="M:DockingPort.onCtrlUpd(FlightCtrlState)"></member><member name="M:DockingPort.onDecouple(System.Single)"></member><member name="M:DockingPort.OnDelete"></member><member name="M:DockingPort.onDetach(System.Boolean)"></member><member name="M:DockingPort.onDisconnect"></member><member name="M:DockingPort.OnDrawStats"></member><member name="M:DockingPort.onEditorUpdate"></member><member name="M:DockingPort.onFlightStart"></member><member name="M:DockingPort.onFlightStartAtLaunchPad"></member><member name="M:DockingPort.onFlightStateLoad(System.Collections.Generic.Dictionary)"></member><member name="M:DockingPort.onFlightStateSave(System.Collections.Generic.Dictionary)"></member><member name="M:DockingPort.onGamePause"></member><member name="M:DockingPort.onGameResume"></member><member name="M:DockingPort.OnGetStats"></member><member name="M:DockingPort.onJointDisable"></member><member name="M:DockingPort.onJointReset"></member><member name="M:DockingPort.OnLiftOff"></member><member name="M:DockingPort.OnLoad"></member><member name="M:DockingPort.OnLoad(ConfigNode)"></member><member name="M:DockingPort.onPack"></member><member name="M:DockingPort.onPartActivate"></member><member name="M:DockingPort.onPartAttach(Part)"></member><member name="M:DockingPort.onPartAwake"></member><member name="M:DockingPort.onPartDeactivate"></member><member name="M:DockingPort.onPartDelete"></member><member name="M:DockingPort.onPartDestroy"></member><member name="M:DockingPort.onPartDetach"></member><member name="M:DockingPort.onPartExplode"></member><member name="M:DockingPort.onPartFixedUpdate"></member><member name="M:DockingPort.OnPartJointBreak(System.Single)"></member><member name="M:DockingPort.onPartLiftOff"></member><member name="M:DockingPort.onPartLoad"></member><member name="M:DockingPort.onPartSplashdown"></member><member name="M:DockingPort.onPartStart"></member><member name="M:DockingPort.onPartTouchdown"></member><member name="M:DockingPort.onPartUpdate"></member><member name="M:DockingPort.OnPointerClick(UnityEngine.EventSystems.PointerEventData)"></member><member name="M:DockingPort.OnSave(ConfigNode)"></member><member name="M:DockingPort.OnSplashDown"></member><member name="M:DockingPort.onStartComplete"></member><member name="M:DockingPort.OnTouchDown"></member><member name="M:DockingPort.onUnpack"></member><member name="M:DockingPort.Pack"></member><member name="M:DockingPort.PromoteToPhysicalPart"></member><member name="M:DockingPort.propagateControlUpdate(FlightCtrlState)"></member><member name="M:DockingPort.RegisterCrew"></member><member name="M:DockingPort.removeChild(Part)"></member><member name="M:DockingPort.RemoveCrewmember(ProtoCrewMember)"></member><member name="M:DockingPort.RemoveModule(PartModule)"></member><member name="M:DockingPort.RemoveModules"></member><member name="M:DockingPort.RemoveOnMouseDown(Part+OnActionDelegate)"></member><member name="M:DockingPort.RemoveOnMouseEnter(Part+OnActionDelegate)"></member><member name="M:DockingPort.RemoveOnMouseExit(Part+OnActionDelegate)"></member><member name="M:DockingPort.RemoveShield(IAirstreamShield)"></member><member name="M:DockingPort.RequestFuel(Part,System.Single,System.UInt32)"></member><member name="M:DockingPort.RequestRCS(System.Single,System.Int32)"></member><member name="M:DockingPort.RequestResource(System.Int32,System.Single)"></member><member name="M:DockingPort.RequestResource(string,System.Single)"></member><member name="M:DockingPort.RequestResource(System.Int32,System.Double)"></member><member name="M:DockingPort.RequestResource(string,System.Double)"></member><member name="M:DockingPort.RequestResource(System.Int32,System.Double,ResourceFlowMode)"></member><member name="M:DockingPort.RequestResource(string,System.Double,ResourceFlowMode)"></member><member name="M:DockingPort.ResetCollisionIgnores"></member><member name="M:DockingPort.ResetJoints"></member><member name="M:DockingPort.ResumeVelocity"></member><member name="M:DockingPort.SaveEffects(ConfigNode)"></member><member name="M:DockingPort.ScheduleSetCollisionIgnores"></member><member name="M:DockingPort.SendEvent(string)"></member><member name="M:DockingPort.SendEvent(string,BaseEventData)"></member><member name="M:DockingPort.SendEvent(string,BaseEventData,System.Int32)"></member><member name="M:DockingPort.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:DockingPort.SendMessage(string,object)"></member><member name="M:DockingPort.SendMessage(string)"></member><member name="M:DockingPort.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:DockingPort.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:DockingPort.SendMessageUpwards(string,object)"></member><member name="M:DockingPort.SendMessageUpwards(string)"></member><member name="M:DockingPort.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:DockingPort.SetCollisionIgnores"></member><member name="M:DockingPort.SetDetectCollisions(System.Boolean)"></member><member name="M:DockingPort.SetHierarchyRoot(Part)"></member><member name="M:DockingPort.SetHighlight(System.Boolean,System.Boolean)"></member><member name="M:DockingPort.SetHighlightColor(UnityEngine.Color)"></member><member name="M:DockingPort.SetHighlightColor"></member><member name="M:DockingPort.SetHighlightDefault"></member><member name="M:DockingPort.SetHighlightType(Part+HighlightType)"></member><member name="M:DockingPort.SetLayer(UnityEngine.GameObject,System.Int32)"></member><member name="M:DockingPort.SetMirror(UnityEngine.Vector3)"></member><member name="M:DockingPort.setOpacity(System.Single)"></member><member name="M:DockingPort.setParent(Part)"></member><member name="M:DockingPort.SetReferenceTransform(UnityEngine.Transform)"></member><member name="M:DockingPort.SetResource(ConfigNode)"></member><member name="M:DockingPort.SpawnIVA"></member><member name="M:DockingPort.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:DockingPort.StartCoroutine(string,object)"></member><member name="M:DockingPort.StartCoroutine(string)"></member><member name="M:DockingPort.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:DockingPort.StopAllCoroutines"></member><member name="M:DockingPort.StopCoroutine(string)"></member><member name="M:DockingPort.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:DockingPort.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:DockingPort.ToString"></member><member name="M:DockingPort.TransferResource(System.Int32,System.Double)"></member><member name="M:DockingPort.TransferResource(PartResource,System.Double,Part)"></member><member name="M:DockingPort.Undock"></member><member name="M:DockingPort.Undock(DockedVesselInfo)"></member><member name="M:DockingPort.unfreeze"></member><member name="M:DockingPort.Unpack"></member><member name="M:DockingPort.UnregisterCrew"></member><member name="M:DockingPort.UpdateOrgPosAndRot(Part)"></member><member name="M:DockingPort.UpdateStageability(System.Boolean,System.Boolean)"></member><member name="M:DockingPort.#ctor"></member><member name="T:EditorLogic"><summary>This class has information about what is going on in the editor. In particular see SortedShipList.</summary></member><member name="F:EditorLogic.actionPanelBtn"></member><member name="F:EditorLogic.allowNodeAttachment"></member><member name="F:EditorLogic.allowSrfAttachment"></member><member name="F:EditorLogic.angleSnapButton"></member><member name="F:EditorLogic.angleSnapSprite"></member><member name="F:EditorLogic.attachClip"></member><member name="F:EditorLogic.attachNodePrefab"></member><member name="F:EditorLogic.cannotPlaceClip"></member><member name="F:EditorLogic.crewPanelBtn"></member><member name="F:EditorLogic.debugFlight"></member><member name="F:EditorLogic.deletePartClip"></member><member name="F:EditorLogic.disallowSave"></member><member name="F:EditorLogic.dragPlaneCenter"></member><member name="F:EditorLogic.dragSharpness"></member><member name="F:EditorLogic.editorCamera"></member><member name="F:EditorLogic.editorScreen"></member><member name="F:EditorLogic.editorType"></member><member name="F:EditorLogic.exitBtn"></member><member name="F:EditorLogic.flagBrowserButton"></member><member name="F:EditorLogic.initialPodPosition"></member><member name="F:EditorLogic.initialPodRotation"></member><member name="F:EditorLogic.launchBtn"></member><member name="F:EditorLogic.launchSiteName"></member><member name="F:EditorLogic.loadBtn"></member><member name="F:EditorLogic.maxHeight"></member><member name="F:EditorLogic.mirrorSprite"></member><member name="F:EditorLogic.modalAreas"></member><member name="F:EditorLogic.mouseGrab"></member><member name="F:EditorLogic.newBtn"></member><member name="F:EditorLogic.partGrabClip"></member><member name="F:EditorLogic.partPanelBtn"></member><member name="F:EditorLogic.partReleaseClip"></member><member name="F:EditorLogic.partRotation"></member><member name="F:EditorLogic.reRootClip"></member><member name="F:EditorLogic.saveBtn"></member><member name="F:EditorLogic.sceneToLoad"></member><member name="F:EditorLogic.selPartGrabOffset"></member><member name="F:EditorLogic.ship"><summary>EditorLogic.fetch.ship.parts is a list of the parts in the ship currently under construction, ordered by the order in which they were added to the ship.</summary></member><member name="F:EditorLogic.shipBrowserSkin"></member><member name="F:EditorLogic.shipDescriptionField"></member><member name="F:EditorLogic.shipFileImage"></member><member name="F:EditorLogic.shipNameField"></member><member name="F:EditorLogic.srfAttachAngleSnap"></member><member name="F:EditorLogic.srfAttachAngleSnapFine"></member><member name="F:EditorLogic.srfAttachCursorOffset"></member><member name="F:EditorLogic.startPodId"></member><member name="F:EditorLogic.state"></member><member name="F:EditorLogic.symmetryButton"></member><member name="F:EditorLogic.symmetryMethod"></member><member name="F:EditorLogic.symmetryMode"></member><member name="F:EditorLogic.symmetryModeTmp"></member><member name="F:EditorLogic.symmetrySprite"></member><member name="F:EditorLogic.toolsUI"></member><member name="F:EditorLogic.tweakGrabClip"></member><member name="F:EditorLogic.tweakReleaseClip"></member><member name="F:EditorLogic.vesselRotation"></member><member name="F:EditorLogic.autoShipName"></member><member name="F:EditorLogic.editorLocked"></member><member name="F:EditorLogic.fetch"></member><member name="F:EditorLogic.FlagURL"></member><member name="F:EditorLogic.Mode"></member><member name="F:EditorLogic.softLock"></member><member name="F:EditorLogic.startPod"></member><member name="P:EditorLogic.currentStateName"></member><member name="P:EditorLogic.editorBounds"></member><member name="P:EditorLogic.EditorConstructionMode"></member><member name="P:EditorLogic.enabled"></member><member name="P:EditorLogic.FSMStarted"></member><member name="P:EditorLogic.gameObject"></member><member name="P:EditorLogic.hideFlags"></member><member name="P:EditorLogic.initialPodPosition"></member><member name="P:EditorLogic.isActiveAndEnabled"></member><member name="P:EditorLogic.lastEventName"></member><member name="P:EditorLogic.mouseOverGUI"></member><member name="P:EditorLogic.name"></member><member name="P:EditorLogic.PartSelected"></member><member name="P:EditorLogic.State"></member><member name="P:EditorLogic.tag"></member><member name="P:EditorLogic.transform"></member><member name="P:EditorLogic.useGUILayout"></member><member name="P:EditorLogic.LayerMask"></member><member name="P:EditorLogic.PartRotation"></member><member name="P:EditorLogic.RootPart"></member><member name="P:EditorLogic.SelectedPart"></member><member name="P:EditorLogic.ShipFileImage"></member><member name="P:EditorLogic.SortedShipList"><summary>A list of all parts in the vessel that is being edited.</summary></member><member name="P:EditorLogic.VesselRotation"></member><member name="M:EditorLogic.AreAllPartsConnected"></member><member name="M:EditorLogic.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:EditorLogic.BroadcastMessage(string,object)"></member><member name="M:EditorLogic.BroadcastMessage(string)"></member><member name="M:EditorLogic.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:EditorLogic.CancelInvoke"></member><member name="M:EditorLogic.CancelInvoke(string)"></member><member name="M:EditorLogic.CompareTag(string)"></member><member name="M:EditorLogic.CountAllSceneParts(System.Boolean)"></member><member name="M:EditorLogic.DestroySelectedPart"></member><member name="M:EditorLogic.editText"></member><member name="M:EditorLogic.Equals(object)"></member><member name="M:EditorLogic.Finalize"></member><member name="M:EditorLogic.GetComponent(System.Type)"></member><member name="M:EditorLogic.GetComponent"></member><member name="M:EditorLogic.GetComponent(string)"></member><member name="M:EditorLogic.GetComponentInChildren(System.Type)"></member><member name="M:EditorLogic.GetComponentInChildren"></member><member name="M:EditorLogic.GetComponentInParent(System.Type)"></member><member name="M:EditorLogic.GetComponentInParent"></member><member name="M:EditorLogic.GetComponents(System.Type)"></member><member name="M:EditorLogic.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:EditorLogic.GetComponents(List)"></member><member name="M:EditorLogic.GetComponents"></member><member name="M:EditorLogic.GetComponentsInChildren(System.Type)"></member><member name="M:EditorLogic.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:EditorLogic.GetComponentsInChildren(System.Boolean)"></member><member name="M:EditorLogic.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:EditorLogic.GetComponentsInChildren"></member><member name="M:EditorLogic.GetComponentsInChildren(List)"></member><member name="M:EditorLogic.GetComponentsInParent(System.Type)"></member><member name="M:EditorLogic.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:EditorLogic.GetComponentsInParent(System.Boolean)"></member><member name="M:EditorLogic.GetComponentsInParent(System.Boolean,List)"></member><member name="M:EditorLogic.GetComponentsInParent"></member><member name="M:EditorLogic.GetHashCode"></member><member name="M:EditorLogic.GetInstanceID"></member><member name="M:EditorLogic.getSortedShipList"></member><member name="M:EditorLogic.GetType"></member><member name="M:EditorLogic.Invoke(string,System.Single)"></member><member name="M:EditorLogic.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:EditorLogic.IsInvoking(string)"></member><member name="M:EditorLogic.IsInvoking"></member><member name="M:EditorLogic.launchVessel"></member><member name="M:EditorLogic.Lock(System.Boolean,System.Boolean,System.Boolean,string)"></member><member name="M:EditorLogic.Lock(System.Boolean,System.Boolean,System.Boolean)"></member><member name="M:EditorLogic.MemberwiseClone"></member><member name="M:EditorLogic.NameOrDescriptionFocused"></member><member name="M:EditorLogic.OnPartListBackgroundTap"></member><member name="M:EditorLogic.OnPartListIconTap(AvailablePart)"></member><member name="M:EditorLogic.OnPartListIconTap(ShipTemplate)"></member><member name="M:EditorLogic.OnPodSelect(AvailablePart)"></member><member name="M:EditorLogic.OnPodSpawn(AvailablePart)"></member><member name="M:EditorLogic.OnSubassemblyDialogDismiss(Part)"></member><member name="M:EditorLogic.RelinkPrefab(Part,AvailablePart)"></member><member name="M:EditorLogic.ResetBackup"></member><member name="M:EditorLogic.SelectPanelActions"></member><member name="M:EditorLogic.SelectPanelCrew"></member><member name="M:EditorLogic.SelectPanelParts"></member><member name="M:EditorLogic.SelectPanelParts(System.Boolean)"></member><member name="M:EditorLogic.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:EditorLogic.SendMessage(string,object)"></member><member name="M:EditorLogic.SendMessage(string)"></member><member name="M:EditorLogic.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:EditorLogic.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:EditorLogic.SendMessageUpwards(string,object)"></member><member name="M:EditorLogic.SendMessageUpwards(string)"></member><member name="M:EditorLogic.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:EditorLogic.SetBackup"></member><member name="M:EditorLogic.SetHighlightRecursive(System.Boolean,List&lt;Part&gt;)"></member><member name="M:EditorLogic.SetHighlightRecursive(System.Boolean,Part)"></member><member name="M:EditorLogic.SetHighlightRecursive(System.Boolean,ShipConstruct)"></member><member name="M:EditorLogic.snapButton(UnityEngine.EventSystems.PointerEventData)"></member><member name="M:EditorLogic.snapButton"></member><member name="M:EditorLogic.SpawnConstruct(ShipConstruct)"></member><member name="M:EditorLogic.SpawnPart(AvailablePart)"></member><member name="M:EditorLogic.SpawnTemplate(ShipTemplate)"></member><member name="M:EditorLogic.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:EditorLogic.StartCoroutine(string,object)"></member><member name="M:EditorLogic.StartCoroutine(string)"></member><member name="M:EditorLogic.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:EditorLogic.StopAllCoroutines"></member><member name="M:EditorLogic.StopCoroutine(string)"></member><member name="M:EditorLogic.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:EditorLogic.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:EditorLogic.symButton(UnityEngine.EventSystems.PointerEventData)"></member><member name="M:EditorLogic.symButton"></member><member name="M:EditorLogic.ToString"></member><member name="M:EditorLogic.UndoRedo"></member><member name="M:EditorLogic.UndoRedoInputUpdate"></member><member name="M:EditorLogic.Unlock(string)"></member><member name="M:EditorLogic.Unlock"></member><member name="M:EditorLogic.UpdateUI"></member><member name="M:EditorLogic.DeletePart(Part)"></member><member name="M:EditorLogic.FindPartsInChildren(Part)"></member><member name="M:EditorLogic.FindPartsInChildren(System.Collections.Generic.List`1[[Part, Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null]]&amp;,Part)"></member><member name="M:EditorLogic.FirstNonSymmetricalParentFrom(Part)"></member><member name="M:EditorLogic.GetComponentUpwards(GameObject)"></member><member name="M:EditorLogic.GetComponentUpwards(string,GameObject)"></member><member name="M:EditorLogic.LoadShipFromFile(string)"></member><member name="M:EditorLogic.SetLayerRecursive(GameObject,System.Int32,System.Int32)"></member><member name="M:EditorLogic.SetSoftLock(System.Boolean)"></member><member name="M:EditorLogic.#ctor"></member><member name="T:EventReport"><summary>A type frequently used as a parameter in GameEvents</summary></member><member name="F:EventReport.eventType"><summary>An enum used to specify the type of EventReport; see FlightEvents for the available types</summary></member><member name="F:EventReport.msg"><summary>A string message that can accompany the EventReport</summary></member><member name="F:EventReport.origin"><summary>The Part responsible for generating the EventReport</summary></member><member name="F:EventReport.other"><summary>Usually the originating part name</summary></member><member name="F:EventReport.param"></member><member name="F:EventReport.sender"><summary>The target of the event; another part's name, the surface, blank, etc...</summary></member><member name="F:EventReport.stage"><summary>The active stage number when the EventReport is generated; can be set to any integer; 0 by default</summary></member><member name="M:EventReport.Equals(object)"></member><member name="M:EventReport.Finalize"></member><member name="M:EventReport.GetHashCode"></member><member name="M:EventReport.GetType"></member><member name="M:EventReport.MemberwiseClone"></member><member name="M:EventReport.ToString"></member><member name="M:EventReport.#ctor(FlightEvents,Part,string,string,System.Int32,string,System.Single)"></member><member name="M:EventReport.#ctor(FlightEvents,Part,string,string,System.Int32,string)"><summary>The EventReport constructor, generally used when firing an EventData event that calls for an EventReport parameter  someEvent.Fire(new EventReport(...));</summary><param name="type"/><param name="eventCreator"/><param name="name"/><param name="otherName"/><param name="stageNumber"/><param name="customMsg"/></member><member name="T:FlightCamera"><summary>This class is related to control of the main camera used in the flight scene. Its transform is the parent of the actual Camera objects.</summary></member><member name="F:FlightCamera.AbortExternalControl"></member><member name="F:FlightCamera.autoMode"></member><member name="F:FlightCamera.cameraAlt"></member><member name="F:FlightCamera.cameras"></member><member name="F:FlightCamera.cameraWobbleSensitivity"></member><member name="F:FlightCamera.camHdg"></member><member name="F:FlightCamera.camPitch"></member><member name="F:FlightCamera.endDirection"></member><member name="F:FlightCamera.FieldOfView"></member><member name="F:FlightCamera.FoRMode"></member><member name="F:FlightCamera.fovDefault"></member><member name="F:FlightCamera.fovMax"></member><member name="F:FlightCamera.fovMin"></member><member name="F:FlightCamera.mainCamera"></member><member name="F:FlightCamera.maxDistance"></member><member name="F:FlightCamera.maxDistOnDestroy"></member><member name="F:FlightCamera.maxPitch"></member><member name="F:FlightCamera.minDistance"></member><member name="F:FlightCamera.minDistOnDestroy"></member><member name="F:FlightCamera.minHeight"></member><member name="F:FlightCamera.minHeightAtMaxDist"></member><member name="F:FlightCamera.minHeightAtMinDist"></member><member name="F:FlightCamera.minPitch"></member><member name="F:FlightCamera.mode"></member><member name="F:FlightCamera.orbitSensitivity"></member><member name="F:FlightCamera.orientationSharpness"></member><member name="F:FlightCamera.pivotTranslateSharpness"></member><member name="F:FlightCamera.sharpness"></member><member name="F:FlightCamera.startDistance"></member><member name="F:FlightCamera.targetDirection"></member><member name="F:FlightCamera.tgtUpAxis"></member><member name="F:FlightCamera.upAxis"></member><member name="F:FlightCamera.updateActive"></member><member name="F:FlightCamera.vesselTarget"></member><member name="F:FlightCamera.zoomScaleFactor"></member><member name="F:FlightCamera.fetch"><summary>Returns the singleton FlightCamera object.</summary></member><member name="P:FlightCamera.Distance"></member><member name="P:FlightCamera.enabled"></member><member name="P:FlightCamera.gameObject"></member><member name="P:FlightCamera.hideFlags"></member><member name="P:FlightCamera.isActiveAndEnabled"></member><member name="P:FlightCamera.name"></member><member name="P:FlightCamera.pivotRotation"></member><member name="P:FlightCamera.tag"></member><member name="P:FlightCamera.Target"></member><member name="P:FlightCamera.transform"></member><member name="P:FlightCamera.useGUILayout"></member><member name="P:FlightCamera.CamHdg"><summary>You can set this to change the look direction of the in-flight camera (value is in radians).</summary></member><member name="P:FlightCamera.CamMode"></member><member name="P:FlightCamera.CamPitch"><summary>You can set this to change the look direction of the in-flight camera (value is in radians).</summary></member><member name="P:FlightCamera.FrameOfReferenceMode"></member><member name="M:FlightCamera.ActivateUpdate"><summary>Enables mouse control of the camera.</summary></member><member name="M:FlightCamera.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:FlightCamera.BroadcastMessage(string,object)"></member><member name="M:FlightCamera.BroadcastMessage(string)"></member><member name="M:FlightCamera.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:FlightCamera.CancelInvoke"></member><member name="M:FlightCamera.CancelInvoke(string)"></member><member name="M:FlightCamera.CompareTag(string)"></member><member name="M:FlightCamera.DeactivateUpdate"><summary>Disables mouse control of the camera.</summary></member><member name="M:FlightCamera.DisableCamera"></member><member name="M:FlightCamera.EnableCamera"></member><member name="M:FlightCamera.Equals(object)"></member><member name="M:FlightCamera.Finalize"></member><member name="M:FlightCamera.GetCameraFoR(FoRModes)"></member><member name="M:FlightCamera.GetCameraTransform"></member><member name="M:FlightCamera.GetComponent(System.Type)"></member><member name="M:FlightCamera.GetComponent"></member><member name="M:FlightCamera.GetComponent(string)"></member><member name="M:FlightCamera.GetComponentInChildren(System.Type)"></member><member name="M:FlightCamera.GetComponentInChildren"></member><member name="M:FlightCamera.GetComponentInParent(System.Type)"></member><member name="M:FlightCamera.GetComponentInParent"></member><member name="M:FlightCamera.GetComponents(System.Type)"></member><member name="M:FlightCamera.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:FlightCamera.GetComponents(List)"></member><member name="M:FlightCamera.GetComponents"></member><member name="M:FlightCamera.GetComponentsInChildren(System.Type)"></member><member name="M:FlightCamera.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:FlightCamera.GetComponentsInChildren(System.Boolean)"></member><member name="M:FlightCamera.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:FlightCamera.GetComponentsInChildren"></member><member name="M:FlightCamera.GetComponentsInChildren(List)"></member><member name="M:FlightCamera.GetComponentsInParent(System.Type)"></member><member name="M:FlightCamera.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:FlightCamera.GetComponentsInParent(System.Boolean)"></member><member name="M:FlightCamera.GetComponentsInParent(System.Boolean,List)"></member><member name="M:FlightCamera.GetComponentsInParent"></member><member name="M:FlightCamera.GetHashCode"></member><member name="M:FlightCamera.GetInstanceID"></member><member name="M:FlightCamera.getPitch"></member><member name="M:FlightCamera.GetPivot"></member><member name="M:FlightCamera.getReferenceFrame"></member><member name="M:FlightCamera.GetType"></member><member name="M:FlightCamera.getYaw"></member><member name="M:FlightCamera.IKSPCamera.get_enabled"></member><member name="M:FlightCamera.Invoke(string,System.Single)"></member><member name="M:FlightCamera.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:FlightCamera.IsInvoking(string)"></member><member name="M:FlightCamera.IsInvoking"></member><member name="M:FlightCamera.MemberwiseClone"></member><member name="M:FlightCamera.OnNavigatorHandoff"></member><member name="M:FlightCamera.OnNavigatorRequestControl"></member><member name="M:FlightCamera.OnNavigatorTakeOver(Callback)"></member><member name="M:FlightCamera.ResetFoV"></member><member name="M:FlightCamera.ResumeFoV"></member><member name="M:FlightCamera.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:FlightCamera.SendMessage(string,object)"></member><member name="M:FlightCamera.SendMessage(string)"></member><member name="M:FlightCamera.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:FlightCamera.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:FlightCamera.SendMessageUpwards(string,object)"></member><member name="M:FlightCamera.SendMessageUpwards(string)"></member><member name="M:FlightCamera.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:FlightCamera.SetCamCoordsFromPosition(UnityEngine.Vector3)"></member><member name="M:FlightCamera.SetDefaultFoV"></member><member name="M:FlightCamera.SetDistance(System.Single)"></member><member name="M:FlightCamera.SetDistanceImmediate(System.Single)"></member><member name="M:FlightCamera.SetFoV(System.Single)"></member><member name="M:FlightCamera.setMode(FlightCamera+Modes)"></member><member name="M:FlightCamera.setModeImmediate(FlightCamera+Modes)"></member><member name="M:FlightCamera.SetNextMode"></member><member name="M:FlightCamera.setTarget(UnityEngine.Transform)"></member><member name="M:FlightCamera.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:FlightCamera.StartCoroutine(string,object)"></member><member name="M:FlightCamera.StartCoroutine(string)"></member><member name="M:FlightCamera.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:FlightCamera.StopAllCoroutines"></member><member name="M:FlightCamera.StopCoroutine(string)"></member><member name="M:FlightCamera.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:FlightCamera.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:FlightCamera.ToString"></member><member name="M:FlightCamera.GetAutoModeForVessel(Vessel)"></member><member name="M:FlightCamera.SetMode(FlightCamera+Modes)"></member><member name="M:FlightCamera.SetModeImmediate(FlightCamera+Modes)"></member><member name="M:FlightCamera.SetTarget(UnityEngine.Transform)"></member><member name="M:FlightCamera.#ctor"></member><member name="T:FlightCtrlState"><summary>A FlightCtrlState is a snapshot of the state of all control inputs to a vessel at a given instant in time. See FlightInputHandler.state and Vessel.OnFlyByWire.</summary></member><member name="F:FlightCtrlState.fastThrottle"><summary>Unused?</summary></member><member name="F:FlightCtrlState.gearDown"><summary>Unused? Landing gear are lowered by sending an Event.</summary></member><member name="F:FlightCtrlState.gearUp"><summary>Unused? Landing gear are raised by sending an Event.</summary></member><member name="F:FlightCtrlState.headlight"><summary>Presumably, whether the EVA headlight is turned on.</summary></member><member name="F:FlightCtrlState.killRot"><summary>Whether SAS is turned on.</summary></member><member name="F:FlightCtrlState.mainThrottle"><summary>The throttle setting; this must be between 0 and 1.</summary></member><member name="F:FlightCtrlState.pitch"><summary>The pitch control input; this must be between -1 and 1.</summary></member><member name="F:FlightCtrlState.pitchTrim"><summary>Presumably, the pitch trim setting, i.e., the pitch input that will be given if no other input is given.</summary></member><member name="F:FlightCtrlState.roll"><summary>The roll control input; this must be between -1 and 1.</summary></member><member name="F:FlightCtrlState.rollTrim"><summary>Presumably, the roll trim setting, i.e., the roll input that will be given if no other input is given.</summary></member><member name="F:FlightCtrlState.wheelSteer"></member><member name="F:FlightCtrlState.wheelSteerTrim"></member><member name="F:FlightCtrlState.wheelThrottle"></member><member name="F:FlightCtrlState.wheelThrottleTrim"></member><member name="F:FlightCtrlState.X"><summary>The RCS x-axis control input.</summary></member><member name="F:FlightCtrlState.Y"><summary>The RCS y-axis control input.</summary></member><member name="F:FlightCtrlState.yaw"><summary>The yaw control input; this must be between -1 and 1.</summary></member><member name="F:FlightCtrlState.yawTrim"><summary>Presumably, the yaw trim input; i.e., the yaw input that will be given if no other input is given.</summary></member><member name="F:FlightCtrlState.Z"><summary>The RCS z-axis control input.</summary></member><member name="P:FlightCtrlState.isIdle"></member><member name="P:FlightCtrlState.isNeutral"><summary>Presumably, whether this flight control represents "neutral" controls, i.e., no input and zero throttle.</summary></member><member name="M:FlightCtrlState.CopyFrom(FlightCtrlState)"><summary>Presumably, copies the state of the FlightCtrlState st into this FlightCtrlState object.</summary><param name="st"/></member><member name="M:FlightCtrlState.Equals(object)"></member><member name="M:FlightCtrlState.Finalize"></member><member name="M:FlightCtrlState.GetHashCode"></member><member name="M:FlightCtrlState.GetPYR"></member><member name="M:FlightCtrlState.GetType"></member><member name="M:FlightCtrlState.GetWheels"></member><member name="M:FlightCtrlState.GetXYZ"></member><member name="M:FlightCtrlState.Load(ConfigNode)"></member><member name="M:FlightCtrlState.MemberwiseClone"></member><member name="M:FlightCtrlState.Neutralize"></member><member name="M:FlightCtrlState.NeutralizeAll"></member><member name="M:FlightCtrlState.NeutralizeStick"></member><member name="M:FlightCtrlState.ResetTrim"></member><member name="M:FlightCtrlState.Save(ConfigNode)"></member><member name="M:FlightCtrlState.ToString"></member><member name="M:FlightCtrlState.#ctor"></member><member name="T:FlightGlobals"><summary>FlightGlobals contains lists of all CelestialBodies and Vessels in the game.  It also provides static utility functions for computing the atmospheric and gravitational properties of CelestialBodies.</summary></member><member name="F:FlightGlobals.activeVessel"></member><member name="F:FlightGlobals.bodies"></member><member name="F:FlightGlobals.mainCameraRef"></member><member name="F:FlightGlobals.srfAttachStiffNess"></member><member name="F:FlightGlobals.stackAttachStiffNess"></member><member name="F:FlightGlobals.vessels"></member><member name="F:FlightGlobals.vesselTargetDelta"></member><member name="F:FlightGlobals.vesselTargetDirection"></member><member name="F:FlightGlobals.vesselTargetTransform"></member><member name="F:FlightGlobals.camera_altitude"></member><member name="F:FlightGlobals.camera_position"></member><member name="F:FlightGlobals.currentMainBody"><summary>The mainBody of the active vessel.</summary></member><member name="F:FlightGlobals.FoRMode"></member><member name="F:FlightGlobals.overrideOrbit"></member><member name="F:FlightGlobals.physicalObjects"></member><member name="F:FlightGlobals.ready"></member><member name="F:FlightGlobals.ship_dns"></member><member name="F:FlightGlobals.ship_heading"></member><member name="F:FlightGlobals.ship_orientation"></member><member name="F:FlightGlobals.ship_orientation_offset"></member><member name="F:FlightGlobals.ship_temp"></member><member name="F:FlightGlobals.ship_tgtSpeed"></member><member name="F:FlightGlobals.ship_tgtVelocity"></member><member name="F:FlightGlobals.warpDriveActive"></member><member name="P:FlightGlobals.enabled"></member><member name="P:FlightGlobals.gameObject"></member><member name="P:FlightGlobals.hideFlags"></member><member name="P:FlightGlobals.isActiveAndEnabled"></member><member name="P:FlightGlobals.name"></member><member name="P:FlightGlobals.tag"></member><member name="P:FlightGlobals.transform"></member><member name="P:FlightGlobals.useGUILayout"></member><member name="P:FlightGlobals.VesselTarget"><summary>The currently selected target vessel, celestial body, or docking node. If no target is selected, this is null.</summary></member><member name="P:FlightGlobals.vesselTargetMode"></member><member name="P:FlightGlobals.activeTarget"></member><member name="P:FlightGlobals.ActiveVessel"><summary>The vessel the player is currently controlling.</summary></member><member name="P:FlightGlobals.Bodies"><summary>A list of all CelestialBodies in the universe. Contents in 0.18.2:</summary><para>Bodies[0] = Sun</para><para>Bodies[1] = Kerbin</para><para>Bodies[2] = Mun</para><para>Bodies[3] = Minmus</para><para>Bodies[4] = Moho</para><para>Bodies[5] = Eve</para><para>Bodies[6] = Dun</para><para>Bodies[7] = Ike</para><para>Bodies[8] = Jool</para><para>Bodies[9] = Laythe</para><para>Bodies[10] = Vall</para><para>Bodies[11] = Bop</para><para>Bodies[12] = Tylo</para><para>Bodies[13] = Gilly</para><para>Bodies[14] = Pol</para><para>Bodies[15] = Dres</para><para>Bodies[16] = Eeloo</para></member><member name="P:FlightGlobals.DragMultiplier"><summary>The KSP formula for the drag force on a part is (1/2) * DragMultiplier * part.mass * part.mass_drag * airspeed^2</summary></member><member name="P:FlightGlobals.fetch"><summary>Use this FlightGlobals instance to access non-static members of FlightGlobals. For example, the current target is FlightGlobals.fetch.VesselTarget.</summary></member><member name="P:FlightGlobals.RefFrameIsRotating"><summary>Whether KSP is doing its computations in an inertial reference frame, or the reference frame that  rotates with the current dominant celestial body.</summary></member><member name="P:FlightGlobals.ship_acceleration"></member><member name="P:FlightGlobals.ship_altitude"></member><member name="P:FlightGlobals.ship_angularMomentum"></member><member name="P:FlightGlobals.ship_angularVelocity"></member><member name="P:FlightGlobals.ship_CoM"></member><member name="P:FlightGlobals.ship_geeForce"></member><member name="P:FlightGlobals.ship_latitude"></member><member name="P:FlightGlobals.ship_longitude"></member><member name="P:FlightGlobals.ship_MOI"></member><member name="P:FlightGlobals.ship_obtSpeed"></member><member name="P:FlightGlobals.ship_obtVelocity"></member><member name="P:FlightGlobals.ship_orbit"></member><member name="P:FlightGlobals.ship_position"></member><member name="P:FlightGlobals.ship_rotation"></member><member name="P:FlightGlobals.ship_srfSpeed"></member><member name="P:FlightGlobals.ship_srfVelocity"></member><member name="P:FlightGlobals.ship_stP"></member><member name="P:FlightGlobals.ship_upAxis"></member><member name="P:FlightGlobals.ship_velocity"></member><member name="P:FlightGlobals.ship_verticalSpeed"></member><member name="P:FlightGlobals.speedDisplayMode"></member><member name="P:FlightGlobals.SrfAttachStiffNess"></member><member name="P:FlightGlobals.StackAttachStiffNess"></member><member name="P:FlightGlobals.upAxis"><summary>The normalized vector from the active vessel mainBody center to the vessel position.</summary></member><member name="P:FlightGlobals.vacuumTemperature"></member><member name="P:FlightGlobals.Vessels"><summary>A list of all the Vessels that currently exist</summary></member><member name="M:FlightGlobals.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:FlightGlobals.BroadcastMessage(string,object)"></member><member name="M:FlightGlobals.BroadcastMessage(string)"></member><member name="M:FlightGlobals.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:FlightGlobals.CancelInvoke"></member><member name="M:FlightGlobals.CancelInvoke(string)"></member><member name="M:FlightGlobals.CompareTag(string)"></member><member name="M:FlightGlobals.Equals(object)"></member><member name="M:FlightGlobals.Finalize"></member><member name="M:FlightGlobals.GetComponent(System.Type)"></member><member name="M:FlightGlobals.GetComponent"></member><member name="M:FlightGlobals.GetComponent(string)"></member><member name="M:FlightGlobals.GetComponentInChildren(System.Type)"></member><member name="M:FlightGlobals.GetComponentInChildren"></member><member name="M:FlightGlobals.GetComponentInParent(System.Type)"></member><member name="M:FlightGlobals.GetComponentInParent"></member><member name="M:FlightGlobals.GetComponents(System.Type)"></member><member name="M:FlightGlobals.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:FlightGlobals.GetComponents(List)"></member><member name="M:FlightGlobals.GetComponents"></member><member name="M:FlightGlobals.GetComponentsInChildren(System.Type)"></member><member name="M:FlightGlobals.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:FlightGlobals.GetComponentsInChildren(System.Boolean)"></member><member name="M:FlightGlobals.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:FlightGlobals.GetComponentsInChildren"></member><member name="M:FlightGlobals.GetComponentsInChildren(List)"></member><member name="M:FlightGlobals.GetComponentsInParent(System.Type)"></member><member name="M:FlightGlobals.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:FlightGlobals.GetComponentsInParent(System.Boolean)"></member><member name="M:FlightGlobals.GetComponentsInParent(System.Boolean,List)"></member><member name="M:FlightGlobals.GetComponentsInParent"></member><member name="M:FlightGlobals.GetHashCode"></member><member name="M:FlightGlobals.GetInstanceID"></member><member name="M:FlightGlobals.GetType"></member><member name="M:FlightGlobals.Invoke(string,System.Single)"></member><member name="M:FlightGlobals.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:FlightGlobals.IsInvoking(string)"></member><member name="M:FlightGlobals.IsInvoking"></member><member name="M:FlightGlobals.MemberwiseClone"></member><member name="M:FlightGlobals.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:FlightGlobals.SendMessage(string,object)"></member><member name="M:FlightGlobals.SendMessage(string)"></member><member name="M:FlightGlobals.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:FlightGlobals.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:FlightGlobals.SendMessageUpwards(string,object)"></member><member name="M:FlightGlobals.SendMessageUpwards(string)"></member><member name="M:FlightGlobals.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:FlightGlobals.SetShipOrbit(System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)"></member><member name="M:FlightGlobals.SetVesselTarget(ITargetable)"><summary>Sets the currently selected target vessel, celestial body, or docking node</summary><param name="tgt">The Vessel, CelestialBody, or ModuleDockingNode to target</param></member><member name="M:FlightGlobals.Start"></member><member name="M:FlightGlobals.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:FlightGlobals.StartCoroutine(string,object)"></member><member name="M:FlightGlobals.StartCoroutine(string)"></member><member name="M:FlightGlobals.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:FlightGlobals.StopAllCoroutines"></member><member name="M:FlightGlobals.StopCoroutine(string)"></member><member name="M:FlightGlobals.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:FlightGlobals.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:FlightGlobals.ToString"></member><member name="M:FlightGlobals.addPhysicalObject(UnityEngine.GameObject)"></member><member name="M:FlightGlobals.ClearToSave"></member><member name="M:FlightGlobals.CycleSpeedModes"></member><member name="M:FlightGlobals.FindNearestControllableVessel(Vessel)"></member><member name="M:FlightGlobals.FindNearestVesselWhere(Vector3d,System.Func)"></member><member name="M:FlightGlobals.FindPartByID(System.UInt32)"></member><member name="M:FlightGlobals.FindProtoPartByID(System.UInt32)"></member><member name="M:FlightGlobals.ForceSetActiveVessel(Vessel)"></member><member name="M:FlightGlobals.getAltitudeAtPos(Vector3d)"><summary>The altitude above the sea level of the current main body of the given world space position.</summary><param name="position">World space position</param><returns>Altitude above sea level</returns></member><member name="M:FlightGlobals.getAltitudeAtPos(UnityEngine.Vector3)"><summary>The altitude above the sea level of the current main body of the given world space position.</summary><param name="position">World space position</param><returns>Altitude above sea level</returns></member><member name="M:FlightGlobals.getAltitudeAtPos(Vector3d,CelestialBody)"><summary>The altitude above the sea level of the given body of the given world space position.</summary><param name="position">World space position</param><param name="body">The body in question</param><returns>Altitude above sea level</returns></member><member name="M:FlightGlobals.getAtmDensity(System.Double,System.Double,CelestialBody)"></member><member name="M:FlightGlobals.getAtmDensity(System.Double)"><summary>Converts an atmospheric pressure into an atmospheric density. Atmospheric density is what appears in the KSP drag equation. This function seems to just multiply the input by 1.2230948554874</summary><param name="pressure">Use the output of getStaticPressure</param><returns>An atmospheric density, suitable for use in calculating drag.</returns></member><member name="M:FlightGlobals.GetBodyIndex(CelestialBody)"><summary>Return the index of the specified body in the Bodies array.</summary></member><member name="M:FlightGlobals.getCentrifugalAcc(Vector3d,CelestialBody)"></member><member name="M:FlightGlobals.getCoriolisAcc(Vector3d,CelestialBody)"></member><member name="M:FlightGlobals.GetDisplaySpeed"></member><member name="M:FlightGlobals.GetDisplayVelocity"></member><member name="M:FlightGlobals.getExternalTemperature"></member><member name="M:FlightGlobals.getExternalTemperature(System.Double,CelestialBody)"></member><member name="M:FlightGlobals.getExternalTemperature(Vector3d,CelestialBody)"></member><member name="M:FlightGlobals.getExternalTemperature(Vector3d)"><summary>Finds the temperature at a given world space position.</summary><param name="pos">World space position</param><returns>Temperature</returns></member><member name="M:FlightGlobals.getExternalTemperature(System.Single,CelestialBody)"><summary>Finds the temperature at a given altitude above a given body.</summary><param name="altitude">An altitude (in meters?)</param><param name="body">The body of interest</param><returns>Temperture</returns></member><member name="M:FlightGlobals.GetFoR(FoRModes)"></member><member name="M:FlightGlobals.GetFoR(FoRModes,UnityEngine.Transform)"></member><member name="M:FlightGlobals.GetFoR(FoRModes,UnityEngine.Transform,Orbit)"></member><member name="M:FlightGlobals.getGeeForceAtPosition(Vector3d)"><summary>Returns the gravitational *acceleration* vector at a given position. Contrary to its name, it does *not* return force.</summary><param name="pos">World space position</param><returns>Gravitational acceleration vector</returns></member><member name="M:FlightGlobals.getGeeForceAtPosition(Vector3d,CelestialBody)"></member><member name="M:FlightGlobals.GetHomeBody"><summary>Return a reference to the celestial body where the space center is.</summary></member><member name="M:FlightGlobals.GetHomeBodyIndex"><summary>Unsurprisingly, this return the index of the home body into the Bodies array.</summary></member><member name="M:FlightGlobals.GetHomeBodyName"><summary>The name of the home body, without any prefixes of sort.</summary></member><member name="M:FlightGlobals.getMainBody(Vector3d)"><summary>Returns the body whose sphere of influence contains a given position?</summary><param name="refPos">World space position?</param><returns/></member><member name="M:FlightGlobals.getMainBody"><summary>Returns the current dominant body?</summary><returns/></member><member name="M:FlightGlobals.GetNotClearToSaveStatusReason(ClearToSaveStatus,string)"></member><member name="M:FlightGlobals.GetSqrAltitude(Vector3d,CelestialBody)"></member><member name="M:FlightGlobals.getStaticPressure(System.Double,CelestialBody)"><summary>Returns the atmospheric pressure at a given altitude above a given body</summary><param name="altitude">Altitude in meters</param><param name="body">The body in question</param><returns>Atmospheric pressure, in units of Kerbin's atmospheric pressure at sea level</returns></member><member name="M:FlightGlobals.getStaticPressure(Vector3d)"><summary>Returns the atmospheric pressure at a given position. Feed the output of this function into getAtmDensity to get the atmopsheric density.</summary><param name="position">World space position</param><returns>Atmospheric pressure, in units of Kerbin's atmospheric pressure at sea level</returns></member><member name="M:FlightGlobals.getStaticPressure(Vector3d,CelestialBody)"><summary>Returns the atmospheric pressure of a given body's atmopshere at a given position</summary><param name="position">World space position</param><param name="body">The body in question</param><returns>Atmospheric pressure, in units of Kerbin's atmospheric pressure at sea level</returns></member><member name="M:FlightGlobals.getStaticPressure"><summary>Returns the current atmospheric pressure?</summary><returns>Atmospheric pressure, in units of Kerbin's atmospheric pressure at sea level</returns></member><member name="M:FlightGlobals.getUpAxis"><summary>Return the normalized vector from the active vessel mainBody center to the active vessel position.</summary></member><member name="M:FlightGlobals.getUpAxis(Vector3d)"><summary>Return the normalized vector from the active vessel mainBody center to the specified position.</summary></member><member name="M:FlightGlobals.getUpAxis(CelestialBody,Vector3d)"><summary>Return the normalized vector from the specified body center to the specified position.</summary></member><member name="M:FlightGlobals.removePhysicalObject(UnityEngine.GameObject)"></member><member name="M:FlightGlobals.SetActiveVessel(Vessel)"></member><member name="M:FlightGlobals.SetSpeedMode(FlightGlobals+SpeedDisplayModes)"></member><member name="M:FlightGlobals.#ctor"></member><member name="T:FlightInputHandler"><summary>FlightInputHandler stores some global information about the control of the current active vessel.</summary></member><member name="F:FlightInputHandler.hasFocus"></member><member name="F:FlightInputHandler.inputGaugeRenderers"><summary>Pointers to the pitch/yaw/roll gauges that slide on the bottom left of the flight UI. Possibly broken in 1.1</summary></member><member name="F:FlightInputHandler.precisionMode"><summary>Whether precision mode is engaged. Can be toggled by setting TRUE/FALSE (does not change the colors on the inputGaugeRenders above automatically!)</summary></member><member name="F:FlightInputHandler.rcsDeadZone"></member><member name="F:FlightInputHandler.rcslock"><summary>Whether RCS is enabled.</summary></member><member name="F:FlightInputHandler.stageLock"><summary>Presumably, whether staging has been locked via Alt-L.</summary></member><member name="F:FlightInputHandler.throttleResponsiveness"></member><member name="F:FlightInputHandler.currentTarget"></member><member name="F:FlightInputHandler.fetch"><summary>Use this FlightInputHandler instance to access non-static members of the class.</summary></member><member name="F:FlightInputHandler.OnFlyByWire"></member><member name="F:FlightInputHandler.SPACENAV_USE_AS_FLIGHT_CONTROL"></member><member name="F:FlightInputHandler.state"><summary>The FlightCtrlState that represents player input. You can change the on-screen throttle by setting FlightCtrlState.state.mainThrottle.</summary></member><member name="P:FlightInputHandler.enabled"></member><member name="P:FlightInputHandler.gameObject"></member><member name="P:FlightInputHandler.hideFlags"></member><member name="P:FlightInputHandler.isActiveAndEnabled"></member><member name="P:FlightInputHandler.name"></member><member name="P:FlightInputHandler.tag"></member><member name="P:FlightInputHandler.transform"></member><member name="P:FlightInputHandler.useGUILayout"></member><member name="P:FlightInputHandler.RCSLock"><summary>Whether RCS is enabled.</summary></member><member name="M:FlightInputHandler.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:FlightInputHandler.BroadcastMessage(string,object)"></member><member name="M:FlightInputHandler.BroadcastMessage(string)"></member><member name="M:FlightInputHandler.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:FlightInputHandler.CancelInvoke"></member><member name="M:FlightInputHandler.CancelInvoke(string)"></member><member name="M:FlightInputHandler.CompareTag(string)"></member><member name="M:FlightInputHandler.Equals(object)"></member><member name="M:FlightInputHandler.Finalize"></member><member name="M:FlightInputHandler.GetComponent(System.Type)"></member><member name="M:FlightInputHandler.GetComponent"></member><member name="M:FlightInputHandler.GetComponent(string)"></member><member name="M:FlightInputHandler.GetComponentInChildren(System.Type)"></member><member name="M:FlightInputHandler.GetComponentInChildren"></member><member name="M:FlightInputHandler.GetComponentInParent(System.Type)"></member><member name="M:FlightInputHandler.GetComponentInParent"></member><member name="M:FlightInputHandler.GetComponents(System.Type)"></member><member name="M:FlightInputHandler.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:FlightInputHandler.GetComponents(List)"></member><member name="M:FlightInputHandler.GetComponents"></member><member name="M:FlightInputHandler.GetComponentsInChildren(System.Type)"></member><member name="M:FlightInputHandler.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:FlightInputHandler.GetComponentsInChildren(System.Boolean)"></member><member name="M:FlightInputHandler.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:FlightInputHandler.GetComponentsInChildren"></member><member name="M:FlightInputHandler.GetComponentsInChildren(List)"></member><member name="M:FlightInputHandler.GetComponentsInParent(System.Type)"></member><member name="M:FlightInputHandler.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:FlightInputHandler.GetComponentsInParent(System.Boolean)"></member><member name="M:FlightInputHandler.GetComponentsInParent(System.Boolean,List)"></member><member name="M:FlightInputHandler.GetComponentsInParent"></member><member name="M:FlightInputHandler.GetHashCode"></member><member name="M:FlightInputHandler.GetInstanceID"></member><member name="M:FlightInputHandler.GetType"></member><member name="M:FlightInputHandler.Invoke(string,System.Single)"></member><member name="M:FlightInputHandler.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:FlightInputHandler.IsInvoking(string)"></member><member name="M:FlightInputHandler.IsInvoking"></member><member name="M:FlightInputHandler.MemberwiseClone"></member><member name="M:FlightInputHandler.OnDestroy"></member><member name="M:FlightInputHandler.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:FlightInputHandler.SendMessage(string,object)"></member><member name="M:FlightInputHandler.SendMessage(string)"></member><member name="M:FlightInputHandler.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:FlightInputHandler.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:FlightInputHandler.SendMessageUpwards(string,object)"></member><member name="M:FlightInputHandler.SendMessageUpwards(string)"></member><member name="M:FlightInputHandler.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:FlightInputHandler.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:FlightInputHandler.StartCoroutine(string,object)"></member><member name="M:FlightInputHandler.StartCoroutine(string)"></member><member name="M:FlightInputHandler.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:FlightInputHandler.StopAllCoroutines"></member><member name="M:FlightInputHandler.StopCoroutine(string)"></member><member name="M:FlightInputHandler.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:FlightInputHandler.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:FlightInputHandler.ToString"></member><member name="M:FlightInputHandler.ResumeVesselCtrlState(Vessel)"></member><member name="M:FlightInputHandler.SetLaunchCtrlState"></member><member name="M:FlightInputHandler.SetNeutralControls"><summary>Call this to set neutral controls; in particular this wil turn off the throttle.</summary></member><member name="M:FlightInputHandler.#ctor"></member><member name="T:FlightUIController"><summary>THIS CLASS IS DEPRECIATED AND NOT USED IN KSP 1.1 AND NEWER

This is the old Flight UI class that was used in KSP 1.0.5 and older, the GUI re-vamp in KSP 1.1 renders this class unused.</summary></member><member name="F:FlightUIController.abort"></member><member name="F:FlightUIController.alt"></member><member name="F:FlightUIController.atmos"></member><member name="F:FlightUIController.brakes"></member><member name="F:FlightUIController.displayUT"></member><member name="F:FlightUIController.dockPitch"></member><member name="F:FlightUIController.dockRoll"></member><member name="F:FlightUIController.dockYaw"></member><member name="F:FlightUIController.gears"></member><member name="F:FlightUIController.gee"></member><member name="F:FlightUIController.lights"></member><member name="F:FlightUIController.Lin"></member><member name="F:FlightUIController.linX"></member><member name="F:FlightUIController.linY"></member><member name="F:FlightUIController.linZ"></member><member name="F:FlightUIController.met"></member><member name="F:FlightUIController.ovrThr"></member><member name="F:FlightUIController.rcs"></member><member name="F:FlightUIController.Rot"></member><member name="F:FlightUIController.SAS"></member><member name="F:FlightUIController.sinkRate"></member><member name="F:FlightUIController.spdCaption"></member><member name="F:FlightUIController.spdModeToggleBtn"></member><member name="F:FlightUIController.speed"></member><member name="F:FlightUIController.stage"></member><member name="F:FlightUIController.stagingLed"></member><member name="F:FlightUIController.stgPitch"></member><member name="F:FlightUIController.stgRoll"></member><member name="F:FlightUIController.stgYaw"></member><member name="F:FlightUIController.thr"></member><member name="F:FlightUIController.timeModeBtn"></member><member name="F:FlightUIController.vs"></member><member name="F:FlightUIController.fetch"></member><member name="F:FlightUIController.speedDisplayMode"><summary>Use FlightGlobals.SpeedDisplayModes instead.</summary></member><member name="P:FlightUIController.enabled"></member><member name="P:FlightUIController.gameObject"></member><member name="P:FlightUIController.hideFlags"></member><member name="P:FlightUIController.isActiveAndEnabled"></member><member name="P:FlightUIController.name"></member><member name="P:FlightUIController.tag"></member><member name="P:FlightUIController.transform"></member><member name="P:FlightUIController.useGUILayout"></member><member name="M:FlightUIController.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:FlightUIController.BroadcastMessage(string,object)"></member><member name="M:FlightUIController.BroadcastMessage(string)"></member><member name="M:FlightUIController.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:FlightUIController.CancelInvoke"></member><member name="M:FlightUIController.CancelInvoke(string)"></member><member name="M:FlightUIController.CompareTag(string)"></member><member name="M:FlightUIController.Equals(object)"></member><member name="M:FlightUIController.Finalize"></member><member name="M:FlightUIController.GetComponent(System.Type)"></member><member name="M:FlightUIController.GetComponent"></member><member name="M:FlightUIController.GetComponent(string)"></member><member name="M:FlightUIController.GetComponentInChildren(System.Type)"></member><member name="M:FlightUIController.GetComponentInChildren"></member><member name="M:FlightUIController.GetComponentInParent(System.Type)"></member><member name="M:FlightUIController.GetComponentInParent"></member><member name="M:FlightUIController.GetComponents(System.Type)"></member><member name="M:FlightUIController.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:FlightUIController.GetComponents(List)"></member><member name="M:FlightUIController.GetComponents"></member><member name="M:FlightUIController.GetComponentsInChildren(System.Type)"></member><member name="M:FlightUIController.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:FlightUIController.GetComponentsInChildren(System.Boolean)"></member><member name="M:FlightUIController.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:FlightUIController.GetComponentsInChildren"></member><member name="M:FlightUIController.GetComponentsInChildren(List)"></member><member name="M:FlightUIController.GetComponentsInParent(System.Type)"></member><member name="M:FlightUIController.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:FlightUIController.GetComponentsInParent(System.Boolean)"></member><member name="M:FlightUIController.GetComponentsInParent(System.Boolean,List)"></member><member name="M:FlightUIController.GetComponentsInParent"></member><member name="M:FlightUIController.GetHashCode"></member><member name="M:FlightUIController.GetInstanceID"></member><member name="M:FlightUIController.GetType"></member><member name="M:FlightUIController.Invoke(string,System.Single)"></member><member name="M:FlightUIController.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:FlightUIController.IsInvoking(string)"></member><member name="M:FlightUIController.IsInvoking"></member><member name="M:FlightUIController.MemberwiseClone"></member><member name="M:FlightUIController.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:FlightUIController.SendMessage(string,object)"></member><member name="M:FlightUIController.SendMessage(string)"></member><member name="M:FlightUIController.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:FlightUIController.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:FlightUIController.SendMessageUpwards(string,object)"></member><member name="M:FlightUIController.SendMessageUpwards(string)"></member><member name="M:FlightUIController.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:FlightUIController.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:FlightUIController.StartCoroutine(string,object)"></member><member name="M:FlightUIController.StartCoroutine(string)"></member><member name="M:FlightUIController.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:FlightUIController.StopAllCoroutines"></member><member name="M:FlightUIController.StopCoroutine(string)"></member><member name="M:FlightUIController.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:FlightUIController.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:FlightUIController.ToString"></member><member name="M:FlightUIController.GetDisplaySpeed"></member><member name="M:FlightUIController.#ctor"></member><member name="T:FloatCurve"><summary>Represents a function of one variable. The function is interpolated from a given set of points, and optionally the tangents at those points can be specified.</summary></member><member name="P:FloatCurve.Curve"></member><member name="P:FloatCurve.maxTime"></member><member name="P:FloatCurve.minTime"></member><member name="M:FloatCurve.Add(System.Single,System.Single)"></member><member name="M:FloatCurve.Add(System.Single,System.Single,System.Single,System.Single)"></member><member name="M:FloatCurve.Equals(object)"></member><member name="M:FloatCurve.Evaluate(System.Single)"><summary>Evaluate the function at a given value of the input parameter.</summary><param name="time">The input parameter (not necessarily a time).</param><returns>The value of the function.</returns></member><member name="M:FloatCurve.Finalize"></member><member name="M:FloatCurve.FindMinMaxValue(float&amp;,float&amp;)"></member><member name="M:FloatCurve.FindMinMaxValue(float&amp;,float&amp;,float&amp;,float&amp;)"></member><member name="M:FloatCurve.GetHashCode"></member><member name="M:FloatCurve.GetType"></member><member name="M:FloatCurve.Load(ConfigNode)"></member><member name="M:FloatCurve.MemberwiseClone"></member><member name="M:FloatCurve.Save(ConfigNode)"></member><member name="M:FloatCurve.ToString"></member><member name="M:FloatCurve.#ctor"></member><member name="M:FloatCurve.#ctor(UnityEngine.Keyframe[])"></member><member name="T:FuelLine"><summary>Stock fuel lines are not yet PartModules, but are implemented through this class.</summary></member><member name="F:FuelLine.absorptiveConstant"></member><member name="F:FuelLine.ActivatesEvenIfDisconnected"></member><member name="F:FuelLine.aerodynamicArea"></member><member name="F:FuelLine.airlock"></member><member name="F:FuelLine.airstreamShields"></member><member name="F:FuelLine.analyticInternalInsulationFactor"></member><member name="F:FuelLine.analyticSkinInsulationFactor"></member><member name="F:FuelLine.angularDrag"></member><member name="F:FuelLine.angularDragByFI"></member><member name="F:FuelLine.atmDensity"></member><member name="F:FuelLine.attached"></member><member name="F:FuelLine.attachJoint"></member><member name="F:FuelLine.attachMethod"></member><member name="F:FuelLine.attachMode"></member><member name="F:FuelLine.attachNodes"></member><member name="F:FuelLine.attachRules"></member><member name="F:FuelLine.attPos"></member><member name="F:FuelLine.attPos0"></member><member name="F:FuelLine.attRotation"></member><member name="F:FuelLine.attRotation0"></member><member name="F:FuelLine.blackBodyRadiationAlphaMult"></member><member name="F:FuelLine.bodyLiftLocalPosition"></member><member name="F:FuelLine.bodyLiftLocalVector"></member><member name="F:FuelLine.bodyLiftMultiplier"></member><member name="F:FuelLine.bodyLiftScalar"></member><member name="F:FuelLine.boundsMultiplier"></member><member name="F:FuelLine.breakingForce"></member><member name="F:FuelLine.breakingTorque"></member><member name="F:FuelLine.buoyancy"></member><member name="F:FuelLine.buoyancyUseCubeNamed"></member><member name="F:FuelLine.buoyancyUseSine"></member><member name="F:FuelLine.CenterOfBuoyancy"></member><member name="F:FuelLine.CenterOfDisplacement"></member><member name="F:FuelLine.children"></member><member name="F:FuelLine.childStageOffset"></member><member name="F:FuelLine.collider"></member><member name="F:FuelLine.collisionEnhancer"></member><member name="F:FuelLine.CoLOffset"></member><member name="F:FuelLine.CoMOffset"></member><member name="F:FuelLine.connected"></member><member name="F:FuelLine.CoPOffset"></member><member name="F:FuelLine.craftID"></member><member name="F:FuelLine.crashTolerance"></member><member name="F:FuelLine.CrewCapacity"></member><member name="F:FuelLine.crewRespawnTime"></member><member name="F:FuelLine.crewTransferAvailable"></member><member name="F:FuelLine.currentCollisions"></member><member name="F:FuelLine.customPartData"></member><member name="F:FuelLine.defaultInverseStage"></member><member name="F:FuelLine.depth"></member><member name="F:FuelLine.direction"></member><member name="F:FuelLine.dragModel"></member><member name="F:FuelLine.dragReferenceVector"></member><member name="F:FuelLine.dragScalar"></member><member name="F:FuelLine.dragVector"></member><member name="F:FuelLine.dragVectorDir"></member><member name="F:FuelLine.dragVectorDirLocal"></member><member name="F:FuelLine.dragVectorMag"></member><member name="F:FuelLine.dragVectorSqrMag"></member><member name="F:FuelLine.dynamicPressurekPa"></member><member name="F:FuelLine.edgeHighlightThresholdMult"></member><member name="F:FuelLine.editorCollision"></member><member name="F:FuelLine.editorLinks"></member><member name="F:FuelLine.editorStarted"></member><member name="F:FuelLine.emissiveConstant"></member><member name="F:FuelLine.endCap"></member><member name="F:FuelLine.explosionPotential"></member><member name="F:FuelLine.exposedArea"></member><member name="F:FuelLine.flagURL"></member><member name="F:FuelLine.flightID"></member><member name="F:FuelLine.flowDirection"></member><member name="F:FuelLine.frozen"></member><member name="F:FuelLine.fuelCrossFeed"></member><member name="F:FuelLine.fuelLineOpen"></member><member name="F:FuelLine.fuelLookupTarget"></member><member name="F:FuelLine.fuelLookupTargets"></member><member name="F:FuelLine.fxGroups"></member><member name="F:FuelLine.gaugeThresholdMult"></member><member name="F:FuelLine.GroundContact"></member><member name="F:FuelLine.gTolerance"></member><member name="F:FuelLine.habitableVolume"></member><member name="F:FuelLine.hasHeiarchyModel"></member><member name="F:FuelLine.hasLiftModule"></member><member name="F:FuelLine.hatchObstructionCheckInwardDistance"></member><member name="F:FuelLine.hatchObstructionCheckInwardOffset"></member><member name="F:FuelLine.hatchObstructionCheckOutwardDistance"></member><member name="F:FuelLine.hatchObstructionCheckSphereRadius"></member><member name="F:FuelLine.heatConductivity"></member><member name="F:FuelLine.heatConvectiveConstant"></member><member name="F:FuelLine.highlightColor"></member><member name="F:FuelLine.highlighter"></member><member name="F:FuelLine.highlightType"></member><member name="F:FuelLine.initialVesselName"></member><member name="F:FuelLine.inStageIndex"></member><member name="F:FuelLine.internalModel"></member><member name="F:FuelLine.InternalModelName"></member><member name="F:FuelLine.inverseStage"></member><member name="F:FuelLine.isClone"></member><member name="F:FuelLine.isControlSource"></member><member name="F:FuelLine.isMirrored"></member><member name="F:FuelLine.isPersistent"></member><member name="F:FuelLine.lastFuelRequestId"></member><member name="F:FuelLine.launchID"></member><member name="F:FuelLine.line"></member><member name="F:FuelLine.machNumber"></member><member name="F:FuelLine.manualStageOffset"></member><member name="F:FuelLine.mass"></member><member name="F:FuelLine.maxDepth"></member><member name="F:FuelLine.maximum_drag"></member><member name="F:FuelLine.maxLength"></member><member name="F:FuelLine.maxTemp"></member><member name="F:FuelLine.minDepth"></member><member name="F:FuelLine.minimum_drag"></member><member name="F:FuelLine.mirrorAxis"></member><member name="F:FuelLine.mirrorRefAxis"></member><member name="F:FuelLine.mirrorVector"></member><member name="F:FuelLine.missionID"></member><member name="F:FuelLine.moduleSize"></member><member name="F:FuelLine.needPrefabMass"></member><member name="F:FuelLine.noAutoEVAAny"></member><member name="F:FuelLine.noAutoEVAMulti"></member><member name="F:FuelLine.NoCrossFeedNodeKey"></member><member name="F:FuelLine.OnEditorAttach"></member><member name="F:FuelLine.OnEditorDestroy"></member><member name="F:FuelLine.OnEditorDetach"></member><member name="F:FuelLine.OnJustAboutToBeDestroyed"></member><member name="F:FuelLine.orgPos"></member><member name="F:FuelLine.orgRot"></member><member name="F:FuelLine.originalStage"></member><member name="F:FuelLine.overrideSkillUpdate"></member><member name="F:FuelLine.overrideSkillUpdateModules"></member><member name="F:FuelLine.packed"></member><member name="F:FuelLine.parent"></member><member name="F:FuelLine.partBuoyancy"></member><member name="F:FuelLine.partInfo"></member><member name="F:FuelLine.partName"></member><member name="F:FuelLine.partTransform"></member><member name="F:FuelLine.PermanentGroundContact"></member><member name="F:FuelLine.physicalSignificance"></member><member name="F:FuelLine.PhysicsSignificance"></member><member name="F:FuelLine.potentialParent"></member><member name="F:FuelLine.prefabMass"></member><member name="F:FuelLine.prefabSize"></member><member name="F:FuelLine.protoModuleCrew"></member><member name="F:FuelLine.protoPartSnapshot"></member><member name="F:FuelLine.ptd"></member><member name="F:FuelLine.radiativeArea"></member><member name="F:FuelLine.radiatorCritical"></member><member name="F:FuelLine.radiatorHeadroom"></member><member name="F:FuelLine.radiatorMax"></member><member name="F:FuelLine.rb"></member><member name="F:FuelLine.rescaleFactor"></member><member name="F:FuelLine.resourceMass"></member><member name="F:FuelLine.resourceRequestRemainingThreshold"></member><member name="F:FuelLine.resourceTargets"></member><member name="F:FuelLine.resourceThermalMass"></member><member name="F:FuelLine.ResumeState"></member><member name="F:FuelLine.scaleFactor"></member><member name="F:FuelLine.separationIndex"></member><member name="F:FuelLine.skinExposedArea"></member><member name="F:FuelLine.skinExposedAreaFrac"></member><member name="F:FuelLine.skinExposedMassMult"></member><member name="F:FuelLine.skinInternalConductionMult"></member><member name="F:FuelLine.skinMassPerArea"></member><member name="F:FuelLine.skinMaxTemp"></member><member name="F:FuelLine.skinSkinConductionMult"></member><member name="F:FuelLine.skinTemperature"></member><member name="F:FuelLine.skinThermalMass"></member><member name="F:FuelLine.skinThermalMassModifier"></member><member name="F:FuelLine.skinThermalMassRecip"></member><member name="F:FuelLine.skinToInternalFlux"></member><member name="F:FuelLine.skinUnexposedExternalTemp"></member><member name="F:FuelLine.skinUnexposedMassMult"></member><member name="F:FuelLine.skinUnexposedTemperature"></member><member name="F:FuelLine.skipColliderIgnores"></member><member name="F:FuelLine.srfAttachNode"></member><member name="F:FuelLine.stackIcon"></member><member name="F:FuelLine.stackIconGrouping"></member><member name="F:FuelLine.stackPriThreshold"></member><member name="F:FuelLine.stackSymmetry"></member><member name="F:FuelLine.stageAfter"></member><member name="F:FuelLine.stageBefore"></member><member name="F:FuelLine.stageOffset"></member><member name="F:FuelLine.stagingIcon"></member><member name="F:FuelLine.stagingIconAlwaysShown"></member><member name="F:FuelLine.stagingOn"></member><member name="F:FuelLine.startCap"></member><member name="F:FuelLine.started"></member><member name="F:FuelLine.state"></member><member name="F:FuelLine.staticPressureAtm"></member><member name="F:FuelLine.submergedDragScalar"></member><member name="F:FuelLine.submergedDynamicPressurekPa"></member><member name="F:FuelLine.submergedLiftScalar"></member><member name="F:FuelLine.submergedPortion"></member><member name="F:FuelLine.surfaceAreas"></member><member name="F:FuelLine.symMethod"></member><member name="F:FuelLine.symmetryCounterparts"></member><member name="F:FuelLine.target"><summary>The part that can draw fuel through this fuel line. This fuel line in turn draws fuel from its parent.</summary></member><member name="F:FuelLine.targetAnchor"></member><member name="F:FuelLine.targetPosition"></member><member name="F:FuelLine.temperature"></member><member name="F:FuelLine.terrainCollider"></member><member name="F:FuelLine.thermalConductionFlux"></member><member name="F:FuelLine.thermalConvectionFlux"></member><member name="F:FuelLine.thermalExposedFlux"></member><member name="F:FuelLine.thermalExposedFluxPrevious"></member><member name="F:FuelLine.thermalInternalFlux"></member><member name="F:FuelLine.thermalInternalFluxPrevious"></member><member name="F:FuelLine.thermalMass"></member><member name="F:FuelLine.thermalMassModifier"></member><member name="F:FuelLine.thermalMassReciprocal"></member><member name="F:FuelLine.thermalRadiationFlux"></member><member name="F:FuelLine.thermalSkinFlux"></member><member name="F:FuelLine.thermalSkinFluxPrevious"></member><member name="F:FuelLine.topNode"></member><member name="F:FuelLine.vel"></member><member name="F:FuelLine.vessel"></member><member name="F:FuelLine.vesselType"></member><member name="F:FuelLine.waterAngularDragMultiplier"></member><member name="F:FuelLine.WaterContact"></member><member name="P:FuelLine.Actions"></member><member name="P:FuelLine.ClassID"></member><member name="P:FuelLine.ClassName"></member><member name="P:FuelLine.DragCubes"></member><member name="P:FuelLine.Effects"></member><member name="P:FuelLine.enabled"></member><member name="P:FuelLine.Events"></member><member name="P:FuelLine.Fields"></member><member name="P:FuelLine.gameObject"></member><member name="P:FuelLine.hasStagingIcon"></member><member name="P:FuelLine.hideFlags"></member><member name="P:FuelLine.HighlightActive"></member><member name="P:FuelLine.HighlightRendererCount"></member><member name="P:FuelLine.HighlightRenderers"></member><member name="P:FuelLine.isActiveAndEnabled"></member><member name="P:FuelLine.isAttachable"></member><member name="P:FuelLine.isAttached"></member><member name="P:FuelLine.isConnected"></member><member name="P:FuelLine.isControllable"></member><member name="P:FuelLine.Landed"></member><member name="P:FuelLine.localRoot"></member><member name="P:FuelLine.Modules"></member><member name="P:FuelLine.MouseOver"></member><member name="P:FuelLine.name"></member><member name="P:FuelLine.NoAutoEVA"></member><member name="P:FuelLine.orbit"></member><member name="P:FuelLine.PartValues"></member><member name="P:FuelLine.RecurseHighlight"></member><member name="P:FuelLine.Resources"></member><member name="P:FuelLine.Rigidbody"></member><member name="P:FuelLine.ShieldedFromAirstream"></member><member name="P:FuelLine.Splashed"></member><member name="P:FuelLine.State"></member><member name="P:FuelLine.tag"></member><member name="P:FuelLine.transform"></member><member name="P:FuelLine.useGUILayout"></member><member name="P:FuelLine.WCoM"></member><member name="M:FuelLine.activate(System.Int32,Vessel)"></member><member name="M:FuelLine.AddAttachNode(ConfigNode)"></member><member name="M:FuelLine.addChild(Part)"></member><member name="M:FuelLine.AddCrewmember(ProtoCrewMember)"></member><member name="M:FuelLine.AddCrewmemberAt(ProtoCrewMember,System.Int32)"></member><member name="M:FuelLine.AddExposedThermalFlux(System.Double)"></member><member name="M:FuelLine.AddInternalPart(ConfigNode)"></member><member name="M:FuelLine.AddModule(string)"></member><member name="M:FuelLine.AddModule(ConfigNode)"></member><member name="M:FuelLine.AddOnMouseDown(Part+OnActionDelegate)"></member><member name="M:FuelLine.AddOnMouseEnter(Part+OnActionDelegate)"></member><member name="M:FuelLine.AddOnMouseExit(Part+OnActionDelegate)"></member><member name="M:FuelLine.AddResource(ConfigNode)"></member><member name="M:FuelLine.AddShield(IAirstreamShield)"></member><member name="M:FuelLine.AddSkinThermalFlux(System.Double)"></member><member name="M:FuelLine.AddThermalFlux(System.Double)"></member><member name="M:FuelLine.AlreadyProcessedRequest(System.Int32)"></member><member name="M:FuelLine.BreakLine"></member><member name="M:FuelLine.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:FuelLine.BroadcastMessage(string,object)"></member><member name="M:FuelLine.BroadcastMessage(string)"></member><member name="M:FuelLine.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:FuelLine.CancelInvoke"></member><member name="M:FuelLine.CancelInvoke(string)"></member><member name="M:FuelLine.CheckCollision(UnityEngine.Collision)"></member><member name="M:FuelLine.checkLanded"></member><member name="M:FuelLine.checkPermanentLandedAt"></member><member name="M:FuelLine.checkSplashed"></member><member name="M:FuelLine.CheckTransferDialog"></member><member name="M:FuelLine.cleanReferencesFromOtherParts"></member><member name="M:FuelLine.CloseFuelLine"></member><member name="M:FuelLine.CompareTag(string)"></member><member name="M:FuelLine.Couple(Part)"></member><member name="M:FuelLine.CreateInternalModel"></member><member name="M:FuelLine.deactivate"></member><member name="M:FuelLine.decouple(System.Single)"></member><member name="M:FuelLine.DespawnIVA"></member><member name="M:FuelLine.Die"></member><member name="M:FuelLine.disconnect(System.Boolean)"></member><member name="M:FuelLine.DrainFuel(System.Single)"></member><member name="M:FuelLine.drawStats"></member><member name="M:FuelLine.Effect(string)"></member><member name="M:FuelLine.Effect(string,System.Single)"></member><member name="M:FuelLine.Equals(object)"></member><member name="M:FuelLine.explode"></member><member name="M:FuelLine.Finalize"></member><member name="M:FuelLine.findAttachNode(string)"></member><member name="M:FuelLine.findAttachNodeByPart(Part)"></member><member name="M:FuelLine.findAttachNodes(string)"></member><member name="M:FuelLine.FindChildPart(string)"></member><member name="M:FuelLine.FindChildPart(string,System.Boolean)"></member><member name="M:FuelLine.FindChildPart"></member><member name="M:FuelLine.FindChildPart(System.Boolean)"></member><member name="M:FuelLine.FindChildParts"></member><member name="M:FuelLine.FindChildParts(System.Boolean)"></member><member name="M:FuelLine.FindFuel(Part,System.Collections.Generic.List,System.UInt32)"></member><member name="M:FuelLine.FindFuel(Part,List&lt;Part&gt;,System.UInt32)"></member><member name="M:FuelLine.findFxGroup(string)"></member><member name="M:FuelLine.FindModelAnimator(string,string)"></member><member name="M:FuelLine.FindModelAnimators(string)"></member><member name="M:FuelLine.FindModelAnimators"></member><member name="M:FuelLine.FindModelComponent"></member><member name="M:FuelLine.FindModelComponent(string)"></member><member name="M:FuelLine.FindModelComponents"></member><member name="M:FuelLine.FindModelComponents(string)"></member><member name="M:FuelLine.FindModelTransform(string)"></member><member name="M:FuelLine.FindModelTransforms(string)"></member><member name="M:FuelLine.FindModuleImplementing"></member><member name="M:FuelLine.FindModulesImplementing"></member><member name="M:FuelLine.FindNonPhysicslessChildren(System.Collections.Generic.List)"></member><member name="M:FuelLine.FindNonPhysicslessParent"></member><member name="M:FuelLine.FindPartThroughNodes(Part,Part)"></member><member name="M:FuelLine.FindResource_StackPriority(Part,System.Collections.Generic.List,System.Int32,System.Double,System.Int32,System.Boolean,double&amp;,double&amp;,System.Collections.Generic.List,System.Boolean)"></member><member name="M:FuelLine.force_activate"></member><member name="M:FuelLine.freeze"></member><member name="M:FuelLine.GetComponent(System.Type)"></member><member name="M:FuelLine.GetComponent"></member><member name="M:FuelLine.GetComponent(string)"></member><member name="M:FuelLine.GetComponentInChildren(System.Type)"></member><member name="M:FuelLine.GetComponentInChildren"></member><member name="M:FuelLine.GetComponentInParent(System.Type)"></member><member name="M:FuelLine.GetComponentInParent"></member><member name="M:FuelLine.GetComponents(System.Type)"></member><member name="M:FuelLine.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:FuelLine.GetComponents(List)"></member><member name="M:FuelLine.GetComponents"></member><member name="M:FuelLine.GetComponentsInChildren(System.Type)"></member><member name="M:FuelLine.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:FuelLine.GetComponentsInChildren(System.Boolean)"></member><member name="M:FuelLine.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:FuelLine.GetComponentsInChildren"></member><member name="M:FuelLine.GetComponentsInChildren(List)"></member><member name="M:FuelLine.GetComponentsInParent(System.Type)"></member><member name="M:FuelLine.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:FuelLine.GetComponentsInParent(System.Boolean)"></member><member name="M:FuelLine.GetComponentsInParent(System.Boolean,List)"></member><member name="M:FuelLine.GetComponentsInParent"></member><member name="M:FuelLine.GetConnectedResources(System.Int32,ResourceFlowMode,System.Collections.Generic.List)"></member><member name="M:FuelLine.GetConnectedResources(System.Int32,ResourceFlowMode,System.Collections.Generic.List,double&amp;,double&amp;)"></member><member name="M:FuelLine.GetHashCode"></member><member name="M:FuelLine.GetInstanceID"></member><member name="M:FuelLine.GetModuleCosts(System.Single)"></member><member name="M:FuelLine.GetModuleMass(System.Single)"></member><member name="M:FuelLine.GetModuleSize(UnityEngine.Vector3)"></member><member name="M:FuelLine.GetPhysicslessChildMass"></member><member name="M:FuelLine.GetReferenceTransform"></member><member name="M:FuelLine.GetResourceMass"></member><member name="M:FuelLine.GetResourceMass(float&amp;)"></member><member name="M:FuelLine.GetResourceMass(double&amp;)"></member><member name="M:FuelLine.getSymmetryCounterPart(System.Int32)"></member><member name="M:FuelLine.GetType"></member><member name="M:FuelLine.HandleCollision(UnityEngine.Collision)"></member><member name="M:FuelLine.hasIndirectChild(Part)"></member><member name="M:FuelLine.hasIndirectParent(Part)"></member><member name="M:FuelLine.highlight(UnityEngine.Color)"></member><member name="M:FuelLine.highlightRecursive(UnityEngine.Color)"></member><member name="M:FuelLine.InitializeEffects"></member><member name="M:FuelLine.InitializeModules"></member><member name="M:FuelLine.Invoke(string,System.Single)"></member><member name="M:FuelLine.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:FuelLine.IsInvoking(string)"></member><member name="M:FuelLine.IsInvoking"></member><member name="M:FuelLine.isSymmetryCounterPart(Part)"></member><member name="M:FuelLine.LateUpdate"></member><member name="M:FuelLine.LoadEffects(ConfigNode)"></member><member name="M:FuelLine.LoadModule(ConfigNode,int&amp;)"></member><member name="M:FuelLine.MemberwiseClone"></member><member name="M:FuelLine.onActiveFixedUpdate"></member><member name="M:FuelLine.onActiveUpdate"></member><member name="M:FuelLine.onAttach(Part,System.Boolean)"></member><member name="M:FuelLine.onBackup"></member><member name="M:FuelLine.OnCollisionEnter(UnityEngine.Collision)"></member><member name="M:FuelLine.OnCollisionExit(UnityEngine.Collision)"></member><member name="M:FuelLine.OnCollisionStay(UnityEngine.Collision)"></member><member name="M:FuelLine.onCopy(Part,System.Boolean)"></member><member name="M:FuelLine.OnCopy(Part,System.Boolean)"></member><member name="M:FuelLine.onCtrlUpd(FlightCtrlState)"></member><member name="M:FuelLine.onDecouple(System.Single)"></member><member name="M:FuelLine.OnDelete"></member><member name="M:FuelLine.onDetach(System.Boolean)"></member><member name="M:FuelLine.onDisconnect"></member><member name="M:FuelLine.OnDrawStats"></member><member name="M:FuelLine.onEditorUpdate"></member><member name="M:FuelLine.onFlightStart"></member><member name="M:FuelLine.onFlightStartAtLaunchPad"></member><member name="M:FuelLine.onFlightStateLoad(System.Collections.Generic.Dictionary)"></member><member name="M:FuelLine.onFlightStateSave(System.Collections.Generic.Dictionary)"></member><member name="M:FuelLine.onGamePause"></member><member name="M:FuelLine.onGameResume"></member><member name="M:FuelLine.OnGetStats"></member><member name="M:FuelLine.onJointDisable"></member><member name="M:FuelLine.onJointReset"></member><member name="M:FuelLine.OnLiftOff"></member><member name="M:FuelLine.OnLoad"></member><member name="M:FuelLine.OnLoad(ConfigNode)"></member><member name="M:FuelLine.onPack"></member><member name="M:FuelLine.onPartActivate"></member><member name="M:FuelLine.onPartAttach(Part)"></member><member name="M:FuelLine.onPartAwake"></member><member name="M:FuelLine.onPartDeactivate"></member><member name="M:FuelLine.onPartDelete"></member><member name="M:FuelLine.onPartDestroy"></member><member name="M:FuelLine.onPartDetach"></member><member name="M:FuelLine.onPartExplode"></member><member name="M:FuelLine.onPartFixedUpdate"></member><member name="M:FuelLine.OnPartJointBreak(System.Single)"></member><member name="M:FuelLine.onPartLiftOff"></member><member name="M:FuelLine.onPartLoad"></member><member name="M:FuelLine.onPartSplashdown"></member><member name="M:FuelLine.onPartStart"></member><member name="M:FuelLine.onPartTouchdown"></member><member name="M:FuelLine.onPartUpdate"></member><member name="M:FuelLine.OnPointerClick(UnityEngine.EventSystems.PointerEventData)"></member><member name="M:FuelLine.OnSave(ConfigNode)"></member><member name="M:FuelLine.OnSplashDown"></member><member name="M:FuelLine.onStartComplete"></member><member name="M:FuelLine.OnTouchDown"></member><member name="M:FuelLine.onUnpack"></member><member name="M:FuelLine.Pack"></member><member name="M:FuelLine.PromoteToPhysicalPart"></member><member name="M:FuelLine.propagateControlUpdate(FlightCtrlState)"></member><member name="M:FuelLine.raycastTarget(UnityEngine.Vector3)"></member><member name="M:FuelLine.raycastTarget"></member><member name="M:FuelLine.RegisterCrew"></member><member name="M:FuelLine.removeChild(Part)"></member><member name="M:FuelLine.RemoveCrewmember(ProtoCrewMember)"></member><member name="M:FuelLine.RemoveModule(PartModule)"></member><member name="M:FuelLine.RemoveModules"></member><member name="M:FuelLine.RemoveOnMouseDown(Part+OnActionDelegate)"></member><member name="M:FuelLine.RemoveOnMouseEnter(Part+OnActionDelegate)"></member><member name="M:FuelLine.RemoveOnMouseExit(Part+OnActionDelegate)"></member><member name="M:FuelLine.RemoveShield(IAirstreamShield)"></member><member name="M:FuelLine.RequestFuel(Part,System.Single,System.UInt32)"></member><member name="M:FuelLine.RequestFuel(Part,System.Single,System.UInt32)"></member><member name="M:FuelLine.RequestRCS(System.Single,System.Int32)"></member><member name="M:FuelLine.RequestResource(System.Int32,System.Single)"></member><member name="M:FuelLine.RequestResource(string,System.Single)"></member><member name="M:FuelLine.RequestResource(System.Int32,System.Double)"></member><member name="M:FuelLine.RequestResource(string,System.Double)"></member><member name="M:FuelLine.RequestResource(System.Int32,System.Double,ResourceFlowMode)"></member><member name="M:FuelLine.RequestResource(string,System.Double,ResourceFlowMode)"></member><member name="M:FuelLine.ResetCollisionIgnores"></member><member name="M:FuelLine.ResetJoints"></member><member name="M:FuelLine.ResumeVelocity"></member><member name="M:FuelLine.SaveEffects(ConfigNode)"></member><member name="M:FuelLine.ScheduleSetCollisionIgnores"></member><member name="M:FuelLine.SendEvent(string)"></member><member name="M:FuelLine.SendEvent(string,BaseEventData)"></member><member name="M:FuelLine.SendEvent(string,BaseEventData,System.Int32)"></member><member name="M:FuelLine.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:FuelLine.SendMessage(string,object)"></member><member name="M:FuelLine.SendMessage(string)"></member><member name="M:FuelLine.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:FuelLine.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:FuelLine.SendMessageUpwards(string,object)"></member><member name="M:FuelLine.SendMessageUpwards(string)"></member><member name="M:FuelLine.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:FuelLine.SetCollisionIgnores"></member><member name="M:FuelLine.SetDetectCollisions(System.Boolean)"></member><member name="M:FuelLine.SetFuelSource(Part)"></member><member name="M:FuelLine.SetHierarchyRoot(Part)"></member><member name="M:FuelLine.SetHighlight(System.Boolean,System.Boolean)"></member><member name="M:FuelLine.SetHighlightColor(UnityEngine.Color)"></member><member name="M:FuelLine.SetHighlightColor"></member><member name="M:FuelLine.SetHighlightDefault"></member><member name="M:FuelLine.SetHighlightType(Part+HighlightType)"></member><member name="M:FuelLine.SetLayer(UnityEngine.GameObject,System.Int32)"></member><member name="M:FuelLine.SetMirror(UnityEngine.Vector3)"></member><member name="M:FuelLine.setOpacity(System.Single)"></member><member name="M:FuelLine.setParent(Part)"></member><member name="M:FuelLine.SetReferenceTransform(UnityEngine.Transform)"></member><member name="M:FuelLine.SetResource(ConfigNode)"></member><member name="M:FuelLine.SpawnIVA"></member><member name="M:FuelLine.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:FuelLine.StartCoroutine(string,object)"></member><member name="M:FuelLine.StartCoroutine(string)"></member><member name="M:FuelLine.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:FuelLine.StopAllCoroutines"></member><member name="M:FuelLine.StopCoroutine(string)"></member><member name="M:FuelLine.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:FuelLine.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:FuelLine.ToString"></member><member name="M:FuelLine.TransferResource(System.Int32,System.Double)"></member><member name="M:FuelLine.TransferResource(PartResource,System.Double,Part)"></member><member name="M:FuelLine.Undock(DockedVesselInfo)"></member><member name="M:FuelLine.unfreeze"></member><member name="M:FuelLine.Unpack"></member><member name="M:FuelLine.UnregisterCrew"></member><member name="M:FuelLine.UpdateOrgPosAndRot(Part)"></member><member name="M:FuelLine.UpdateStageability(System.Boolean,System.Boolean)"></member><member name="M:FuelLine.#ctor"></member><member name="T:FuelTank"><summary>The old, deprecated class that implemented fuel tanks before the resource system. Don't use this class: to allow a part to store a resource add a RESOURCE block to the part.cfg.</summary></member><member name="F:FuelTank.absorptiveConstant"></member><member name="F:FuelTank.ActivatesEvenIfDisconnected"></member><member name="F:FuelTank.aerodynamicArea"></member><member name="F:FuelTank.airlock"></member><member name="F:FuelTank.airstreamShields"></member><member name="F:FuelTank.allowFlow"></member><member name="F:FuelTank.analyticInternalInsulationFactor"></member><member name="F:FuelTank.analyticSkinInsulationFactor"></member><member name="F:FuelTank.angularDrag"></member><member name="F:FuelTank.angularDragByFI"></member><member name="F:FuelTank.atmDensity"></member><member name="F:FuelTank.attached"></member><member name="F:FuelTank.attachJoint"></member><member name="F:FuelTank.attachMethod"></member><member name="F:FuelTank.attachMode"></member><member name="F:FuelTank.attachNodes"></member><member name="F:FuelTank.attachRules"></member><member name="F:FuelTank.attPos"></member><member name="F:FuelTank.attPos0"></member><member name="F:FuelTank.attRotation"></member><member name="F:FuelTank.attRotation0"></member><member name="F:FuelTank.blackBodyRadiationAlphaMult"></member><member name="F:FuelTank.bodyLiftLocalPosition"></member><member name="F:FuelTank.bodyLiftLocalVector"></member><member name="F:FuelTank.bodyLiftMultiplier"></member><member name="F:FuelTank.bodyLiftScalar"></member><member name="F:FuelTank.boundsMultiplier"></member><member name="F:FuelTank.breakingForce"></member><member name="F:FuelTank.breakingTorque"></member><member name="F:FuelTank.buoyancy"></member><member name="F:FuelTank.buoyancyUseCubeNamed"></member><member name="F:FuelTank.buoyancyUseSine"></member><member name="F:FuelTank.CenterOfBuoyancy"></member><member name="F:FuelTank.CenterOfDisplacement"></member><member name="F:FuelTank.children"></member><member name="F:FuelTank.childStageOffset"></member><member name="F:FuelTank.collider"></member><member name="F:FuelTank.collisionEnhancer"></member><member name="F:FuelTank.CoLOffset"></member><member name="F:FuelTank.CoMOffset"></member><member name="F:FuelTank.connected"></member><member name="F:FuelTank.CoPOffset"></member><member name="F:FuelTank.craftID"></member><member name="F:FuelTank.crashTolerance"></member><member name="F:FuelTank.CrewCapacity"></member><member name="F:FuelTank.crewRespawnTime"></member><member name="F:FuelTank.crewTransferAvailable"></member><member name="F:FuelTank.currentCollisions"></member><member name="F:FuelTank.customPartData"></member><member name="F:FuelTank.defaultInverseStage"></member><member name="F:FuelTank.depth"></member><member name="F:FuelTank.dragModel"></member><member name="F:FuelTank.dragReferenceVector"></member><member name="F:FuelTank.dragScalar"></member><member name="F:FuelTank.dragVector"></member><member name="F:FuelTank.dragVectorDir"></member><member name="F:FuelTank.dragVectorDirLocal"></member><member name="F:FuelTank.dragVectorMag"></member><member name="F:FuelTank.dragVectorSqrMag"></member><member name="F:FuelTank.drainRate"></member><member name="F:FuelTank.dryMass"></member><member name="F:FuelTank.dynamicPressurekPa"></member><member name="F:FuelTank.edgeHighlightThresholdMult"></member><member name="F:FuelTank.editorCollision"></member><member name="F:FuelTank.editorLinks"></member><member name="F:FuelTank.editorStarted"></member><member name="F:FuelTank.emissiveConstant"></member><member name="F:FuelTank.emptyExplosionPotential"></member><member name="F:FuelTank.explosionPotential"></member><member name="F:FuelTank.exposedArea"></member><member name="F:FuelTank.flagURL"></member><member name="F:FuelTank.flightID"></member><member name="F:FuelTank.frozen"></member><member name="F:FuelTank.fuel"></member><member name="F:FuelTank.fuelCrossFeed"></member><member name="F:FuelTank.fuelLookupTargets"></member><member name="F:FuelTank.fullExplosionPotential"></member><member name="F:FuelTank.fxGroups"></member><member name="F:FuelTank.gaugeThresholdMult"></member><member name="F:FuelTank.GroundContact"></member><member name="F:FuelTank.gTolerance"></member><member name="F:FuelTank.habitableVolume"></member><member name="F:FuelTank.hasHeiarchyModel"></member><member name="F:FuelTank.hasLiftModule"></member><member name="F:FuelTank.hatchObstructionCheckInwardDistance"></member><member name="F:FuelTank.hatchObstructionCheckInwardOffset"></member><member name="F:FuelTank.hatchObstructionCheckOutwardDistance"></member><member name="F:FuelTank.hatchObstructionCheckSphereRadius"></member><member name="F:FuelTank.heatConductivity"></member><member name="F:FuelTank.heatConvectiveConstant"></member><member name="F:FuelTank.highlightColor"></member><member name="F:FuelTank.highlighter"></member><member name="F:FuelTank.highlightType"></member><member name="F:FuelTank.initialVesselName"></member><member name="F:FuelTank.inStageIndex"></member><member name="F:FuelTank.internalModel"></member><member name="F:FuelTank.InternalModelName"></member><member name="F:FuelTank.inverseStage"></member><member name="F:FuelTank.isClone"></member><member name="F:FuelTank.isControlSource"></member><member name="F:FuelTank.isMirrored"></member><member name="F:FuelTank.isPersistent"></member><member name="F:FuelTank.lastFuelRequestId"></member><member name="F:FuelTank.launchID"></member><member name="F:FuelTank.machNumber"></member><member name="F:FuelTank.manualStageOffset"></member><member name="F:FuelTank.mass"></member><member name="F:FuelTank.maxDepth"></member><member name="F:FuelTank.maximum_drag"></member><member name="F:FuelTank.maxTemp"></member><member name="F:FuelTank.minDepth"></member><member name="F:FuelTank.minimum_drag"></member><member name="F:FuelTank.mirrorAxis"></member><member name="F:FuelTank.mirrorRefAxis"></member><member name="F:FuelTank.mirrorVector"></member><member name="F:FuelTank.missionID"></member><member name="F:FuelTank.moduleSize"></member><member name="F:FuelTank.needPrefabMass"></member><member name="F:FuelTank.noAutoEVAAny"></member><member name="F:FuelTank.noAutoEVAMulti"></member><member name="F:FuelTank.NoCrossFeedNodeKey"></member><member name="F:FuelTank.OnEditorAttach"></member><member name="F:FuelTank.OnEditorDestroy"></member><member name="F:FuelTank.OnEditorDetach"></member><member name="F:FuelTank.OnJustAboutToBeDestroyed"></member><member name="F:FuelTank.orgPos"></member><member name="F:FuelTank.orgRot"></member><member name="F:FuelTank.originalStage"></member><member name="F:FuelTank.overrideSkillUpdate"></member><member name="F:FuelTank.overrideSkillUpdateModules"></member><member name="F:FuelTank.packed"></member><member name="F:FuelTank.parent"></member><member name="F:FuelTank.partBuoyancy"></member><member name="F:FuelTank.partInfo"></member><member name="F:FuelTank.partName"></member><member name="F:FuelTank.partTransform"></member><member name="F:FuelTank.PermanentGroundContact"></member><member name="F:FuelTank.physicalSignificance"></member><member name="F:FuelTank.PhysicsSignificance"></member><member name="F:FuelTank.potentialParent"></member><member name="F:FuelTank.prefabMass"></member><member name="F:FuelTank.prefabSize"></member><member name="F:FuelTank.protoModuleCrew"></member><member name="F:FuelTank.protoPartSnapshot"></member><member name="F:FuelTank.ptd"></member><member name="F:FuelTank.radiativeArea"></member><member name="F:FuelTank.radiatorCritical"></member><member name="F:FuelTank.radiatorHeadroom"></member><member name="F:FuelTank.radiatorMax"></member><member name="F:FuelTank.rb"></member><member name="F:FuelTank.rescaleFactor"></member><member name="F:FuelTank.resourceMass"></member><member name="F:FuelTank.resourceRequestRemainingThreshold"></member><member name="F:FuelTank.resourceTargets"></member><member name="F:FuelTank.resourceThermalMass"></member><member name="F:FuelTank.ResumeState"></member><member name="F:FuelTank.scaleFactor"></member><member name="F:FuelTank.separationIndex"></member><member name="F:FuelTank.skinExposedArea"></member><member name="F:FuelTank.skinExposedAreaFrac"></member><member name="F:FuelTank.skinExposedMassMult"></member><member name="F:FuelTank.skinInternalConductionMult"></member><member name="F:FuelTank.skinMassPerArea"></member><member name="F:FuelTank.skinMaxTemp"></member><member name="F:FuelTank.skinSkinConductionMult"></member><member name="F:FuelTank.skinTemperature"></member><member name="F:FuelTank.skinThermalMass"></member><member name="F:FuelTank.skinThermalMassModifier"></member><member name="F:FuelTank.skinThermalMassRecip"></member><member name="F:FuelTank.skinToInternalFlux"></member><member name="F:FuelTank.skinUnexposedExternalTemp"></member><member name="F:FuelTank.skinUnexposedMassMult"></member><member name="F:FuelTank.skinUnexposedTemperature"></member><member name="F:FuelTank.skipColliderIgnores"></member><member name="F:FuelTank.srfAttachNode"></member><member name="F:FuelTank.stackIcon"></member><member name="F:FuelTank.stackIconGrouping"></member><member name="F:FuelTank.stackPriThreshold"></member><member name="F:FuelTank.stackSymmetry"></member><member name="F:FuelTank.stageAfter"></member><member name="F:FuelTank.stageBefore"></member><member name="F:FuelTank.stageOffset"></member><member name="F:FuelTank.stagingIcon"></member><member name="F:FuelTank.stagingIconAlwaysShown"></member><member name="F:FuelTank.stagingOn"></member><member name="F:FuelTank.started"></member><member name="F:FuelTank.state"></member><member name="F:FuelTank.staticPressureAtm"></member><member name="F:FuelTank.submergedDragScalar"></member><member name="F:FuelTank.submergedDynamicPressurekPa"></member><member name="F:FuelTank.submergedLiftScalar"></member><member name="F:FuelTank.submergedPortion"></member><member name="F:FuelTank.surfaceAreas"></member><member name="F:FuelTank.symMethod"></member><member name="F:FuelTank.symmetryCounterparts"></member><member name="F:FuelTank.temperature"></member><member name="F:FuelTank.terrainCollider"></member><member name="F:FuelTank.thermalConductionFlux"></member><member name="F:FuelTank.thermalConvectionFlux"></member><member name="F:FuelTank.thermalExposedFlux"></member><member name="F:FuelTank.thermalExposedFluxPrevious"></member><member name="F:FuelTank.thermalInternalFlux"></member><member name="F:FuelTank.thermalInternalFluxPrevious"></member><member name="F:FuelTank.thermalMass"></member><member name="F:FuelTank.thermalMassModifier"></member><member name="F:FuelTank.thermalMassReciprocal"></member><member name="F:FuelTank.thermalRadiationFlux"></member><member name="F:FuelTank.thermalSkinFlux"></member><member name="F:FuelTank.thermalSkinFluxPrevious"></member><member name="F:FuelTank.topNode"></member><member name="F:FuelTank.vel"></member><member name="F:FuelTank.vessel"></member><member name="F:FuelTank.vesselType"></member><member name="F:FuelTank.waterAngularDragMultiplier"></member><member name="F:FuelTank.WaterContact"></member><member name="P:FuelTank.Actions"></member><member name="P:FuelTank.ClassID"></member><member name="P:FuelTank.ClassName"></member><member name="P:FuelTank.DragCubes"></member><member name="P:FuelTank.Effects"></member><member name="P:FuelTank.enabled"></member><member name="P:FuelTank.Events"></member><member name="P:FuelTank.Fields"></member><member name="P:FuelTank.gameObject"></member><member name="P:FuelTank.hasStagingIcon"></member><member name="P:FuelTank.hideFlags"></member><member name="P:FuelTank.HighlightActive"></member><member name="P:FuelTank.HighlightRendererCount"></member><member name="P:FuelTank.HighlightRenderers"></member><member name="P:FuelTank.isActiveAndEnabled"></member><member name="P:FuelTank.isAttachable"></member><member name="P:FuelTank.isAttached"></member><member name="P:FuelTank.isConnected"></member><member name="P:FuelTank.isControllable"></member><member name="P:FuelTank.Landed"></member><member name="P:FuelTank.localRoot"></member><member name="P:FuelTank.Modules"></member><member name="P:FuelTank.MouseOver"></member><member name="P:FuelTank.name"></member><member name="P:FuelTank.NoAutoEVA"></member><member name="P:FuelTank.orbit"></member><member name="P:FuelTank.PartValues"></member><member name="P:FuelTank.RecurseHighlight"></member><member name="P:FuelTank.Resources"></member><member name="P:FuelTank.Rigidbody"></member><member name="P:FuelTank.ShieldedFromAirstream"></member><member name="P:FuelTank.Splashed"></member><member name="P:FuelTank.State"></member><member name="P:FuelTank.tag"></member><member name="P:FuelTank.transform"></member><member name="P:FuelTank.useGUILayout"></member><member name="P:FuelTank.WCoM"></member><member name="M:FuelTank.activate(System.Int32,Vessel)"></member><member name="M:FuelTank.AddAttachNode(ConfigNode)"></member><member name="M:FuelTank.addChild(Part)"></member><member name="M:FuelTank.AddCrewmember(ProtoCrewMember)"></member><member name="M:FuelTank.AddCrewmemberAt(ProtoCrewMember,System.Int32)"></member><member name="M:FuelTank.AddExposedThermalFlux(System.Double)"></member><member name="M:FuelTank.AddInternalPart(ConfigNode)"></member><member name="M:FuelTank.AddModule(string)"></member><member name="M:FuelTank.AddModule(ConfigNode)"></member><member name="M:FuelTank.AddOnMouseDown(Part+OnActionDelegate)"></member><member name="M:FuelTank.AddOnMouseEnter(Part+OnActionDelegate)"></member><member name="M:FuelTank.AddOnMouseExit(Part+OnActionDelegate)"></member><member name="M:FuelTank.AddResource(ConfigNode)"></member><member name="M:FuelTank.AddShield(IAirstreamShield)"></member><member name="M:FuelTank.AddSkinThermalFlux(System.Double)"></member><member name="M:FuelTank.AddThermalFlux(System.Double)"></member><member name="M:FuelTank.AlreadyProcessedRequest(System.Int32)"></member><member name="M:FuelTank.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:FuelTank.BroadcastMessage(string,object)"></member><member name="M:FuelTank.BroadcastMessage(string)"></member><member name="M:FuelTank.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:FuelTank.CancelInvoke"></member><member name="M:FuelTank.CancelInvoke(string)"></member><member name="M:FuelTank.CheckCollision(UnityEngine.Collision)"></member><member name="M:FuelTank.checkLanded"></member><member name="M:FuelTank.checkPermanentLandedAt"></member><member name="M:FuelTank.checkSplashed"></member><member name="M:FuelTank.CheckTransferDialog"></member><member name="M:FuelTank.cleanReferencesFromOtherParts"></member><member name="M:FuelTank.CompareTag(string)"></member><member name="M:FuelTank.Couple(Part)"></member><member name="M:FuelTank.CreateInternalModel"></member><member name="M:FuelTank.deactivate"></member><member name="M:FuelTank.decouple(System.Single)"></member><member name="M:FuelTank.DespawnIVA"></member><member name="M:FuelTank.Die"></member><member name="M:FuelTank.disconnect(System.Boolean)"></member><member name="M:FuelTank.DrainFuel(System.Single)"></member><member name="M:FuelTank.drawStats"></member><member name="M:FuelTank.Effect(string)"></member><member name="M:FuelTank.Effect(string,System.Single)"></member><member name="M:FuelTank.Equals(object)"></member><member name="M:FuelTank.explode"></member><member name="M:FuelTank.Finalize"></member><member name="M:FuelTank.findAttachNode(string)"></member><member name="M:FuelTank.findAttachNodeByPart(Part)"></member><member name="M:FuelTank.findAttachNodes(string)"></member><member name="M:FuelTank.FindChildPart(string)"></member><member name="M:FuelTank.FindChildPart(string,System.Boolean)"></member><member name="M:FuelTank.FindChildPart"></member><member name="M:FuelTank.FindChildPart(System.Boolean)"></member><member name="M:FuelTank.FindChildParts"></member><member name="M:FuelTank.FindChildParts(System.Boolean)"></member><member name="M:FuelTank.FindFuel(Part,System.Collections.Generic.List,System.UInt32)"></member><member name="M:FuelTank.FindFuel(Part,List&lt;Part&gt;,System.UInt32)"></member><member name="M:FuelTank.findFxGroup(string)"></member><member name="M:FuelTank.FindModelAnimator(string,string)"></member><member name="M:FuelTank.FindModelAnimators(string)"></member><member name="M:FuelTank.FindModelAnimators"></member><member name="M:FuelTank.FindModelComponent"></member><member name="M:FuelTank.FindModelComponent(string)"></member><member name="M:FuelTank.FindModelComponents"></member><member name="M:FuelTank.FindModelComponents(string)"></member><member name="M:FuelTank.FindModelTransform(string)"></member><member name="M:FuelTank.FindModelTransforms(string)"></member><member name="M:FuelTank.FindModuleImplementing"></member><member name="M:FuelTank.FindModulesImplementing"></member><member name="M:FuelTank.FindNonPhysicslessChildren(System.Collections.Generic.List)"></member><member name="M:FuelTank.FindNonPhysicslessParent"></member><member name="M:FuelTank.FindPartThroughNodes(Part,Part)"></member><member name="M:FuelTank.FindResource_StackPriority(Part,System.Collections.Generic.List,System.Int32,System.Double,System.Int32,System.Boolean,double&amp;,double&amp;,System.Collections.Generic.List,System.Boolean)"></member><member name="M:FuelTank.force_activate"></member><member name="M:FuelTank.freeze"></member><member name="M:FuelTank.GetComponent(System.Type)"></member><member name="M:FuelTank.GetComponent"></member><member name="M:FuelTank.GetComponent(string)"></member><member name="M:FuelTank.GetComponentInChildren(System.Type)"></member><member name="M:FuelTank.GetComponentInChildren"></member><member name="M:FuelTank.GetComponentInParent(System.Type)"></member><member name="M:FuelTank.GetComponentInParent"></member><member name="M:FuelTank.GetComponents(System.Type)"></member><member name="M:FuelTank.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:FuelTank.GetComponents(List)"></member><member name="M:FuelTank.GetComponents"></member><member name="M:FuelTank.GetComponentsInChildren(System.Type)"></member><member name="M:FuelTank.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:FuelTank.GetComponentsInChildren(System.Boolean)"></member><member name="M:FuelTank.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:FuelTank.GetComponentsInChildren"></member><member name="M:FuelTank.GetComponentsInChildren(List)"></member><member name="M:FuelTank.GetComponentsInParent(System.Type)"></member><member name="M:FuelTank.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:FuelTank.GetComponentsInParent(System.Boolean)"></member><member name="M:FuelTank.GetComponentsInParent(System.Boolean,List)"></member><member name="M:FuelTank.GetComponentsInParent"></member><member name="M:FuelTank.GetConnectedResources(System.Int32,ResourceFlowMode,System.Collections.Generic.List)"></member><member name="M:FuelTank.GetConnectedResources(System.Int32,ResourceFlowMode,System.Collections.Generic.List,double&amp;,double&amp;)"></member><member name="M:FuelTank.GetHashCode"></member><member name="M:FuelTank.GetInstanceID"></member><member name="M:FuelTank.GetModuleCosts(System.Single)"></member><member name="M:FuelTank.GetModuleMass(System.Single)"></member><member name="M:FuelTank.GetModuleSize(UnityEngine.Vector3)"></member><member name="M:FuelTank.GetPhysicslessChildMass"></member><member name="M:FuelTank.GetReferenceTransform"></member><member name="M:FuelTank.GetResourceMass"></member><member name="M:FuelTank.GetResourceMass(float&amp;)"></member><member name="M:FuelTank.GetResourceMass(double&amp;)"></member><member name="M:FuelTank.getSymmetryCounterPart(System.Int32)"></member><member name="M:FuelTank.GetType"></member><member name="M:FuelTank.HandleCollision(UnityEngine.Collision)"></member><member name="M:FuelTank.hasIndirectChild(Part)"></member><member name="M:FuelTank.hasIndirectParent(Part)"></member><member name="M:FuelTank.highlight(UnityEngine.Color)"></member><member name="M:FuelTank.highlightRecursive(UnityEngine.Color)"></member><member name="M:FuelTank.InitializeEffects"></member><member name="M:FuelTank.InitializeModules"></member><member name="M:FuelTank.Invoke(string,System.Single)"></member><member name="M:FuelTank.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:FuelTank.IsInvoking(string)"></member><member name="M:FuelTank.IsInvoking"></member><member name="M:FuelTank.isSymmetryCounterPart(Part)"></member><member name="M:FuelTank.LateUpdate"></member><member name="M:FuelTank.LoadEffects(ConfigNode)"></member><member name="M:FuelTank.LoadModule(ConfigNode,int&amp;)"></member><member name="M:FuelTank.MemberwiseClone"></member><member name="M:FuelTank.onActiveFixedUpdate"></member><member name="M:FuelTank.onActiveUpdate"></member><member name="M:FuelTank.onAttach(Part,System.Boolean)"></member><member name="M:FuelTank.onBackup"></member><member name="M:FuelTank.OnCollisionEnter(UnityEngine.Collision)"></member><member name="M:FuelTank.OnCollisionExit(UnityEngine.Collision)"></member><member name="M:FuelTank.OnCollisionStay(UnityEngine.Collision)"></member><member name="M:FuelTank.OnCopy(Part,System.Boolean)"></member><member name="M:FuelTank.onCopy(Part,System.Boolean)"></member><member name="M:FuelTank.onCtrlUpd(FlightCtrlState)"></member><member name="M:FuelTank.onDecouple(System.Single)"></member><member name="M:FuelTank.OnDelete"></member><member name="M:FuelTank.onDetach(System.Boolean)"></member><member name="M:FuelTank.onDisconnect"></member><member name="M:FuelTank.OnDrawStats"></member><member name="M:FuelTank.onEditorUpdate"></member><member name="M:FuelTank.onFlightStart"></member><member name="M:FuelTank.onFlightStartAtLaunchPad"></member><member name="M:FuelTank.onFlightStateLoad(System.Collections.Generic.Dictionary)"></member><member name="M:FuelTank.onFlightStateLoad(Dictionary&lt;string,KSPParseable&gt;)"></member><member name="M:FuelTank.onFlightStateSave(System.Collections.Generic.Dictionary)"></member><member name="M:FuelTank.onFlightStateSave(Dictionary&lt;string,KSPParseable&gt;)"></member><member name="M:FuelTank.onGamePause"></member><member name="M:FuelTank.onGameResume"></member><member name="M:FuelTank.OnGetStats"></member><member name="M:FuelTank.onJointDisable"></member><member name="M:FuelTank.onJointReset"></member><member name="M:FuelTank.OnLiftOff"></member><member name="M:FuelTank.OnLoad"></member><member name="M:FuelTank.OnLoad(ConfigNode)"></member><member name="M:FuelTank.onPack"></member><member name="M:FuelTank.onPartActivate"></member><member name="M:FuelTank.onPartAttach(Part)"></member><member name="M:FuelTank.onPartAwake"></member><member name="M:FuelTank.onPartDeactivate"></member><member name="M:FuelTank.onPartDelete"></member><member name="M:FuelTank.onPartDestroy"></member><member name="M:FuelTank.onPartDetach"></member><member name="M:FuelTank.onPartExplode"></member><member name="M:FuelTank.onPartFixedUpdate"></member><member name="M:FuelTank.OnPartJointBreak(System.Single)"></member><member name="M:FuelTank.onPartLiftOff"></member><member name="M:FuelTank.onPartLoad"></member><member name="M:FuelTank.onPartSplashdown"></member><member name="M:FuelTank.onPartStart"></member><member name="M:FuelTank.onPartTouchdown"></member><member name="M:FuelTank.onPartUpdate"></member><member name="M:FuelTank.OnPointerClick(UnityEngine.EventSystems.PointerEventData)"></member><member name="M:FuelTank.OnSave(ConfigNode)"></member><member name="M:FuelTank.OnSplashDown"></member><member name="M:FuelTank.onStartComplete"></member><member name="M:FuelTank.OnTouchDown"></member><member name="M:FuelTank.onUnpack"></member><member name="M:FuelTank.Pack"></member><member name="M:FuelTank.PromoteToPhysicalPart"></member><member name="M:FuelTank.propagateControlUpdate(FlightCtrlState)"></member><member name="M:FuelTank.RegisterCrew"></member><member name="M:FuelTank.removeChild(Part)"></member><member name="M:FuelTank.RemoveCrewmember(ProtoCrewMember)"></member><member name="M:FuelTank.RemoveModule(PartModule)"></member><member name="M:FuelTank.RemoveModules"></member><member name="M:FuelTank.RemoveOnMouseDown(Part+OnActionDelegate)"></member><member name="M:FuelTank.RemoveOnMouseEnter(Part+OnActionDelegate)"></member><member name="M:FuelTank.RemoveOnMouseExit(Part+OnActionDelegate)"></member><member name="M:FuelTank.RemoveShield(IAirstreamShield)"></member><member name="M:FuelTank.RequestFuel(Part,System.Single,System.UInt32)"></member><member name="M:FuelTank.RequestFuel(Part,System.Single,System.UInt32)"></member><member name="M:FuelTank.RequestRCS(System.Single,System.Int32)"></member><member name="M:FuelTank.RequestResource(System.Int32,System.Single)"></member><member name="M:FuelTank.RequestResource(string,System.Single)"></member><member name="M:FuelTank.RequestResource(System.Int32,System.Double)"></member><member name="M:FuelTank.RequestResource(string,System.Double)"></member><member name="M:FuelTank.RequestResource(System.Int32,System.Double,ResourceFlowMode)"></member><member name="M:FuelTank.RequestResource(string,System.Double,ResourceFlowMode)"></member><member name="M:FuelTank.ResetCollisionIgnores"></member><member name="M:FuelTank.ResetJoints"></member><member name="M:FuelTank.ResumeVelocity"></member><member name="M:FuelTank.SaveEffects(ConfigNode)"></member><member name="M:FuelTank.ScheduleSetCollisionIgnores"></member><member name="M:FuelTank.SendEvent(string)"></member><member name="M:FuelTank.SendEvent(string,BaseEventData)"></member><member name="M:FuelTank.SendEvent(string,BaseEventData,System.Int32)"></member><member name="M:FuelTank.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:FuelTank.SendMessage(string,object)"></member><member name="M:FuelTank.SendMessage(string)"></member><member name="M:FuelTank.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:FuelTank.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:FuelTank.SendMessageUpwards(string,object)"></member><member name="M:FuelTank.SendMessageUpwards(string)"></member><member name="M:FuelTank.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:FuelTank.SetCollisionIgnores"></member><member name="M:FuelTank.SetDetectCollisions(System.Boolean)"></member><member name="M:FuelTank.SetHierarchyRoot(Part)"></member><member name="M:FuelTank.SetHighlight(System.Boolean,System.Boolean)"></member><member name="M:FuelTank.SetHighlightColor(UnityEngine.Color)"></member><member name="M:FuelTank.SetHighlightColor"></member><member name="M:FuelTank.SetHighlightDefault"></member><member name="M:FuelTank.SetHighlightType(Part+HighlightType)"></member><member name="M:FuelTank.SetLayer(UnityEngine.GameObject,System.Int32)"></member><member name="M:FuelTank.SetMirror(UnityEngine.Vector3)"></member><member name="M:FuelTank.setOpacity(System.Single)"></member><member name="M:FuelTank.setParent(Part)"></member><member name="M:FuelTank.SetReferenceTransform(UnityEngine.Transform)"></member><member name="M:FuelTank.SetResource(ConfigNode)"></member><member name="M:FuelTank.SpawnIVA"></member><member name="M:FuelTank.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:FuelTank.StartCoroutine(string,object)"></member><member name="M:FuelTank.StartCoroutine(string)"></member><member name="M:FuelTank.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:FuelTank.StopAllCoroutines"></member><member name="M:FuelTank.StopCoroutine(string)"></member><member name="M:FuelTank.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:FuelTank.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:FuelTank.ToString"></member><member name="M:FuelTank.TransferResource(System.Int32,System.Double)"></member><member name="M:FuelTank.TransferResource(PartResource,System.Double,Part)"></member><member name="M:FuelTank.Undock(DockedVesselInfo)"></member><member name="M:FuelTank.unfreeze"></member><member name="M:FuelTank.Unpack"></member><member name="M:FuelTank.UnregisterCrew"></member><member name="M:FuelTank.UpdateOrgPosAndRot(Part)"></member><member name="M:FuelTank.UpdateStageability(System.Boolean,System.Boolean)"></member><member name="M:FuelTank.#ctor"></member><member name="T:FuelTankGUI"><summary>An unused class.</summary></member><member name="F:FuelTankGUI.absorptiveConstant"></member><member name="F:FuelTankGUI.ActivatesEvenIfDisconnected"></member><member name="F:FuelTankGUI.aerodynamicArea"></member><member name="F:FuelTankGUI.airlock"></member><member name="F:FuelTankGUI.airstreamShields"></member><member name="F:FuelTankGUI.allowFlow"></member><member name="F:FuelTankGUI.analyticInternalInsulationFactor"></member><member name="F:FuelTankGUI.analyticSkinInsulationFactor"></member><member name="F:FuelTankGUI.angularDrag"></member><member name="F:FuelTankGUI.angularDragByFI"></member><member name="F:FuelTankGUI.atmDensity"></member><member name="F:FuelTankGUI.attached"></member><member name="F:FuelTankGUI.attachJoint"></member><member name="F:FuelTankGUI.attachMethod"></member><member name="F:FuelTankGUI.attachMode"></member><member name="F:FuelTankGUI.attachNodes"></member><member name="F:FuelTankGUI.attachRules"></member><member name="F:FuelTankGUI.attPos"></member><member name="F:FuelTankGUI.attPos0"></member><member name="F:FuelTankGUI.attRotation"></member><member name="F:FuelTankGUI.attRotation0"></member><member name="F:FuelTankGUI.blackBodyRadiationAlphaMult"></member><member name="F:FuelTankGUI.bodyLiftLocalPosition"></member><member name="F:FuelTankGUI.bodyLiftLocalVector"></member><member name="F:FuelTankGUI.bodyLiftMultiplier"></member><member name="F:FuelTankGUI.bodyLiftScalar"></member><member name="F:FuelTankGUI.boundsMultiplier"></member><member name="F:FuelTankGUI.breakingForce"></member><member name="F:FuelTankGUI.breakingTorque"></member><member name="F:FuelTankGUI.buoyancy"></member><member name="F:FuelTankGUI.buoyancyUseCubeNamed"></member><member name="F:FuelTankGUI.buoyancyUseSine"></member><member name="F:FuelTankGUI.CenterOfBuoyancy"></member><member name="F:FuelTankGUI.CenterOfDisplacement"></member><member name="F:FuelTankGUI.children"></member><member name="F:FuelTankGUI.childStageOffset"></member><member name="F:FuelTankGUI.collider"></member><member name="F:FuelTankGUI.collisionEnhancer"></member><member name="F:FuelTankGUI.CoLOffset"></member><member name="F:FuelTankGUI.CoMOffset"></member><member name="F:FuelTankGUI.connected"></member><member name="F:FuelTankGUI.CoPOffset"></member><member name="F:FuelTankGUI.craftID"></member><member name="F:FuelTankGUI.crashTolerance"></member><member name="F:FuelTankGUI.CrewCapacity"></member><member name="F:FuelTankGUI.crewRespawnTime"></member><member name="F:FuelTankGUI.crewTransferAvailable"></member><member name="F:FuelTankGUI.currentCollisions"></member><member name="F:FuelTankGUI.customPartData"></member><member name="F:FuelTankGUI.defaultInverseStage"></member><member name="F:FuelTankGUI.depth"></member><member name="F:FuelTankGUI.dragModel"></member><member name="F:FuelTankGUI.dragReferenceVector"></member><member name="F:FuelTankGUI.dragScalar"></member><member name="F:FuelTankGUI.dragVector"></member><member name="F:FuelTankGUI.dragVectorDir"></member><member name="F:FuelTankGUI.dragVectorDirLocal"></member><member name="F:FuelTankGUI.dragVectorMag"></member><member name="F:FuelTankGUI.dragVectorSqrMag"></member><member name="F:FuelTankGUI.drainRate"></member><member name="F:FuelTankGUI.dryMass"></member><member name="F:FuelTankGUI.dynamicPressurekPa"></member><member name="F:FuelTankGUI.edgeHighlightThresholdMult"></member><member name="F:FuelTankGUI.editorCollision"></member><member name="F:FuelTankGUI.editorLinks"></member><member name="F:FuelTankGUI.editorStarted"></member><member name="F:FuelTankGUI.ejectionForce"></member><member name="F:FuelTankGUI.emissiveConstant"></member><member name="F:FuelTankGUI.emptyExplosionPotential"></member><member name="F:FuelTankGUI.explosionPotential"></member><member name="F:FuelTankGUI.exposedArea"></member><member name="F:FuelTankGUI.flagURL"></member><member name="F:FuelTankGUI.flightID"></member><member name="F:FuelTankGUI.frozen"></member><member name="F:FuelTankGUI.fuel"></member><member name="F:FuelTankGUI.fuelCrossFeed"></member><member name="F:FuelTankGUI.fuelLookupTargets"></member><member name="F:FuelTankGUI.fullExplosionPotential"></member><member name="F:FuelTankGUI.fxGroups"></member><member name="F:FuelTankGUI.gaugeThresholdMult"></member><member name="F:FuelTankGUI.GroundContact"></member><member name="F:FuelTankGUI.gTolerance"></member><member name="F:FuelTankGUI.habitableVolume"></member><member name="F:FuelTankGUI.hasHeiarchyModel"></member><member name="F:FuelTankGUI.hasLiftModule"></member><member name="F:FuelTankGUI.hatchObstructionCheckInwardDistance"></member><member name="F:FuelTankGUI.hatchObstructionCheckInwardOffset"></member><member name="F:FuelTankGUI.hatchObstructionCheckOutwardDistance"></member><member name="F:FuelTankGUI.hatchObstructionCheckSphereRadius"></member><member name="F:FuelTankGUI.heatConductivity"></member><member name="F:FuelTankGUI.heatConvectiveConstant"></member><member name="F:FuelTankGUI.highlightColor"></member><member name="F:FuelTankGUI.highlighter"></member><member name="F:FuelTankGUI.highlightType"></member><member name="F:FuelTankGUI.initialVesselName"></member><member name="F:FuelTankGUI.inStageIndex"></member><member name="F:FuelTankGUI.internalModel"></member><member name="F:FuelTankGUI.InternalModelName"></member><member name="F:FuelTankGUI.inverseStage"></member><member name="F:FuelTankGUI.isClone"></member><member name="F:FuelTankGUI.isControlSource"></member><member name="F:FuelTankGUI.isMirrored"></member><member name="F:FuelTankGUI.isPersistent"></member><member name="F:FuelTankGUI.lastFuelRequestId"></member><member name="F:FuelTankGUI.launchID"></member><member name="F:FuelTankGUI.machNumber"></member><member name="F:FuelTankGUI.manualStageOffset"></member><member name="F:FuelTankGUI.mass"></member><member name="F:FuelTankGUI.maxDepth"></member><member name="F:FuelTankGUI.maximum_drag"></member><member name="F:FuelTankGUI.maxTemp"></member><member name="F:FuelTankGUI.minDepth"></member><member name="F:FuelTankGUI.minimum_drag"></member><member name="F:FuelTankGUI.mirrorAxis"></member><member name="F:FuelTankGUI.mirrorRefAxis"></member><member name="F:FuelTankGUI.mirrorVector"></member><member name="F:FuelTankGUI.missionID"></member><member name="F:FuelTankGUI.moduleSize"></member><member name="F:FuelTankGUI.needPrefabMass"></member><member name="F:FuelTankGUI.noAutoEVAAny"></member><member name="F:FuelTankGUI.noAutoEVAMulti"></member><member name="F:FuelTankGUI.NoCrossFeedNodeKey"></member><member name="F:FuelTankGUI.OnEditorAttach"></member><member name="F:FuelTankGUI.OnEditorDestroy"></member><member name="F:FuelTankGUI.OnEditorDetach"></member><member name="F:FuelTankGUI.OnJustAboutToBeDestroyed"></member><member name="F:FuelTankGUI.orgPos"></member><member name="F:FuelTankGUI.orgRot"></member><member name="F:FuelTankGUI.originalStage"></member><member name="F:FuelTankGUI.overrideSkillUpdate"></member><member name="F:FuelTankGUI.overrideSkillUpdateModules"></member><member name="F:FuelTankGUI.packed"></member><member name="F:FuelTankGUI.parent"></member><member name="F:FuelTankGUI.partBuoyancy"></member><member name="F:FuelTankGUI.partInfo"></member><member name="F:FuelTankGUI.partName"></member><member name="F:FuelTankGUI.partTransform"></member><member name="F:FuelTankGUI.PermanentGroundContact"></member><member name="F:FuelTankGUI.physicalSignificance"></member><member name="F:FuelTankGUI.PhysicsSignificance"></member><member name="F:FuelTankGUI.potentialParent"></member><member name="F:FuelTankGUI.prefabMass"></member><member name="F:FuelTankGUI.prefabSize"></member><member name="F:FuelTankGUI.protoModuleCrew"></member><member name="F:FuelTankGUI.protoPartSnapshot"></member><member name="F:FuelTankGUI.ptd"></member><member name="F:FuelTankGUI.radiativeArea"></member><member name="F:FuelTankGUI.radiatorCritical"></member><member name="F:FuelTankGUI.radiatorHeadroom"></member><member name="F:FuelTankGUI.radiatorMax"></member><member name="F:FuelTankGUI.rb"></member><member name="F:FuelTankGUI.rescaleFactor"></member><member name="F:FuelTankGUI.resourceMass"></member><member name="F:FuelTankGUI.resourceRequestRemainingThreshold"></member><member name="F:FuelTankGUI.resourceTargets"></member><member name="F:FuelTankGUI.resourceThermalMass"></member><member name="F:FuelTankGUI.ResumeState"></member><member name="F:FuelTankGUI.scaleFactor"></member><member name="F:FuelTankGUI.separationIndex"></member><member name="F:FuelTankGUI.skinExposedArea"></member><member name="F:FuelTankGUI.skinExposedAreaFrac"></member><member name="F:FuelTankGUI.skinExposedMassMult"></member><member name="F:FuelTankGUI.skinInternalConductionMult"></member><member name="F:FuelTankGUI.skinMassPerArea"></member><member name="F:FuelTankGUI.skinMaxTemp"></member><member name="F:FuelTankGUI.skinSkinConductionMult"></member><member name="F:FuelTankGUI.skinTemperature"></member><member name="F:FuelTankGUI.skinThermalMass"></member><member name="F:FuelTankGUI.skinThermalMassModifier"></member><member name="F:FuelTankGUI.skinThermalMassRecip"></member><member name="F:FuelTankGUI.skinToInternalFlux"></member><member name="F:FuelTankGUI.skinUnexposedExternalTemp"></member><member name="F:FuelTankGUI.skinUnexposedMassMult"></member><member name="F:FuelTankGUI.skinUnexposedTemperature"></member><member name="F:FuelTankGUI.skipColliderIgnores"></member><member name="F:FuelTankGUI.srfAttachNode"></member><member name="F:FuelTankGUI.stackIcon"></member><member name="F:FuelTankGUI.stackIconGrouping"></member><member name="F:FuelTankGUI.stackPriThreshold"></member><member name="F:FuelTankGUI.stackSymmetry"></member><member name="F:FuelTankGUI.stageAfter"></member><member name="F:FuelTankGUI.stageBefore"></member><member name="F:FuelTankGUI.stageOffset"></member><member name="F:FuelTankGUI.stagingIcon"></member><member name="F:FuelTankGUI.stagingIconAlwaysShown"></member><member name="F:FuelTankGUI.stagingOn"></member><member name="F:FuelTankGUI.started"></member><member name="F:FuelTankGUI.state"></member><member name="F:FuelTankGUI.staticPressureAtm"></member><member name="F:FuelTankGUI.submergedDragScalar"></member><member name="F:FuelTankGUI.submergedDynamicPressurekPa"></member><member name="F:FuelTankGUI.submergedLiftScalar"></member><member name="F:FuelTankGUI.submergedPortion"></member><member name="F:FuelTankGUI.surfaceAreas"></member><member name="F:FuelTankGUI.symMethod"></member><member name="F:FuelTankGUI.symmetryCounterparts"></member><member name="F:FuelTankGUI.temperature"></member><member name="F:FuelTankGUI.terrainCollider"></member><member name="F:FuelTankGUI.thermalConductionFlux"></member><member name="F:FuelTankGUI.thermalConvectionFlux"></member><member name="F:FuelTankGUI.thermalExposedFlux"></member><member name="F:FuelTankGUI.thermalExposedFluxPrevious"></member><member name="F:FuelTankGUI.thermalInternalFlux"></member><member name="F:FuelTankGUI.thermalInternalFluxPrevious"></member><member name="F:FuelTankGUI.thermalMass"></member><member name="F:FuelTankGUI.thermalMassModifier"></member><member name="F:FuelTankGUI.thermalMassReciprocal"></member><member name="F:FuelTankGUI.thermalRadiationFlux"></member><member name="F:FuelTankGUI.thermalSkinFlux"></member><member name="F:FuelTankGUI.thermalSkinFluxPrevious"></member><member name="F:FuelTankGUI.topNode"></member><member name="F:FuelTankGUI.vel"></member><member name="F:FuelTankGUI.vessel"></member><member name="F:FuelTankGUI.vesselType"></member><member name="F:FuelTankGUI.waterAngularDragMultiplier"></member><member name="F:FuelTankGUI.WaterContact"></member><member name="P:FuelTankGUI.Actions"></member><member name="P:FuelTankGUI.ClassID"></member><member name="P:FuelTankGUI.ClassName"></member><member name="P:FuelTankGUI.DragCubes"></member><member name="P:FuelTankGUI.Effects"></member><member name="P:FuelTankGUI.enabled"></member><member name="P:FuelTankGUI.Events"></member><member name="P:FuelTankGUI.Fields"></member><member name="P:FuelTankGUI.gameObject"></member><member name="P:FuelTankGUI.hasStagingIcon"></member><member name="P:FuelTankGUI.hideFlags"></member><member name="P:FuelTankGUI.HighlightActive"></member><member name="P:FuelTankGUI.HighlightRendererCount"></member><member name="P:FuelTankGUI.HighlightRenderers"></member><member name="P:FuelTankGUI.isActiveAndEnabled"></member><member name="P:FuelTankGUI.isAttachable"></member><member name="P:FuelTankGUI.isAttached"></member><member name="P:FuelTankGUI.isConnected"></member><member name="P:FuelTankGUI.isControllable"></member><member name="P:FuelTankGUI.Landed"></member><member name="P:FuelTankGUI.localRoot"></member><member name="P:FuelTankGUI.Modules"></member><member name="P:FuelTankGUI.MouseOver"></member><member name="P:FuelTankGUI.name"></member><member name="P:FuelTankGUI.NoAutoEVA"></member><member name="P:FuelTankGUI.orbit"></member><member name="P:FuelTankGUI.PartValues"></member><member name="P:FuelTankGUI.RecurseHighlight"></member><member name="P:FuelTankGUI.Resources"></member><member name="P:FuelTankGUI.Rigidbody"></member><member name="P:FuelTankGUI.ShieldedFromAirstream"></member><member name="P:FuelTankGUI.Splashed"></member><member name="P:FuelTankGUI.State"></member><member name="P:FuelTankGUI.tag"></member><member name="P:FuelTankGUI.transform"></member><member name="P:FuelTankGUI.useGUILayout"></member><member name="P:FuelTankGUI.WCoM"></member><member name="M:FuelTankGUI.activate(System.Int32,Vessel)"></member><member name="M:FuelTankGUI.AddAttachNode(ConfigNode)"></member><member name="M:FuelTankGUI.addChild(Part)"></member><member name="M:FuelTankGUI.AddCrewmember(ProtoCrewMember)"></member><member name="M:FuelTankGUI.AddCrewmemberAt(ProtoCrewMember,System.Int32)"></member><member name="M:FuelTankGUI.AddExposedThermalFlux(System.Double)"></member><member name="M:FuelTankGUI.AddInternalPart(ConfigNode)"></member><member name="M:FuelTankGUI.AddModule(string)"></member><member name="M:FuelTankGUI.AddModule(ConfigNode)"></member><member name="M:FuelTankGUI.AddOnMouseDown(Part+OnActionDelegate)"></member><member name="M:FuelTankGUI.AddOnMouseEnter(Part+OnActionDelegate)"></member><member name="M:FuelTankGUI.AddOnMouseExit(Part+OnActionDelegate)"></member><member name="M:FuelTankGUI.AddResource(ConfigNode)"></member><member name="M:FuelTankGUI.AddShield(IAirstreamShield)"></member><member name="M:FuelTankGUI.AddSkinThermalFlux(System.Double)"></member><member name="M:FuelTankGUI.AddThermalFlux(System.Double)"></member><member name="M:FuelTankGUI.AlreadyProcessedRequest(System.Int32)"></member><member name="M:FuelTankGUI.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:FuelTankGUI.BroadcastMessage(string,object)"></member><member name="M:FuelTankGUI.BroadcastMessage(string)"></member><member name="M:FuelTankGUI.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:FuelTankGUI.CancelInvoke"></member><member name="M:FuelTankGUI.CancelInvoke(string)"></member><member name="M:FuelTankGUI.CheckCollision(UnityEngine.Collision)"></member><member name="M:FuelTankGUI.checkLanded"></member><member name="M:FuelTankGUI.checkPermanentLandedAt"></member><member name="M:FuelTankGUI.checkSplashed"></member><member name="M:FuelTankGUI.CheckTransferDialog"></member><member name="M:FuelTankGUI.cleanReferencesFromOtherParts"></member><member name="M:FuelTankGUI.CompareTag(string)"></member><member name="M:FuelTankGUI.Couple(Part)"></member><member name="M:FuelTankGUI.CreateInternalModel"></member><member name="M:FuelTankGUI.deactivate"></member><member name="M:FuelTankGUI.decouple(System.Single)"></member><member name="M:FuelTankGUI.DespawnIVA"></member><member name="M:FuelTankGUI.Die"></member><member name="M:FuelTankGUI.disconnect(System.Boolean)"></member><member name="M:FuelTankGUI.DrainFuel(System.Single)"></member><member name="M:FuelTankGUI.drawStats"></member><member name="M:FuelTankGUI.Effect(string)"></member><member name="M:FuelTankGUI.Effect(string,System.Single)"></member><member name="M:FuelTankGUI.Equals(object)"></member><member name="M:FuelTankGUI.explode"></member><member name="M:FuelTankGUI.Finalize"></member><member name="M:FuelTankGUI.findAttachNode(string)"></member><member name="M:FuelTankGUI.findAttachNodeByPart(Part)"></member><member name="M:FuelTankGUI.findAttachNodes(string)"></member><member name="M:FuelTankGUI.FindChildPart(string)"></member><member name="M:FuelTankGUI.FindChildPart(string,System.Boolean)"></member><member name="M:FuelTankGUI.FindChildPart"></member><member name="M:FuelTankGUI.FindChildPart(System.Boolean)"></member><member name="M:FuelTankGUI.FindChildParts"></member><member name="M:FuelTankGUI.FindChildParts(System.Boolean)"></member><member name="M:FuelTankGUI.FindFuel(Part,System.Collections.Generic.List,System.UInt32)"></member><member name="M:FuelTankGUI.findFxGroup(string)"></member><member name="M:FuelTankGUI.FindModelAnimator(string,string)"></member><member name="M:FuelTankGUI.FindModelAnimators(string)"></member><member name="M:FuelTankGUI.FindModelAnimators"></member><member name="M:FuelTankGUI.FindModelComponent"></member><member name="M:FuelTankGUI.FindModelComponent(string)"></member><member name="M:FuelTankGUI.FindModelComponents"></member><member name="M:FuelTankGUI.FindModelComponents(string)"></member><member name="M:FuelTankGUI.FindModelTransform(string)"></member><member name="M:FuelTankGUI.FindModelTransforms(string)"></member><member name="M:FuelTankGUI.FindModuleImplementing"></member><member name="M:FuelTankGUI.FindModulesImplementing"></member><member name="M:FuelTankGUI.FindNonPhysicslessChildren(System.Collections.Generic.List)"></member><member name="M:FuelTankGUI.FindNonPhysicslessParent"></member><member name="M:FuelTankGUI.FindPartThroughNodes(Part,Part)"></member><member name="M:FuelTankGUI.FindResource_StackPriority(Part,System.Collections.Generic.List,System.Int32,System.Double,System.Int32,System.Boolean,double&amp;,double&amp;,System.Collections.Generic.List,System.Boolean)"></member><member name="M:FuelTankGUI.force_activate"></member><member name="M:FuelTankGUI.freeze"></member><member name="M:FuelTankGUI.GetComponent(System.Type)"></member><member name="M:FuelTankGUI.GetComponent"></member><member name="M:FuelTankGUI.GetComponent(string)"></member><member name="M:FuelTankGUI.GetComponentInChildren(System.Type)"></member><member name="M:FuelTankGUI.GetComponentInChildren"></member><member name="M:FuelTankGUI.GetComponentInParent(System.Type)"></member><member name="M:FuelTankGUI.GetComponentInParent"></member><member name="M:FuelTankGUI.GetComponents(System.Type)"></member><member name="M:FuelTankGUI.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:FuelTankGUI.GetComponents(List)"></member><member name="M:FuelTankGUI.GetComponents"></member><member name="M:FuelTankGUI.GetComponentsInChildren(System.Type)"></member><member name="M:FuelTankGUI.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:FuelTankGUI.GetComponentsInChildren(System.Boolean)"></member><member name="M:FuelTankGUI.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:FuelTankGUI.GetComponentsInChildren"></member><member name="M:FuelTankGUI.GetComponentsInChildren(List)"></member><member name="M:FuelTankGUI.GetComponentsInParent(System.Type)"></member><member name="M:FuelTankGUI.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:FuelTankGUI.GetComponentsInParent(System.Boolean)"></member><member name="M:FuelTankGUI.GetComponentsInParent(System.Boolean,List)"></member><member name="M:FuelTankGUI.GetComponentsInParent"></member><member name="M:FuelTankGUI.GetConnectedResources(System.Int32,ResourceFlowMode,System.Collections.Generic.List)"></member><member name="M:FuelTankGUI.GetConnectedResources(System.Int32,ResourceFlowMode,System.Collections.Generic.List,double&amp;,double&amp;)"></member><member name="M:FuelTankGUI.GetHashCode"></member><member name="M:FuelTankGUI.GetInstanceID"></member><member name="M:FuelTankGUI.GetModuleCosts(System.Single)"></member><member name="M:FuelTankGUI.GetModuleMass(System.Single)"></member><member name="M:FuelTankGUI.GetModuleSize(UnityEngine.Vector3)"></member><member name="M:FuelTankGUI.GetPhysicslessChildMass"></member><member name="M:FuelTankGUI.GetReferenceTransform"></member><member name="M:FuelTankGUI.GetResourceMass"></member><member name="M:FuelTankGUI.GetResourceMass(float&amp;)"></member><member name="M:FuelTankGUI.GetResourceMass(double&amp;)"></member><member name="M:FuelTankGUI.getSymmetryCounterPart(System.Int32)"></member><member name="M:FuelTankGUI.GetType"></member><member name="M:FuelTankGUI.HandleCollision(UnityEngine.Collision)"></member><member name="M:FuelTankGUI.hasIndirectChild(Part)"></member><member name="M:FuelTankGUI.hasIndirectParent(Part)"></member><member name="M:FuelTankGUI.highlight(UnityEngine.Color)"></member><member name="M:FuelTankGUI.highlightRecursive(UnityEngine.Color)"></member><member name="M:FuelTankGUI.InitializeEffects"></member><member name="M:FuelTankGUI.InitializeModules"></member><member name="M:FuelTankGUI.Invoke(string,System.Single)"></member><member name="M:FuelTankGUI.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:FuelTankGUI.IsInvoking(string)"></member><member name="M:FuelTankGUI.IsInvoking"></member><member name="M:FuelTankGUI.isSymmetryCounterPart(Part)"></member><member name="M:FuelTankGUI.LateUpdate"></member><member name="M:FuelTankGUI.LoadEffects(ConfigNode)"></member><member name="M:FuelTankGUI.LoadModule(ConfigNode,int&amp;)"></member><member name="M:FuelTankGUI.MemberwiseClone"></member><member name="M:FuelTankGUI.onActiveFixedUpdate"></member><member name="M:FuelTankGUI.onActiveUpdate"></member><member name="M:FuelTankGUI.onAttach(Part,System.Boolean)"></member><member name="M:FuelTankGUI.onBackup"></member><member name="M:FuelTankGUI.OnCollisionEnter(UnityEngine.Collision)"></member><member name="M:FuelTankGUI.OnCollisionExit(UnityEngine.Collision)"></member><member name="M:FuelTankGUI.OnCollisionStay(UnityEngine.Collision)"></member><member name="M:FuelTankGUI.OnCopy(Part,System.Boolean)"></member><member name="M:FuelTankGUI.onCopy(Part,System.Boolean)"></member><member name="M:FuelTankGUI.onCtrlUpd(FlightCtrlState)"></member><member name="M:FuelTankGUI.onDecouple(System.Single)"></member><member name="M:FuelTankGUI.OnDelete"></member><member name="M:FuelTankGUI.onDetach(System.Boolean)"></member><member name="M:FuelTankGUI.onDisconnect"></member><member name="M:FuelTankGUI.OnDrawStats"></member><member name="M:FuelTankGUI.onEditorUpdate"></member><member name="M:FuelTankGUI.onFlightStart"></member><member name="M:FuelTankGUI.onFlightStartAtLaunchPad"></member><member name="M:FuelTankGUI.onFlightStateLoad(System.Collections.Generic.Dictionary)"></member><member name="M:FuelTankGUI.onFlightStateLoad(Dictionary&lt;string,KSPParseable&gt;)"></member><member name="M:FuelTankGUI.onFlightStateSave(System.Collections.Generic.Dictionary)"></member><member name="M:FuelTankGUI.onFlightStateSave(Dictionary&lt;string,KSPParseable&gt;)"></member><member name="M:FuelTankGUI.onGamePause"></member><member name="M:FuelTankGUI.onGameResume"></member><member name="M:FuelTankGUI.OnGetStats"></member><member name="M:FuelTankGUI.onJointDisable"></member><member name="M:FuelTankGUI.onJointReset"></member><member name="M:FuelTankGUI.OnLiftOff"></member><member name="M:FuelTankGUI.OnLoad"></member><member name="M:FuelTankGUI.OnLoad(ConfigNode)"></member><member name="M:FuelTankGUI.onPack"></member><member name="M:FuelTankGUI.onPartActivate"></member><member name="M:FuelTankGUI.onPartAttach(Part)"></member><member name="M:FuelTankGUI.onPartAwake"></member><member name="M:FuelTankGUI.onPartDeactivate"></member><member name="M:FuelTankGUI.onPartDelete"></member><member name="M:FuelTankGUI.onPartDestroy"></member><member name="M:FuelTankGUI.onPartDetach"></member><member name="M:FuelTankGUI.onPartExplode"></member><member name="M:FuelTankGUI.onPartFixedUpdate"></member><member name="M:FuelTankGUI.OnPartJointBreak(System.Single)"></member><member name="M:FuelTankGUI.onPartLiftOff"></member><member name="M:FuelTankGUI.onPartLoad"></member><member name="M:FuelTankGUI.onPartSplashdown"></member><member name="M:FuelTankGUI.onPartStart"></member><member name="M:FuelTankGUI.onPartTouchdown"></member><member name="M:FuelTankGUI.onPartUpdate"></member><member name="M:FuelTankGUI.OnPointerClick(UnityEngine.EventSystems.PointerEventData)"></member><member name="M:FuelTankGUI.OnSave(ConfigNode)"></member><member name="M:FuelTankGUI.OnSplashDown"></member><member name="M:FuelTankGUI.onStartComplete"></member><member name="M:FuelTankGUI.OnTouchDown"></member><member name="M:FuelTankGUI.onUnpack"></member><member name="M:FuelTankGUI.Pack"></member><member name="M:FuelTankGUI.PromoteToPhysicalPart"></member><member name="M:FuelTankGUI.propagateControlUpdate(FlightCtrlState)"></member><member name="M:FuelTankGUI.RegisterCrew"></member><member name="M:FuelTankGUI.removeChild(Part)"></member><member name="M:FuelTankGUI.RemoveCrewmember(ProtoCrewMember)"></member><member name="M:FuelTankGUI.RemoveModule(PartModule)"></member><member name="M:FuelTankGUI.RemoveModules"></member><member name="M:FuelTankGUI.RemoveOnMouseDown(Part+OnActionDelegate)"></member><member name="M:FuelTankGUI.RemoveOnMouseEnter(Part+OnActionDelegate)"></member><member name="M:FuelTankGUI.RemoveOnMouseExit(Part+OnActionDelegate)"></member><member name="M:FuelTankGUI.RemoveShield(IAirstreamShield)"></member><member name="M:FuelTankGUI.RequestFuel(Part,System.Single,System.UInt32)"></member><member name="M:FuelTankGUI.RequestFuel(Part,System.Single,System.UInt32)"></member><member name="M:FuelTankGUI.RequestRCS(System.Single,System.Int32)"></member><member name="M:FuelTankGUI.RequestResource(System.Int32,System.Single)"></member><member name="M:FuelTankGUI.RequestResource(string,System.Single)"></member><member name="M:FuelTankGUI.RequestResource(System.Int32,System.Double)"></member><member name="M:FuelTankGUI.RequestResource(string,System.Double)"></member><member name="M:FuelTankGUI.RequestResource(System.Int32,System.Double,ResourceFlowMode)"></member><member name="M:FuelTankGUI.RequestResource(string,System.Double,ResourceFlowMode)"></member><member name="M:FuelTankGUI.ResetCollisionIgnores"></member><member name="M:FuelTankGUI.ResetJoints"></member><member name="M:FuelTankGUI.ResumeVelocity"></member><member name="M:FuelTankGUI.SaveEffects(ConfigNode)"></member><member name="M:FuelTankGUI.ScheduleSetCollisionIgnores"></member><member name="M:FuelTankGUI.SendEvent(string)"></member><member name="M:FuelTankGUI.SendEvent(string,BaseEventData)"></member><member name="M:FuelTankGUI.SendEvent(string,BaseEventData,System.Int32)"></member><member name="M:FuelTankGUI.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:FuelTankGUI.SendMessage(string,object)"></member><member name="M:FuelTankGUI.SendMessage(string)"></member><member name="M:FuelTankGUI.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:FuelTankGUI.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:FuelTankGUI.SendMessageUpwards(string,object)"></member><member name="M:FuelTankGUI.SendMessageUpwards(string)"></member><member name="M:FuelTankGUI.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:FuelTankGUI.SetCollisionIgnores"></member><member name="M:FuelTankGUI.SetDetectCollisions(System.Boolean)"></member><member name="M:FuelTankGUI.SetHierarchyRoot(Part)"></member><member name="M:FuelTankGUI.SetHighlight(System.Boolean,System.Boolean)"></member><member name="M:FuelTankGUI.SetHighlightColor(UnityEngine.Color)"></member><member name="M:FuelTankGUI.SetHighlightColor"></member><member name="M:FuelTankGUI.SetHighlightDefault"></member><member name="M:FuelTankGUI.SetHighlightType(Part+HighlightType)"></member><member name="M:FuelTankGUI.SetLayer(UnityEngine.GameObject,System.Int32)"></member><member name="M:FuelTankGUI.SetMirror(UnityEngine.Vector3)"></member><member name="M:FuelTankGUI.setOpacity(System.Single)"></member><member name="M:FuelTankGUI.setParent(Part)"></member><member name="M:FuelTankGUI.SetReferenceTransform(UnityEngine.Transform)"></member><member name="M:FuelTankGUI.SetResource(ConfigNode)"></member><member name="M:FuelTankGUI.SpawnIVA"></member><member name="M:FuelTankGUI.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:FuelTankGUI.StartCoroutine(string,object)"></member><member name="M:FuelTankGUI.StartCoroutine(string)"></member><member name="M:FuelTankGUI.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:FuelTankGUI.StopAllCoroutines"></member><member name="M:FuelTankGUI.StopCoroutine(string)"></member><member name="M:FuelTankGUI.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:FuelTankGUI.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:FuelTankGUI.ToString"></member><member name="M:FuelTankGUI.TransferResource(System.Int32,System.Double)"></member><member name="M:FuelTankGUI.TransferResource(PartResource,System.Double,Part)"></member><member name="M:FuelTankGUI.Undock(DockedVesselInfo)"></member><member name="M:FuelTankGUI.unfreeze"></member><member name="M:FuelTankGUI.Unpack"></member><member name="M:FuelTankGUI.UnregisterCrew"></member><member name="M:FuelTankGUI.UpdateOrgPosAndRot(Part)"></member><member name="M:FuelTankGUI.UpdateStageability(System.Boolean,System.Boolean)"></member><member name="M:FuelTankGUI.#ctor"></member><member name="T:Funding"></member><member name="F:Funding.runner"></member><member name="F:Funding.snapshot"></member><member name="F:Funding.targetScenes"></member><member name="F:Funding.Instance"><summary>Presumably the current instance of the game.  Unsure but it is used in Civilian Population code to add funds from "taxes".</summary></member><member name="P:Funding.ClassID"></member><member name="P:Funding.ClassName"></member><member name="P:Funding.enabled"></member><member name="P:Funding.Events"></member><member name="P:Funding.Fields"></member><member name="P:Funding.Funds"></member><member name="P:Funding.gameObject"></member><member name="P:Funding.hideFlags"></member><member name="P:Funding.isActiveAndEnabled"></member><member name="P:Funding.name"></member><member name="P:Funding.tag"></member><member name="P:Funding.transform"></member><member name="P:Funding.useGUILayout"></member><member name="M:Funding.AddFunds(System.Double,TransactionReasons)"><summary>Adds funds to the player's bank account equal to value.</summary></member><member name="M:Funding.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:Funding.BroadcastMessage(string,object)"></member><member name="M:Funding.BroadcastMessage(string)"></member><member name="M:Funding.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:Funding.CancelInvoke"></member><member name="M:Funding.CancelInvoke(string)"></member><member name="M:Funding.CompareTag(string)"></member><member name="M:Funding.Equals(object)"></member><member name="M:Funding.Finalize"></member><member name="M:Funding.GetComponent(System.Type)"></member><member name="M:Funding.GetComponent"></member><member name="M:Funding.GetComponent(string)"></member><member name="M:Funding.GetComponentInChildren(System.Type)"></member><member name="M:Funding.GetComponentInChildren"></member><member name="M:Funding.GetComponentInParent(System.Type)"></member><member name="M:Funding.GetComponentInParent"></member><member name="M:Funding.GetComponents(System.Type)"></member><member name="M:Funding.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:Funding.GetComponents(List)"></member><member name="M:Funding.GetComponents"></member><member name="M:Funding.GetComponentsInChildren(System.Type)"></member><member name="M:Funding.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:Funding.GetComponentsInChildren(System.Boolean)"></member><member name="M:Funding.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:Funding.GetComponentsInChildren"></member><member name="M:Funding.GetComponentsInChildren(List)"></member><member name="M:Funding.GetComponentsInParent(System.Type)"></member><member name="M:Funding.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:Funding.GetComponentsInParent(System.Boolean)"></member><member name="M:Funding.GetComponentsInParent(System.Boolean,List)"></member><member name="M:Funding.GetComponentsInParent"></member><member name="M:Funding.GetHashCode"></member><member name="M:Funding.GetInstanceID"></member><member name="M:Funding.GetType"></member><member name="M:Funding.Invoke(string,System.Single)"></member><member name="M:Funding.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:Funding.IsInvoking(string)"></member><member name="M:Funding.IsInvoking"></member><member name="M:Funding.Load(ConfigNode)"></member><member name="M:Funding.MemberwiseClone"></member><member name="M:Funding.OnAwake"></member><member name="M:Funding.OnDestroy"></member><member name="M:Funding.OnLoad(ConfigNode)"></member><member name="M:Funding.OnSave(ConfigNode)"></member><member name="M:Funding.Save(ConfigNode)"></member><member name="M:Funding.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:Funding.SendMessage(string,object)"></member><member name="M:Funding.SendMessage(string)"></member><member name="M:Funding.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:Funding.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:Funding.SendMessageUpwards(string,object)"></member><member name="M:Funding.SendMessageUpwards(string)"></member><member name="M:Funding.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:Funding.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:Funding.StartCoroutine(string,object)"></member><member name="M:Funding.StartCoroutine(string)"></member><member name="M:Funding.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:Funding.StopAllCoroutines"></member><member name="M:Funding.StopCoroutine(string)"></member><member name="M:Funding.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:Funding.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:Funding.ToString"></member><member name="M:Funding.CanAfford(System.Single)"></member><member name="M:Funding.#ctor"></member><member name="T:Game"></member><member name="F:Game.additionalSystems"></member><member name="F:Game.compatible"></member><member name="F:Game.config"></member><member name="F:Game.CrewRoster"></member><member name="F:Game.Description"></member><member name="F:Game.editorFacility"></member><member name="F:Game.file_version_major"></member><member name="F:Game.file_version_minor"></member><member name="F:Game.file_version_revision"></member><member name="F:Game.flagURL"></member><member name="F:Game.flightState"></member><member name="F:Game.launchID"></member><member name="F:Game.linkCaption"></member><member name="F:Game.linkURL"></member><member name="F:Game.modded"></member><member name="F:Game.Mode"></member><member name="F:Game.Parameters"></member><member name="F:Game.scenarios"><summary>A list of all scenario templates in the currently loaded game.   Since most ProtoScenarioModules contain a reference to the Scenario that represents  them, this member is the easiest way to locate a specific Scenario in most cases. It is  recommended that ProtoScenarioModules be searched by</summary><c>ProtoScenarioModule.moduleName</c><remarks>,  not by</remarks><c>ProtoScenarioModule.moduleRef</c><remarks>, as the latter may be null.</remarks></member><member name="F:Game.startScene"></member><member name="F:Game.Status"></member><member name="F:Game.Title"></member><member name="F:Game.lastCompatibleMajor"></member><member name="F:Game.lastCompatibleMinor"></member><member name="F:Game.lastCompatibleRev"></member><member name="P:Game.CurrenciesAvailable"></member><member name="P:Game.UniversalTime"></member><member name="M:Game.AddProtoScenarioModule(System.Type,GameScenes[])"><summary>Creates a new scenario of the specified type. Once created, the scenario will persist  automatically.</summary><returns>A ProtoScenarioModule corresponding to the newly installed scenario.</returns><param name="typeOfScnModule">The scenario module to create. The object represented by  this type must be a subclass of ScenarioModule.</param><param name="scenes">The scenes in which the scenario should automatically load itself.</param></member><member name="M:Game.AddVessel(ConfigNode)"></member><member name="M:Game.DestroyVessel(Vessel)"></member><member name="M:Game.Equals(object)"></member><member name="M:Game.Finalize"></member><member name="M:Game.GetHashCode"></member><member name="M:Game.GetType"></member><member name="M:Game.IsResumable"></member><member name="M:Game.Load"></member><member name="M:Game.MemberwiseClone"></member><member name="M:Game.RemoveProtoScenarioModule(System.Type)"><summary>Unregisters a ProtoScenarioModule from the game. It will not persist until the scenario  is re-added. IMPORTANT: calling this method DOES NOT remove the Scenario object itself, which will  continue to run until the next scene change.</summary><returns><c>true</c>, if the ProtoScenarioModule was removed,</returns><param name="typeOfScnModule">The scenario module to de-persist. The object represented by  this type must be a subclass of ScenarioModule.</param></member><member name="M:Game.Save(ConfigNode)"></member><member name="M:Game.Start"></member><member name="M:Game.ToString"></member><member name="M:Game.Updated"></member><member name="M:Game.GetCloneOf(Game)"></member><member name="M:Game.#ctor"></member><member name="M:Game.#ctor(ConfigNode)"></member><member name="T:GameEvents"><summary>GameEvents are EventData or EventVoid methods called when certain conditions are met.  Many include some relevant data on the objects affected when they are triggered.  Use:</summary><c>GameEvents.desiredEvent.Add(yourMethod);</c><remarks>and</remarks><c>GameEvents.desiredEvent.Removed(yourMethod);</c><remarks>to add and remove methods from a list of methods to be called when the event is triggered.  Methods are generally added in your object's Start or Awake method and generally removed in your object's OnDestroy method.  Be sure not add methods multiple times withoud destroying them between additions.</remarks></member><member name="F:GameEvents.Modifiers"></member><member name="F:GameEvents.onActiveJointNeedUpdate"><summary>Triggered when a vessel docks or attaches with the grappling device; fires twice, once for each vessel</summary></member><member name="F:GameEvents.OnAppFocus"></member><member name="F:GameEvents.onAsteroidSpawned"></member><member name="F:GameEvents.OnCameraChange"></member><member name="F:GameEvents.onCollision"><summary>Triggered when two parts collide</summary></member><member name="F:GameEvents.OnCollisionEnhancerHit"></member><member name="F:GameEvents.OnCollisionIgnoreUpdate"></member><member name="F:GameEvents.onCrash"><summary>Triggered when a part or vessel crashes into the terrain</summary></member><member name="F:GameEvents.onCrashSplashdown"><summary>Triggered when a part crashes into the ocean</summary></member><member name="F:GameEvents.onCrewBoardVessel"><summary>Triggered when an EVA Kerbal boards a vessel</summary></member><member name="F:GameEvents.onCrewKilled"><summary>Triggered whenever a Kerbal dies; either on EVA or in a crashing vessel</summary></member><member name="F:GameEvents.OnCrewmemberHired"><summary>Triggered when a Kerbal is hired</summary></member><member name="F:GameEvents.OnCrewmemberLeftForDead"></member><member name="F:GameEvents.OnCrewmemberSacked"><summary>Triggered when  Kerbal is sacked</summary></member><member name="F:GameEvents.onCrewOnEva"><summary>Triggered when a Kerbal goes on EVA</summary></member><member name="F:GameEvents.onCrewTransferred"><summary>Triggers when a Kerbal transfers from one part to another (occurs AFTER the transfer)</summary></member><member name="F:GameEvents.onDominantBodyChange"><summary>Triggered when changing SOI; both objects return the new dominant CelestialBody  See also onVesselSOIChanged</summary></member><member name="F:GameEvents.onEditorConstructionModeChange"></member><member name="F:GameEvents.onEditorLoad"></member><member name="F:GameEvents.onEditorPartDeleted"></member><member name="F:GameEvents.onEditorPartEvent"></member><member name="F:GameEvents.onEditorPartPicked"></member><member name="F:GameEvents.onEditorPartPlaced"></member><member name="F:GameEvents.onEditorPodDeleted"></member><member name="F:GameEvents.onEditorPodSelected"></member><member name="F:GameEvents.onEditorRedo"></member><member name="F:GameEvents.onEditorRestart"></member><member name="F:GameEvents.onEditorRestoreState"></member><member name="F:GameEvents.onEditorScreenChange"></member><member name="F:GameEvents.onEditorShipModified"><summary>Triggered when any part is added or removed from a vessel in the editor; also triggered when any tweakable settings are changed; also when undo is called</summary></member><member name="F:GameEvents.onEditorShowPartList"></member><member name="F:GameEvents.onEditorSnapModeChange"></member><member name="F:GameEvents.onEditorStarted"></member><member name="F:GameEvents.onEditorSymmetryCoordsChange"></member><member name="F:GameEvents.onEditorSymmetryMethodChange"></member><member name="F:GameEvents.onEditorSymmetryModeChange"></member><member name="F:GameEvents.onEditorUndo"></member><member name="F:GameEvents.OnExperimentDeployed"></member><member name="F:GameEvents.onFlagPlant"><summary>When a flag is planted by an EVA Kerbal</summary></member><member name="F:GameEvents.onFlagSelect"><summary>Triggered when a flag is selected from the space center's flag pole</summary></member><member name="F:GameEvents.OnFlightCameraAngleChange"></member><member name="F:GameEvents.OnFlightCameraModeChange"><summary>Triggers whenever the CameraMode in the CameraManager class changes</summary></member><member name="F:GameEvents.OnFlightGlobalsReady"></member><member name="F:GameEvents.OnFlightLogRecorded"></member><member name="F:GameEvents.onFlightReady"><summary>Triggered when a vessel is fully loaded</summary></member><member name="F:GameEvents.OnFlightUIModeChanged"></member><member name="F:GameEvents.onFloatingOriginShift"><summary>Deprecated?</summary></member><member name="F:GameEvents.OnFundsChanged"><summary>When Funds level changes, returns total Funds amount</summary></member><member name="F:GameEvents.OnGameDatabaseLoaded"></member><member name="F:GameEvents.onGamePause"><summary>When the game is paused</summary></member><member name="F:GameEvents.onGameSceneLoadRequested"><summary>Triggered upon scene change requests; returns the target GameScene</summary></member><member name="F:GameEvents.onGameSceneSwitchRequested"><summary>Is triggered just prior to a game scene change</summary></member><member name="F:GameEvents.OnGameSettingsApplied"><summary>When Game Settings are applied in the main settings menu, or the in-game settings menu</summary></member><member name="F:GameEvents.onGameStateCreated"><summary>When a game is first created or loaded; returns the Game object</summary></member><member name="F:GameEvents.onGameStateLoad"><summary>Triggered on loading a game, returns the game's full ConfigNode from the persistent file</summary></member><member name="F:GameEvents.onGameStatePostLoad"></member><member name="F:GameEvents.onGameStateSave"><summary>Triggered on saving a game, returns the game's full ConfigNode from the persistent file</summary></member><member name="F:GameEvents.onGameStateSaved"><summary>Triggered when a game is saved, returns the Game object;</summary></member><member name="F:GameEvents.onGameUnpause"><summary>When the game is unpaused</summary></member><member name="F:GameEvents.onGUIAdministrationFacilityDespawn"></member><member name="F:GameEvents.onGUIAdministrationFacilitySpawn"></member><member name="F:GameEvents.onGUIApplicationLauncherDestroyed"><summary>When the application launcher (toolbar) is closed</summary></member><member name="F:GameEvents.onGUIApplicationLauncherReady"><summary>Called when the ApplicationLauncher toolbar is ready to have buttons added to it.</summary></member><member name="F:GameEvents.onGUIApplicationLauncherUnreadifying"></member><member name="F:GameEvents.onGUIAstronautComplexDespawn"><summary>When the astronaut complex window closes</summary></member><member name="F:GameEvents.onGUIAstronautComplexSpawn"><summary>When the astronaut complex window opens; from the space center or editor</summary></member><member name="F:GameEvents.onGUIEditorToolbarReady"></member><member name="F:GameEvents.onGUIEngineersReportDestroy"></member><member name="F:GameEvents.onGUIEngineersReportReady"></member><member name="F:GameEvents.onGUIKSPediaDespawn"><summary>Triggers when the KSPedia window is closed</summary></member><member name="F:GameEvents.onGUIKSPediaSpawn"><summary>Triggers when the KSPedia window is opened</summary></member><member name="F:GameEvents.onGUILaunchScreenDespawn"><summary>When the vessel selection screen is closed or a vessel is selected and launched</summary></member><member name="F:GameEvents.onGUILaunchScreenSpawn"><summary>When the launch screen (that allows you to view and select available vessels) is opened; after selecting the launchpad/runway from the space center.  See VesselSpawnInfo for more on what is returned by this callback.</summary></member><member name="F:GameEvents.onGUILaunchScreenVesselSelected"><summary>When a vessel is selected from the vessel selection screen at the space center</summary></member><member name="F:GameEvents.onGUILock"></member><member name="F:GameEvents.onGUIMessageSystemReady"><summary>When the application launcher's message button is ready</summary></member><member name="F:GameEvents.onGUIMissionControlDespawn"><summary>When the mission control center window closes</summary></member><member name="F:GameEvents.onGUIMissionControlSpawn"><summary>When the mission control center window opens</summary></member><member name="F:GameEvents.onGUIPrefabLauncherReady"><summary>When the application launcher (toolbar) loads; triggers before onGUIApplicationLauncherReady and onGUIMessageSystemReady</summary></member><member name="F:GameEvents.onGUIRecoveryDialogDespawn"><summary>When the recovery dialog window closes</summary></member><member name="F:GameEvents.onGUIRecoveryDialogSpawn"><summary>When the recovery dialog window opens</summary></member><member name="F:GameEvents.onGUIRnDComplexDespawn"><summary>When the R&amp;amp;D center window closes</summary></member><member name="F:GameEvents.onGUIRnDComplexSpawn"><summary>When the R&amp;amp;D center window opens</summary></member><member name="F:GameEvents.onGUIUnlock"></member><member name="F:GameEvents.onHideUI"><summary>Called when the player hides the UI by pressing F2. Register for this callback (and for onShowUI) so that you can hide your UI too.</summary></member><member name="F:GameEvents.onInputLocksModified"><summary>Triggered when input locks are activated or deactivated; when putting the mouse over one window/button locks the controls of another window/button</summary></member><member name="F:GameEvents.OnIVACameraKerbalChange"><summary>This event is triggered every time the camera switches to another Kerbal in IVA mode</summary></member><member name="F:GameEvents.onJointBreak"><summary>Deprecated? Use onPartJointBreak</summary></member><member name="F:GameEvents.onKerbalAdded"><summary>Triggered when a new Kerbal is added in the astronaut complex scene; also triggered when a rescue Kerbal contract is generated</summary></member><member name="F:GameEvents.onKerbalRemoved"><summary>Triggered when a Kerbal is removed from the roster in the astronaut complex; also triggered when a rescue Kerbal contract is failed, expires, or declined</summary></member><member name="F:GameEvents.onKerbalStatusChange"><summary>Triggered when the ProtoCrewMember.RosterStatus changes; usually upon vessel recovery, new crew addition, or death; returns the ProtoCrewMember and its old and new status</summary></member><member name="F:GameEvents.onKerbalTypeChange"><summary>Triggered when the ProtoCrewMember.KerbalType changes; KerbalTypes are possibly not fully implemented; occurs upon hiring crew or rescuing Kerbal</summary></member><member name="F:GameEvents.onKnowledgeChanged"><summary>Triggered upon starting or stopping asteroid tracking, or when approaching an asteroid</summary></member><member name="F:GameEvents.onKrakensbaneDisengage"><summary>Triggered when a vessel's velocity falls below ~750m/s</summary></member><member name="F:GameEvents.onKrakensbaneEngage"><summary>Triggered when a vessel's velocity reaches ~750m/s</summary></member><member name="F:GameEvents.OnKSCFacilityUpgraded"></member><member name="F:GameEvents.OnKSCFacilityUpgrading"></member><member name="F:GameEvents.OnKSCStructureCollapsed"></member><member name="F:GameEvents.OnKSCStructureCollapsing"></member><member name="F:GameEvents.OnKSCStructureRepaired"></member><member name="F:GameEvents.OnKSCStructureRepairing"></member><member name="F:GameEvents.onLaunch"><summary>Triggered when launching by activating the first stage</summary></member><member name="F:GameEvents.onLevelWasLoaded"><summary>Triggered when a new scene is loaded; returns that GameScene; occurs after onGameSceneLoadRequested</summary></member><member name="F:GameEvents.onLevelWasLoadedGUIReady"></member><member name="F:GameEvents.OnMapEntered"><summary>Triggers when Map mode is entered in flight scene</summary></member><member name="F:GameEvents.OnMapExited"><summary>Triggers when Map mode is exited in flight scene</summary></member><member name="F:GameEvents.OnMapViewFiltersModified"></member><member name="F:GameEvents.onMissionFlagSelect"><summary>Triggered when selecting a new flag from in the editor; returns the flag texture's GameDatabse URL</summary></member><member name="F:GameEvents.onNewVesselCreated"><summary>Triggered when spawning a new asteroid or a new Kerbal for a rescue Kerbal contract</summary></member><member name="F:GameEvents.onOverheat"><summary>Triggered when a part overheats; returns an EventReport with the part name</summary></member><member name="F:GameEvents.onPartActionUICreate"><summary>Triggered when right-clicking a part; returns that part; triggered every time a part event is selected</summary></member><member name="F:GameEvents.onPartActionUIDismiss"><summary>Triggered when closing the right-click menu of a part</summary></member><member name="F:GameEvents.onPartAttach"><summary>Triggered when adding a part in the editor, when docking, and when another vessel comes into range and is loaded; returns the part and its new parent part</summary></member><member name="F:GameEvents.onPartCouple"><summary>Triggered when a docking port or asteroid grappling device attaches; returns the host part and the target part</summary></member><member name="F:GameEvents.onPartDestroyed"><summary>Triggered when a part object's OnDestroy method is called; occurs any time a part or vessel is unloaded, ie scene changes or vessel moving out of loading distance</summary></member><member name="F:GameEvents.onPartDie"><summary>Triggered when a part is destroyed, usually by exploding/crashing</summary></member><member name="F:GameEvents.onPartExplode"><summary>Triggered when a part explodes, usually due to crashing into the ground or into another part; also triggered by a part overheating and exploding</summary></member><member name="F:GameEvents.onPartJointBreak"><summary>Triggered when a part decouples, undocks, a grappling device undocks, a strut breaks, a part is destroyed, or when a part is removed in the editor</summary></member><member name="F:GameEvents.OnPartLoaderLoaded"></member><member name="F:GameEvents.onPartPack"><summary>Triggered when a part goes on rails (enters timewarp) or exits loading distance</summary></member><member name="F:GameEvents.OnPartPurchased"><summary>Triggered when purchasing a part in the R&amp;amp;D center; currently (KSP 0.24.2) called for all parts in a tech node when researching that node</summary></member><member name="F:GameEvents.onPartRemove"><summary>Triggered when removing a part in the editor</summary></member><member name="F:GameEvents.onPartResourceEmptyFull"><summary>This event fires if you are transferring resources between parts and the amount to transfer in is more than the capacity of the part receiving the resource and it was empty before the transfer begun (resulting in the receiving part being full).</summary></member><member name="F:GameEvents.onPartResourceEmptyNonempty"><summary>This event fires if you are transferring resources between parts and the amount to transfer in is less than the capacity of the part receiving the resource and it was empty before the transfer begun.</summary></member><member name="F:GameEvents.onPartResourceFlowModeChange"></member><member name="F:GameEvents.onPartResourceFlowStateChange"></member><member name="F:GameEvents.onPartResourceFullEmpty"><summary>This event fires if you are transferring resources between parts and the amount transfered results in the from part going from full capacity to empty capacity.</summary></member><member name="F:GameEvents.onPartResourceFullNonempty"><summary>This event fires if you are transferring resources between parts and the amount transfered results in the from part going from full capacity and it still has some resource left in it at the end of the transfer.</summary></member><member name="F:GameEvents.onPartResourceNonemptyEmpty"><summary>This event fires if you are transferring resources between parts and the amount transferredis less than the capacity of the part receiving the resource and it was not  empty before the transfer begun.</summary></member><member name="F:GameEvents.onPartResourceNonemptyFull"><summary>This event fires if you are transferring resources between parts and the receiving part had some resource to begin with and it still has some resource left in it at the end of the trasfer (the receiving part is now full).</summary></member><member name="F:GameEvents.onPartUndock"><summary>Triggered upon undock event/action; not triggered by a docking node's decouple event; also triggered by asteroid grappling device's release event</summary></member><member name="F:GameEvents.onPartUnpack"><summary>Triggered when a part goes off rails (exits timewarp) or comes into loading distance</summary></member><member name="F:GameEvents.onPlanetariumTargetChanged"><summary>Triggered when the map view or tracking station camera focuses on a new object; this can be a Celestial Body or vessel; also triggered when switching to or loading a new vessel</summary></member><member name="F:GameEvents.OnPQSCityLoaded"></member><member name="F:GameEvents.OnPQSCityUnloaded"></member><member name="F:GameEvents.OnProgressAchieved"><summary>Triggered when a ProgressNode and all of its subNodes are completed.  See also OnProgressReached and OnProgressComplete</summary></member><member name="F:GameEvents.OnProgressComplete"><summary>Triggered when all sub ProgressNodes within a given ProgressNode are completed; records the UT of node completion and returns the ProgressNode  See the ProgressTracking module in the persistent.sfs file for more on how ProgressNodes are setup and saved.  If the ProgressNode is completed upon first achievement this will also trigger OnProgressReached.  See also OnProgressReached and OnProgressAchieved</summary></member><member name="F:GameEvents.onProgressNodeLoad"></member><member name="F:GameEvents.onProgressNodeSave"></member><member name="F:GameEvents.OnProgressReached"><summary>Triggered when a ProgressNode is first reached but not completed; records the UT of node achievement and returns the ProgressNode.  For instance, when a vessels first enters the SOI of a new Celestial Body the event will trigger and a "reached" entry will be added to the persistent.sfs file.  If a ProgressNode is completed at the same time it is reached (ie has no ProgressNode subNodes) OnProgressCompelete will be triggered at the same time  See the ProgressTracking module in the persistent.sfs file for more on how ProgressNodes are setup and saved.  See also OnProgressComplete and OnProgressAchieved</summary></member><member name="F:GameEvents.onProtoCrewMemberLoad"></member><member name="F:GameEvents.onProtoCrewMemberSave"></member><member name="F:GameEvents.onProtoPartModuleSnapshotLoad"></member><member name="F:GameEvents.onProtoPartModuleSnapshotSave"></member><member name="F:GameEvents.onProtoPartSnapshotLoad"></member><member name="F:GameEvents.onProtoPartSnapshotSave"></member><member name="F:GameEvents.onProtoVesselLoad"></member><member name="F:GameEvents.onProtoVesselSave"></member><member name="F:GameEvents.OnReputationChanged"><summary>When reputation level changes; returns total rep amount</summary></member><member name="F:GameEvents.OnResourceConverterOutput"></member><member name="F:GameEvents.onRotatingFrameTransition"><summary>Triggered when reference frame changes (ie from inertial to rotating); this is generally accompanied by a shift in the camera position and a debug log message ("Reference Frame: Rotating/Inertial")</summary></member><member name="F:GameEvents.onSameVesselDock"><summary>Triggered when two docking ports on the same vessel dock together</summary></member><member name="F:GameEvents.onSameVesselUndock"><summary>Triggered when two docking ports on the same vessel undock</summary></member><member name="F:GameEvents.OnScienceChanged"><summary>When science level changes; returns total science amount</summary></member><member name="F:GameEvents.OnScienceRecieved"><summary>Triggered science data is transmitted or recovered; returns the amount of science and the ScienceSubject</summary></member><member name="F:GameEvents.onSetSpeedMode"></member><member name="F:GameEvents.onShowUI"><summary>Called when the player un-hides the UI by pressing F2. Register for this callback (and onHideUI) so that you can un-hide your UI too.</summary></member><member name="F:GameEvents.onSplashDamage"><summary>Triggered when engine exhaust damages another part</summary></member><member name="F:GameEvents.onStageActivate"><summary>Triggered upon staging, returns the stage number</summary></member><member name="F:GameEvents.onStageSeparation"><summary>Triggered by decoupler staging; also triggered by separation through a decoupler's right-click menu event</summary></member><member name="F:GameEvents.OnTechnologyResearched"><summary>Triggered when researching a tech node in the R&amp;amp;D center; triggers whether or not you have enough science to unlock the node</summary></member><member name="F:GameEvents.onTimeWarpRateChanged"><summary>Triggered whenever timewarp rate changes; applies to physics and non-physics timewarp; triggered by the key press also (called even if you are at max/min timewarp already)</summary></member><member name="F:GameEvents.onTooltipDestroyRequested"></member><member name="F:GameEvents.OnTriggeredDataTransmission"></member><member name="F:GameEvents.onUndock"><summary>Deprecated? Use onPartUndock</summary></member><member name="F:GameEvents.OnUpgradeableObjLevelChange"></member><member name="F:GameEvents.onVesselChange"><summary>Triggered when switching to a different vessel, loading a vessel, or launching</summary></member><member name="F:GameEvents.onVesselClearStaging"></member><member name="F:GameEvents.onVesselCreate"><summary>Triggered when a vessel is launched, or created by undocking, decoupling, planting a flag, or EVA; also triggered by new asteroid creation and rescue Kerbal contracts</summary></member><member name="F:GameEvents.onVesselDestroy"><summary>Triggered when a vessel instance is destroyed; any time a vessel is unloaded, ie scene changes, exiting loading distance</summary></member><member name="F:GameEvents.onVesselGoOffRails"><summary>Triggered when a vessel is loaded on the launchpad, when a vessel enters within loading distance, or when a vessel goes off of time warp</summary></member><member name="F:GameEvents.onVesselGoOnRails"><summary>Triggered when a vessel exits loading distance or enters time warp</summary></member><member name="F:GameEvents.onVesselLoaded"><summary>Triggered whenever a vessel's load method is called</summary></member><member name="F:GameEvents.onVesselOrbitClosed"><summary>Triggered when a closed orbit is reached</summary></member><member name="F:GameEvents.onVesselOrbitEscaped"><summary>Triggered when orbit eccentricity becomes &gt; 1</summary></member><member name="F:GameEvents.onVesselRecovered"><summary>Triggered after a vessel has been recovered and the science data and part values have been accounted for; occurs in the space center or tracking station.  Triggered after onVesselRecoveryProcessing</summary></member><member name="F:GameEvents.onVesselRecoveryProcessing"><summary>Triggered in the space center or tracking station when a vessel is recovered; occurs before onVesselRecovered</summary></member><member name="F:GameEvents.OnVesselRecoveryRequested"><summary>Triggered a vessel is recovered (the big green button at the top) from the flight scene</summary></member><member name="F:GameEvents.onVesselReferenceTransformSwitch"></member><member name="F:GameEvents.onVesselRename"><summary>Returns old 'from' vessel name and new 'to' vessel name</summary></member><member name="F:GameEvents.onVesselResumeStaging"></member><member name="F:GameEvents.OnVesselRollout"><summary>Triggered when vessel is loaded onto the launchpad from the editor/launch selection window; called after the transition to flight scene</summary></member><member name="F:GameEvents.onVesselSituationChange"><summary>Returns old and new vessel situations</summary></member><member name="F:GameEvents.onVesselSOIChanged"><summary>Returns old and new Celestial Body</summary></member><member name="F:GameEvents.onVesselSwitching"><summary>This even triggers whenever a switch occurs from one vessel to another</summary></member><member name="F:GameEvents.onVesselTerminated"><summary>Triggered when a vessel is deleted from the tracking station</summary></member><member name="F:GameEvents.onVesselWasModified"><summary>Triggered when any aspect of a vessel changes; docking, undocking, decoupling, parts breaking, crash, etc...</summary></member><member name="F:GameEvents.onVesselWillDestroy"><summary>Triggered when a vessel crashes, or passes into the atmosphere; when an EVA Kerbal boards, or when an asteroid is despawned</summary></member><member name="F:GameEvents.onWheelRepaired"></member><member name="M:GameEvents.Equals(object)"></member><member name="M:GameEvents.Finalize"></member><member name="M:GameEvents.GetHashCode"></member><member name="M:GameEvents.GetType"></member><member name="M:GameEvents.MemberwiseClone"></member><member name="M:GameEvents.ToString"></member><member name="M:GameEvents.#ctor"></member><member name="T:GameParameters"></member><member name="F:GameParameters.Career"></member><member name="F:GameParameters.Difficulty"></member><member name="F:GameParameters.Editor"></member><member name="F:GameParameters.Flight"></member><member name="F:GameParameters.preset"></member><member name="F:GameParameters.SpaceCenter"></member><member name="F:GameParameters.TrackingStation"></member><member name="F:GameParameters.DifficultyPresets"></member><member name="M:GameParameters.Equals(object)"></member><member name="M:GameParameters.Finalize"></member><member name="M:GameParameters.GetHashCode"></member><member name="M:GameParameters.GetType"></member><member name="M:GameParameters.Load(ConfigNode)"></member><member name="M:GameParameters.MemberwiseClone"></member><member name="M:GameParameters.Save(ConfigNode)"></member><member name="M:GameParameters.ToString"></member><member name="M:GameParameters.GetDefaultParameters(Game+Modes,GameParameters+Preset)"></member><member name="M:GameParameters.GetPresetColor(GameParameters+Preset)"></member><member name="M:GameParameters.GetPresetColorHex(GameParameters+Preset)"></member><member name="M:GameParameters.SetDifficultyPresets"></member><member name="M:GameParameters.#ctor"></member><member name="M:GameParameters.#ctor(ConfigNode)"></member><member name="T:GamePersistence"><summary>Contains some functions you can call to save the game state to a persistence file, or load the game state from a persistence file.</summary></member><member name="M:GamePersistence.Equals(object)"></member><member name="M:GamePersistence.Finalize"></member><member name="M:GamePersistence.GetHashCode"></member><member name="M:GamePersistence.GetType"></member><member name="M:GamePersistence.MemberwiseClone"></member><member name="M:GamePersistence.ToString"></member><member name="M:GamePersistence.LoadGame(string,string,System.Boolean,System.Boolean)"></member><member name="M:GamePersistence.LoadGameCfg(ConfigNode,string,System.Boolean,System.Boolean)"></member><member name="M:GamePersistence.LoadSFSFile(string,string)"></member><member name="M:GamePersistence.SaveGame(string,string,SaveMode)"><summary>Creates a persistence file containing the current game state.

SaveGame(string, string, SaveMode) calls SaveGame(HighLogic.CurrentGame.Updated(), string, string, SaveMode) (or creates CurrentGame if it doesn't exist).</summary><param name="saveFileName">The name of the persistence file to create (".sfs" will be appended automatically to the file name).</param><param name="saveFolder">The folder in which to create the save file. Use HighLogic.SaveFolder to acquire the default one for the current game.</param><param name="saveMode">Whether to overwrite, append, or abort if the given file already exists.</param><returns>Returns the filename on success. Returns an empty string when the file already exists and SaveMode.ABORT is used.</returns></member><member name="M:GamePersistence.SaveGame(Game,string,string,SaveMode)"><summary>For creating a savegame at the space center, simply use &lt;a href="#/classes/GamePersistence?scrollTo=SaveGameM"&gt;SaveGame(​string, string, SaveMode)&lt;/a&gt; instead. For quicksaves call &lt;a href="#/classes/Game?scrollTo=UpdatedM"&gt;Updated()&lt;/a&gt; on &lt;a href="#/classes/HighLogic?scrollTo=CurrentGameF"&gt;CurrentGame&lt;/a&gt; to get a Game, then reset that Game's startScene to FLIGHT, and then call SaveGame(Game, string, string, SaveMode).</summary><param name="game">The game for which you want to create a save file.</param><param name="saveFileName">The name of the persistence file to create (".sfs" will be appended to the file name).</param><param name="saveFolder">The folder in which to create the save file. Use HighLogic.SaveFolder to acquire the default one for the current game.</param><param name="saveMode">Whether to overwrite, append, or abort if the given file already exists.</param><returns>Returns the filename on success. Returns an empty string when the file already exists and SaveMode.ABORT is used.</returns></member><member name="M:GamePersistence.SaveGame(GameBackup,string,string,SaveMode)"></member><member name="M:GamePersistence.UpdateScenarioModules(Game)"></member><member name="M:GamePersistence.#ctor"></member><member name="T:GameScenes"><summary>An enum corresponding to the different Unity scenes in KSP</summary></member><member name="T:HighLogic"><summary>This class stores some very high-level information about the current game state.</summary></member><member name="F:HighLogic.currentGame"></member><member name="F:HighLogic.GameSaveFolder"></member><member name="F:HighLogic.log"></member><member name="F:HighLogic.maxLines"></member><member name="F:HighLogic.sceneBufferTransitionMatrix"></member><member name="F:HighLogic.showConsole"></member><member name="F:HighLogic.showConsoleOnError"></member><member name="F:HighLogic.skin"></member><member name="F:HighLogic.skinName"></member><member name="F:HighLogic.uiSkinDefAsset"></member><member name="F:HighLogic.FastEditorLoading"></member><member name="F:HighLogic.fetch"><summary>Use this instance to access non-static members of this class.</summary></member><member name="F:HighLogic.LoadedScene"></member><member name="F:HighLogic.LoadedSceneHasPlanetarium"></member><member name="F:HighLogic.LoadedSceneIsEditor"><summary>Whether the game is currently in the VAB or SPH scenes.</summary></member><member name="F:HighLogic.LoadedSceneIsFlight"><summary>Whether the game is currently in the flight scene.</summary></member><member name="F:HighLogic.LoadedSceneIsGame"></member><member name="P:HighLogic.enabled"></member><member name="P:HighLogic.gameObject"></member><member name="P:HighLogic.hideFlags"></member><member name="P:HighLogic.isActiveAndEnabled"></member><member name="P:HighLogic.name"></member><member name="P:HighLogic.tag"></member><member name="P:HighLogic.transform"></member><member name="P:HighLogic.useGUILayout"></member><member name="P:HighLogic.CurrentGame"></member><member name="P:HighLogic.SaveFolder"></member><member name="P:HighLogic.Skin"><summary>The GUISkin used by the game. Set GUI.skin = HighLogic.Skin at the start of your GUI function to use it yourself.</summary></member><member name="P:HighLogic.UISkin"></member><member name="M:HighLogic.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:HighLogic.BroadcastMessage(string,object)"></member><member name="M:HighLogic.BroadcastMessage(string)"></member><member name="M:HighLogic.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:HighLogic.CancelInvoke"></member><member name="M:HighLogic.CancelInvoke(string)"></member><member name="M:HighLogic.CompareTag(string)"></member><member name="M:HighLogic.Equals(object)"></member><member name="M:HighLogic.Finalize"></member><member name="M:HighLogic.GetComponent(System.Type)"></member><member name="M:HighLogic.GetComponent"></member><member name="M:HighLogic.GetComponent(string)"></member><member name="M:HighLogic.GetComponentInChildren(System.Type)"></member><member name="M:HighLogic.GetComponentInChildren"></member><member name="M:HighLogic.GetComponentInParent(System.Type)"></member><member name="M:HighLogic.GetComponentInParent"></member><member name="M:HighLogic.GetComponents(System.Type)"></member><member name="M:HighLogic.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:HighLogic.GetComponents(List)"></member><member name="M:HighLogic.GetComponents"></member><member name="M:HighLogic.GetComponentsInChildren(System.Type)"></member><member name="M:HighLogic.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:HighLogic.GetComponentsInChildren(System.Boolean)"></member><member name="M:HighLogic.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:HighLogic.GetComponentsInChildren"></member><member name="M:HighLogic.GetComponentsInChildren(List)"></member><member name="M:HighLogic.GetComponentsInParent(System.Type)"></member><member name="M:HighLogic.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:HighLogic.GetComponentsInParent(System.Boolean)"></member><member name="M:HighLogic.GetComponentsInParent(System.Boolean,List)"></member><member name="M:HighLogic.GetComponentsInParent"></member><member name="M:HighLogic.GetHashCode"></member><member name="M:HighLogic.GetInstanceID"></member><member name="M:HighLogic.GetType"></member><member name="M:HighLogic.Invoke(string,System.Single)"></member><member name="M:HighLogic.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:HighLogic.IsInvoking(string)"></member><member name="M:HighLogic.IsInvoking"></member><member name="M:HighLogic.MemberwiseClone"></member><member name="M:HighLogic.OnApplicationFocus(System.Boolean)"></member><member name="M:HighLogic.printCurrentGame"></member><member name="M:HighLogic.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:HighLogic.SendMessage(string,object)"></member><member name="M:HighLogic.SendMessage(string)"></member><member name="M:HighLogic.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:HighLogic.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:HighLogic.SendMessageUpwards(string,object)"></member><member name="M:HighLogic.SendMessageUpwards(string)"></member><member name="M:HighLogic.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:HighLogic.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:HighLogic.StartCoroutine(string,object)"></member><member name="M:HighLogic.StartCoroutine(string)"></member><member name="M:HighLogic.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:HighLogic.StopAllCoroutines"></member><member name="M:HighLogic.StopCoroutine(string)"></member><member name="M:HighLogic.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:HighLogic.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:HighLogic.ToString"></member><member name="M:HighLogic.bufferedLoad(System.Int32,System.Boolean)"></member><member name="M:HighLogic.LoadScene(GameScenes)"></member><member name="M:HighLogic.#ctor"></member><member name="T:IDiscoverable"><summary>Methods allowing information for celestial bodies or ships to be hidden at game start  These methods appear to be used in the tracking station. Implemented by CelestialBody Implemented by Vessel</summary></member><member name="P:IDiscoverable.DiscoveryInfo"><summary>Describes to what extent this object has been explored</summary></member><member name="M:IDiscoverable.RevealAltitude"><summary>Returns the object's altitude</summary><returns>The height above the reference sphere of the Celestial Body in 	whose sphere of influence the object lies, in meters.</returns></member><member name="M:IDiscoverable.RevealMass"><summary>Returns the object's mass Units are implementation-dependent.</summary></member><member name="M:IDiscoverable.RevealName"><summary>Returns the object's tracking station name</summary><returns>The string to display in the tracking station</returns></member><member name="M:IDiscoverable.RevealSituationString"><summary>Describes the state of the object</summary><returns>A string containing the sphere of influence and trajectory of the object<example>"Orbiting the Sun"</example></returns></member><member name="M:IDiscoverable.RevealSpeed"><summary>Returns the speed of the object</summary><returns>The inertial speed relative to the Celestial Body in whose sphere of influence 	the object lies, in meters per second.</returns></member><member name="M:IDiscoverable.RevealType"><summary>Gives the type of object used  Meaning is implementation-dependent.</summary></member><member name="T:IScienceDataContainer"><summary>Interface used by ModuleScienceExperiment and ModuleScienceContainer. Used for storing, transfering and transmitting Science Data.</summary></member><member name="M:IScienceDataContainer.DumpData(ScienceData)"><summary>Removes science data from the part, called after transmission or EVA data collection.</summary><param name="data"/></member><member name="M:IScienceDataContainer.GetData"><summary>Returns an array of all Science Data stored in the module.</summary><returns/></member><member name="M:IScienceDataContainer.GetScienceCount"><summary>Returns a count of Science Data reports stored in the module.</summary><returns/></member><member name="M:IScienceDataContainer.IsRerunnable"><summary>Can the experiment be run more than once?</summary><returns/></member><member name="M:IScienceDataContainer.ReturnData(ScienceData)"></member><member name="M:IScienceDataContainer.ReviewData"><summary>Opens the experimental results dialog page, displays stored Science Data.</summary></member><member name="M:IScienceDataContainer.ReviewDataItem(ScienceData)"><summary>Opens the experimental results dialog page, displays stored Science Data.</summary><param name="data"/></member><member name="T:ITargetable"><summary>Represents something that can be set as target while controlling a vessel. This is implemented by</summary><see cref="Vessel"/><remarks>,</remarks><see cref="CelestialBody"/><remarks>, and</remarks><see cref="ModuleDockingNode"/><remarks>.</remarks></member><member name="M:ITargetable.GetFwdVector"></member><member name="M:ITargetable.GetName"><summary>The name of this target.</summary></member><member name="M:ITargetable.GetObtVelocity"></member><member name="M:ITargetable.GetOrbit"></member><member name="M:ITargetable.GetOrbitDriver"></member><member name="M:ITargetable.GetSrfVelocity"></member><member name="M:ITargetable.GetTargetingMode"></member><member name="M:ITargetable.GetTransform"></member><member name="M:ITargetable.GetVessel"></member><member name="T:InputLockManager"><summary>This class lets you lock the player out of certain controls. It's probably what KSP uses internally to lock controls during time warp, or when out of electric charge.    You can view the current set of locks in-game with the Alt-F12 debug menu.</summary></member><member name="F:InputLockManager.lockMask"></member><member name="F:InputLockManager.lockStack"><summary>The set of locks currently in place?</summary></member><member name="P:InputLockManager.LockMask"><summary>If</summary><code>ControlTypes.X &amp;amp; LockMask != 0</code><remarks>then ControlTypes.X is locked?</remarks></member><member name="M:InputLockManager.Equals(object)"></member><member name="M:InputLockManager.Finalize"></member><member name="M:InputLockManager.GetHashCode"></member><member name="M:InputLockManager.GetType"></member><member name="M:InputLockManager.MemberwiseClone"></member><member name="M:InputLockManager.ToString"></member><member name="M:InputLockManager.ClearControlLocks"></member><member name="M:InputLockManager.ControlLocks(System.Int32,System.Int32)"></member><member name="M:InputLockManager.DebugLockStack"></member><member name="M:InputLockManager.GetControlLock(string)"></member><member name="M:InputLockManager.IsLocked(ControlTypes)"></member><member name="M:InputLockManager.IsLocked(ControlTypes,ControlTypes)"></member><member name="M:InputLockManager.IsLocking(ControlTypes,GameEvents+FromToAction)"></member><member name="M:InputLockManager.IsUnlocked(ControlTypes)"></member><member name="M:InputLockManager.IsUnlocked(ControlTypes,ControlTypes)"></member><member name="M:InputLockManager.IsUnlocking(ControlTypes,GameEvents+FromToAction)"></member><member name="M:InputLockManager.PrintLockStack"></member><member name="M:InputLockManager.RemoveControlLock(string)"><summary>Unlock a set of controls that were earlier locked with SetControlLock.</summary><param name="lockID">The string ID passed to SetControlLock.</param></member><member name="M:InputLockManager.SetControlLock(ControlTypes,string)"><summary>Locks a set of controls.</summary><param name="locks">Which controls to lock. You can OR several ControlTypes together to lock several types of controls at once.</param><param name="lockID">A unique string ID that you will pass to RemoveControlLock to unlock these controls.</param><returns>?</returns></member><member name="M:InputLockManager.SetControlLock(string)"></member><member name="T:KSP.IO.BinaryReader"><summary>Identical to System.IO.BinaryReader, but with added IDisposable methods (for use in using structures), and a factory method instead of constructors.</summary></member><member name="P:KSP.IO.BinaryReader.BaseStream"></member><member name="M:KSP.IO.BinaryReader.Close"></member><member name="M:KSP.IO.BinaryReader.Dispose"><summary>Close the stream and any resources (e.g. files) it has open.</summary></member><member name="M:KSP.IO.BinaryReader.Equals(object)"></member><member name="M:KSP.IO.BinaryReader.Finalize"></member><member name="M:KSP.IO.BinaryReader.GetHashCode"></member><member name="M:KSP.IO.BinaryReader.GetType"></member><member name="M:KSP.IO.BinaryReader.MemberwiseClone"></member><member name="M:KSP.IO.BinaryReader.PeekChar"></member><member name="M:KSP.IO.BinaryReader.Read(System.Byte[],System.Int32,System.Int32)"></member><member name="M:KSP.IO.BinaryReader.Read"></member><member name="M:KSP.IO.BinaryReader.Read(System.Char[],System.Int32,System.Int32)"></member><member name="M:KSP.IO.BinaryReader.Read(byte[],System.Int32,System.Int32)"><summary>Read a block of bytes from the stream.</summary><param name="buffer"/><param name="index"/><param name="count"/><returns/></member><member name="M:KSP.IO.BinaryReader.Read(char[],System.Int32,System.Int32)"><summary>Read a block of chars from the stream.</summary><param name="buffer"/><param name="index"/><param name="count"/><returns/></member><member name="M:KSP.IO.BinaryReader.ReadBoolean"></member><member name="M:KSP.IO.BinaryReader.ReadByte"></member><member name="M:KSP.IO.BinaryReader.ReadBytes(System.Int32)"></member><member name="M:KSP.IO.BinaryReader.ReadChar"></member><member name="M:KSP.IO.BinaryReader.ReadChars(System.Int32)"></member><member name="M:KSP.IO.BinaryReader.ReadDecimal"></member><member name="M:KSP.IO.BinaryReader.ReadDouble"></member><member name="M:KSP.IO.BinaryReader.ReadInt16"></member><member name="M:KSP.IO.BinaryReader.ReadInt32"></member><member name="M:KSP.IO.BinaryReader.ReadInt64"></member><member name="M:KSP.IO.BinaryReader.ReadSByte"></member><member name="M:KSP.IO.BinaryReader.ReadSingle"></member><member name="M:KSP.IO.BinaryReader.ReadString"></member><member name="M:KSP.IO.BinaryReader.ReadUInt16"></member><member name="M:KSP.IO.BinaryReader.ReadUInt32"></member><member name="M:KSP.IO.BinaryReader.ReadUInt64"></member><member name="M:KSP.IO.BinaryReader.ToString"></member><member name="M:KSP.IO.BinaryReader.CreateForType(string,Vessel)"><summary>Create a binary reader with the desired filename.</summary><typeparam name="T"/><param name="filename"/><param name="flight"/><returns/></member><member name="T:KSP.IO.BinaryWriter"><summary>Identical to System.IO.BinaryWriter, but with added IDisposable methods (for use in using structures), and a factory method instead of constructors.</summary></member><member name="P:KSP.IO.BinaryWriter.BaseStream"></member><member name="M:KSP.IO.BinaryWriter.Close"></member><member name="M:KSP.IO.BinaryWriter.Dispose"></member><member name="M:KSP.IO.BinaryWriter.Equals(object)"></member><member name="M:KSP.IO.BinaryWriter.Finalize"></member><member name="M:KSP.IO.BinaryWriter.Flush"></member><member name="M:KSP.IO.BinaryWriter.GetHashCode"></member><member name="M:KSP.IO.BinaryWriter.GetType"></member><member name="M:KSP.IO.BinaryWriter.MemberwiseClone"></member><member name="M:KSP.IO.BinaryWriter.Seek(System.Int32,KSP.IO.SeekOrigin)"></member><member name="M:KSP.IO.BinaryWriter.ToString"></member><member name="M:KSP.IO.BinaryWriter.Write(System.Double)"></member><member name="M:KSP.IO.BinaryWriter.Write(System.Decimal)"></member><member name="M:KSP.IO.BinaryWriter.Write(System.Single)"></member><member name="M:KSP.IO.BinaryWriter.Write(System.UInt32)"></member><member name="M:KSP.IO.BinaryWriter.Write(string)"></member><member name="M:KSP.IO.BinaryWriter.Write(System.UInt64)"></member><member name="M:KSP.IO.BinaryWriter.Write(System.Char)"></member><member name="M:KSP.IO.BinaryWriter.Write(System.Int32)"></member><member name="M:KSP.IO.BinaryWriter.Write(System.Char[],System.Int32,System.Int32)"></member><member name="M:KSP.IO.BinaryWriter.Write(System.UInt16)"></member><member name="M:KSP.IO.BinaryWriter.Write(System.Char[])"></member><member name="M:KSP.IO.BinaryWriter.Write(System.SByte)"></member><member name="M:KSP.IO.BinaryWriter.Write(System.Byte)"></member><member name="M:KSP.IO.BinaryWriter.Write(System.Boolean)"></member><member name="M:KSP.IO.BinaryWriter.Write(System.Byte[])"></member><member name="M:KSP.IO.BinaryWriter.Write(System.Byte[],System.Int32,System.Int32)"></member><member name="M:KSP.IO.BinaryWriter.Write(System.Int64)"></member><member name="M:KSP.IO.BinaryWriter.Write(System.Int16)"></member><member name="M:KSP.IO.BinaryWriter.Write(System.Byte)"></member><member name="M:KSP.IO.BinaryWriter.Write(byte[])"></member><member name="M:KSP.IO.BinaryWriter.Write(System.Char)"></member><member name="M:KSP.IO.BinaryWriter.Write(char[])"></member><member name="M:KSP.IO.BinaryWriter.Write(System.Decimal)"></member><member name="M:KSP.IO.BinaryWriter.Write(sbyte)"></member><member name="M:KSP.IO.BinaryWriter.Write(System.Int16)"></member><member name="M:KSP.IO.BinaryWriter.Write(System.UInt32)"></member><member name="M:KSP.IO.BinaryWriter.Write(System.UInt64)"></member><member name="M:KSP.IO.BinaryWriter.Write(System.UInt16)"></member><member name="M:KSP.IO.BinaryWriter.Write(byte[],System.Int32,System.Int32)"></member><member name="M:KSP.IO.BinaryWriter.Write(char[],System.Int32,System.Int32)"></member><member name="M:KSP.IO.BinaryWriter.CreateForType(string,Vessel)"><summary>Create a binary file writer.</summary><typeparam name="T"/><param name="filename"/><param name="flight"/><returns/></member><member name="T:KSP.IO.File"></member><member name="M:KSP.IO.File.Equals(object)"></member><member name="M:KSP.IO.File.Finalize"></member><member name="M:KSP.IO.File.GetHashCode"></member><member name="M:KSP.IO.File.GetType"></member><member name="M:KSP.IO.File.MemberwiseClone"></member><member name="M:KSP.IO.File.ToString"></member><member name="M:KSP.IO.File.AppendAllText(string,string,Vessel)"><summary>Append a string to a file, or creates it if it doesn't exist.</summary><typeparam name="T"/><param name="data"/><param name="filename"/><param name="flight"/></member><member name="M:KSP.IO.File.AppendText(string,Vessel)"><summary>Open a stream that appends to a file.</summary><typeparam name="T"/><param name="filename"/><param name="flight"/><returns/></member><member name="M:KSP.IO.File.Create(string,Vessel)"><summary>Open a stream that creates a file.</summary><typeparam name="T"/><param name="filename"/><param name="flight"/><returns/></member><member name="M:KSP.IO.File.CreateText(string,Vessel)"><summary>Open a stream that creates a file.</summary><typeparam name="T"/><param name="filename"/><param name="flight"/><returns/></member><member name="M:KSP.IO.File.Delete(string,Vessel)"><summary>Delete a file in your IO sandbox.</summary><typeparam name="T"/><param name="filename"/><param name="flight"/></member><member name="M:KSP.IO.File.Exists(string,Vessel)"><summary>Find out if a file in your IO sandbox exists.</summary><typeparam name="T"/><param name="filename"/><param name="flight"/><returns/></member><member name="M:KSP.IO.File.Open(string,KSP.IO.FileMode,Vessel)"><summary>Open a stream that operates on a file.</summary><typeparam name="T"/><param name="filename"/><param name="mode"/><param name="flight"/><returns/></member><member name="M:KSP.IO.File.OpenText(string,Vessel)"><summary>Open a stream that operates on a file.</summary><typeparam name="T"/><param name="filename"/><param name="flight"/><returns/></member><member name="M:KSP.IO.File.OpenWrite(string,Vessel)"><summary>Open a stream that writes to a file.</summary><typeparam name="T"/><param name="filename"/><param name="flight"/><returns/></member><member name="M:KSP.IO.File.ReadAllBytes(string,Vessel)"><summary>Read all the bytes from a file in your IO sandbox.</summary><typeparam name="T"/><param name="filename"/><param name="flight"/></member><member name="M:KSP.IO.File.ReadAllLines(string,Vessel)"><summary>Read all lines from a file in your IO sandbox.</summary><typeparam name="T"/><param name="filename"/><param name="flight"/><returns/></member><member name="M:KSP.IO.File.ReadAllText(string,Vessel)"><summary>Read all the text from a file in your IO sandbox.</summary><typeparam name="T"/><param name="filename"/><param name="flight"/><returns/></member><member name="M:KSP.IO.File.WriteAllBytes(System.Byte[],string,Vessel)"></member><member name="M:KSP.IO.File.WriteAllBytes(byte[],string,Vessel)"><summary>Write a bunch of bytes to a file on disk</summary><typeparam name="T"/><param name="data"/><param name="filename"/><param name="flight"/></member><member name="M:KSP.IO.File.WriteAllLines(string[],string,Vessel)"><summary>Write an array of strings to a file, with each string becoming a line.</summary><typeparam name="T"/><param name="data"/><param name="filename"/><param name="flight"/></member><member name="M:KSP.IO.File.WriteAllText(string,string,Vessel)"><summary>Write a string to a file.</summary><typeparam name="T"/><param name="data"/><param name="filename"/><param name="flight"/></member><member name="M:KSP.IO.File.#ctor"></member><member name="T:KSP.IO.FileInfo"><summary>A surrogate for System.IO.FileInfo.</summary></member><member name="P:KSP.IO.FileInfo.DirectoryName"><summary>Gets a string representing the directory's full path.</summary></member><member name="P:KSP.IO.FileInfo.Exists"><summary>Gets a value indicating whether a file exists.</summary></member><member name="P:KSP.IO.FileInfo.IsReadOnly"><summary>Gets or sets a value that determines if the current file is read only.</summary></member><member name="P:KSP.IO.FileInfo.Length"><summary>Gets the size, in bytes, of the current file.</summary></member><member name="P:KSP.IO.FileInfo.Name"><summary>Gets the name of the file.</summary></member><member name="M:KSP.IO.FileInfo.AppendText"><summary>Creates a System.IO.StreamWriter that appends text to the file represented by this instance of the System.IO.FileInfo.</summary><returns/></member><member name="M:KSP.IO.FileInfo.CopyTo(string,System.Boolean)"><summary>Copies an existing file to a new file, allowing the overwriting of an existing file.</summary><param name="destFileName"/><param name="overwrite"/><returns/></member><member name="M:KSP.IO.FileInfo.CopyTo(string)"><summary>Copies an existing file to a new file, disallowing the overwriting of an existing file.</summary><param name="destFileName"/><returns/></member><member name="M:KSP.IO.FileInfo.Create"><summary>Creates a file.</summary><returns/></member><member name="M:KSP.IO.FileInfo.CreateText"><summary>Creates a KSP.IO.TextWriter that writes a new text file.</summary><returns/></member><member name="M:KSP.IO.FileInfo.Decrypt"><summary>Decrypts a file that was encrypted by the current account using the System.IO.FileInfo.Encrypt() method.</summary></member><member name="M:KSP.IO.FileInfo.Delete"><summary>Permanently deletes a file.</summary></member><member name="M:KSP.IO.FileInfo.Encrypt"><summary>Encrypts a file so that only the account used to encrypt the file can decrypt it.</summary></member><member name="M:KSP.IO.FileInfo.Equals(object)"></member><member name="M:KSP.IO.FileInfo.Finalize"></member><member name="M:KSP.IO.FileInfo.GetHashCode"></member><member name="M:KSP.IO.FileInfo.GetType"></member><member name="M:KSP.IO.FileInfo.MemberwiseClone"></member><member name="M:KSP.IO.FileInfo.MoveTo(string)"><summary>Moves a specified file to a new location, providing the option to specify a new file name.</summary><param name="destFileName"/></member><member name="M:KSP.IO.FileInfo.Open(KSP.IO.FileMode,KSP.IO.FileAccess)"><summary>Opens a file in the specified mode with read, write, or read/write access.</summary><param name="mode"/><param name="access"/><returns/></member><member name="M:KSP.IO.FileInfo.Open(KSP.IO.FileMode)"><summary>Opens a file in the specified mode.</summary><param name="mode"/><returns/></member><member name="M:KSP.IO.FileInfo.Open(KSP.IO.FileMode,KSP.IO.FileAccess,KSP.IO.FileShare)"><summary>Opens a file in the specified mode with read, write, or read/write access and the specified sharing option.</summary><param name="mode"/><param name="access"/><param name="share"/><returns/></member><member name="M:KSP.IO.FileInfo.OpenRead"><summary>Creates a read-only System.IO.FileStream.</summary><returns/></member><member name="M:KSP.IO.FileInfo.OpenText"><summary>Creates a System.IO.StreamReader with UTF8 encoding that reads from an existing text file.</summary><returns/></member><member name="M:KSP.IO.FileInfo.OpenWrite"><summary>Creates a write-only System.IO.FileStream.</summary><returns/></member><member name="M:KSP.IO.FileInfo.Replace(string,string,System.Boolean)"><summary>Replaces the contents of a specified file with the file described by the current System.IO.FileInfo object, deleting the original file, and creating a backup of the replaced file. Also specifies whether to ignore merge errors.</summary><param name="destinationFileName"/><param name="destinationBackupFileName"/><param name="ignoreMetadataErrors"/><returns/></member><member name="M:KSP.IO.FileInfo.Replace(string,string)"><summary>Replaces the contents of a specified file with the file described by the current System.IO.FileInfo object, deleting the original file, and creating a backup of the replaced file.</summary><param name="destinationFileName"/><param name="destinationBackupFileName"/><returns/></member><member name="M:KSP.IO.FileInfo.ToString"><summary>Returns the path as a string.</summary><returns/></member><member name="M:KSP.IO.FileInfo.CreateForType(string,Vessel)"><summary>Create a text reader stream.</summary><typeparam name="T"/><param name="filename"/><param name="flight"/><returns/></member><member name="T:KSP.IO.IOException"><summary>A surrogate for System.IO.IOException.</summary></member><member name="F:KSP.IO.IOException.message"></member><member name="F:KSP.IO.IOException.source"></member><member name="F:KSP.IO.IOException.stack"></member><member name="P:KSP.IO.IOException.Data"></member><member name="P:KSP.IO.IOException.HelpLink"></member><member name="P:KSP.IO.IOException.HResult"></member><member name="P:KSP.IO.IOException.InnerException"></member><member name="P:KSP.IO.IOException.IPForWatsonBuckets"></member><member name="P:KSP.IO.IOException.IsTransient"></member><member name="P:KSP.IO.IOException.Message"></member><member name="P:KSP.IO.IOException.RemoteStackTrace"></member><member name="P:KSP.IO.IOException.Source"></member><member name="P:KSP.IO.IOException.StackTrace"></member><member name="P:KSP.IO.IOException.TargetSite"></member><member name="P:KSP.IO.IOException.WatsonBuckets"></member><member name="M:KSP.IO.IOException.Equals(object)"></member><member name="M:KSP.IO.IOException.Finalize"></member><member name="M:KSP.IO.IOException.GetBaseException"></member><member name="M:KSP.IO.IOException.GetHashCode"></member><member name="M:KSP.IO.IOException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"></member><member name="M:KSP.IO.IOException.GetType"></member><member name="M:KSP.IO.IOException.GetType"></member><member name="M:KSP.IO.IOException.MemberwiseClone"></member><member name="M:KSP.IO.IOException.ToString"></member><member name="M:KSP.IO.IOException.#ctor(string,string,string)"></member><member name="T:KSP.IO.IOUtils"><summary>Has some useful little tools and utilities.</summary></member><member name="P:KSP.IO.IOUtils.PluginRootPath"></member><member name="M:KSP.IO.IOUtils.Equals(object)"></member><member name="M:KSP.IO.IOUtils.Finalize"></member><member name="M:KSP.IO.IOUtils.GetHashCode"></member><member name="M:KSP.IO.IOUtils.GetType"></member><member name="M:KSP.IO.IOUtils.MemberwiseClone"></member><member name="M:KSP.IO.IOUtils.ToString"></member><member name="M:KSP.IO.IOUtils.DeserializeFromBinary(System.Byte[])"></member><member name="M:KSP.IO.IOUtils.DeserializeFromBinary(byte[])"><summary>Deserialize a binary serialized object</summary><param name="input"/><returns/></member><member name="M:KSP.IO.IOUtils.GetFilePathFor(System.Type,string,Vessel)"><summary>Return the full path for a given filename, provided a class from the plugin.</summary><para>PluginData/[.flights/FLIGHT_UUID/]assemblyname/file</para><param name="T"/><param name="file"/><param name="flight"/><returns/></member><member name="M:KSP.IO.IOUtils.SerializeToBinary(object)"><summary>Serialize an object (same as using a BinaryFormatter).</summary><param name="something"/><returns/></member><member name="M:KSP.IO.IOUtils.#ctor"></member><member name="T:KSP.IO.MemoryStream"><summary>Useful for manipulating bytes in memory.</summary></member><member name="P:KSP.IO.MemoryStream.CanRead"></member><member name="P:KSP.IO.MemoryStream.CanSeek"></member><member name="P:KSP.IO.MemoryStream.CanWrite"></member><member name="P:KSP.IO.MemoryStream.Capacity"></member><member name="P:KSP.IO.MemoryStream.Length"></member><member name="P:KSP.IO.MemoryStream.Position"></member><member name="M:KSP.IO.MemoryStream.Equals(object)"></member><member name="M:KSP.IO.MemoryStream.Finalize"></member><member name="M:KSP.IO.MemoryStream.Flush"></member><member name="M:KSP.IO.MemoryStream.GetBuffer"></member><member name="M:KSP.IO.MemoryStream.GetHashCode"></member><member name="M:KSP.IO.MemoryStream.GetType"></member><member name="M:KSP.IO.MemoryStream.MemberwiseClone"></member><member name="M:KSP.IO.MemoryStream.Read(System.Byte[],System.Int32,System.Int32)"></member><member name="M:KSP.IO.MemoryStream.Read(byte[],System.Int32,System.Int32)"></member><member name="M:KSP.IO.MemoryStream.ReadByte"></member><member name="M:KSP.IO.MemoryStream.Seek(System.Int64,KSP.IO.SeekOrigin)"></member><member name="M:KSP.IO.MemoryStream.SetLength(System.Int64)"></member><member name="M:KSP.IO.MemoryStream.ToArray"></member><member name="M:KSP.IO.MemoryStream.ToString"></member><member name="M:KSP.IO.MemoryStream.Write(System.Byte[],System.Int32,System.Int32)"></member><member name="M:KSP.IO.MemoryStream.Write(byte[],System.Int32,System.Int32)"></member><member name="M:KSP.IO.MemoryStream.WriteByte(System.Byte)"></member><member name="M:KSP.IO.MemoryStream.WriteByte(System.Byte)"></member><member name="M:KSP.IO.MemoryStream.#ctor"></member><member name="M:KSP.IO.MemoryStream.#ctor(System.Byte[])"></member><member name="M:KSP.IO.MemoryStream.#ctor(byte[])"></member><member name="T:KSP.IO.PluginConfigNode"><summary>A node full of configuration values.</summary></member><member name="P:KSP.IO.PluginConfigNode.Item"></member><member name="M:KSP.IO.PluginConfigNode.Equals(object)"></member><member name="M:KSP.IO.PluginConfigNode.Finalize"></member><member name="M:KSP.IO.PluginConfigNode.GetHashCode"></member><member name="M:KSP.IO.PluginConfigNode.GetParent"><summary>Gets the parent of this node.</summary><returns/></member><member name="M:KSP.IO.PluginConfigNode.GetType"></member><member name="M:KSP.IO.PluginConfigNode.GetValue(string)"><summary>Get the value of a configuration key.</summary><typeparam name="T"/><param name="key"/><returns/></member><member name="M:KSP.IO.PluginConfigNode.GetValue(string,T)"><summary>Get the value of a configuration key.</summary><typeparam name="T"/><param name="key"/><param name="_default"/><returns/></member><member name="M:KSP.IO.PluginConfigNode.MemberwiseClone"></member><member name="M:KSP.IO.PluginConfigNode.SetValue(string,object)"><summary>Set the value of a configuration key</summary><param name="key"/><param name="value"/></member><member name="M:KSP.IO.PluginConfigNode.ToString"></member><member name="M:KSP.IO.PluginConfigNode.#ctor(KSP.IO.PluginConfigNode)"></member><member name="M:KSP.IO.PluginConfigNode.#ctor"></member><member name="T:KSP.IO.PluginConfiguration"><summary>From N3X15: PluginConfiguration was something I threw together a while ago to try and improve settings serialization. The INI files we were using just couldn't cope with newlines and had all sorts of horrible workarounds. Instead of INI files, it writes structured XML files that look like this:</summary><para><code>&amp;lt;config&amp;gt;    &amp;lt;int name="int"\&amp;gt;4&amp;lt;/int&amp;gt;    &amp;lt;long name="long"&amp;gt;45&amp;lt;/long&amp;gt;    &amp;lt;short name="short"&amp;gt;4&amp;lt;/short&amp;gt;    &amp;lt;byte name="byte"&amp;gt;255&amp;lt;/byte&amp;gt;    &amp;lt;bool name="bool"&amp;gt;1&amp;lt;/bool&amp;gt;    &amp;lt;vector3 name="vector3"&amp;gt;        &amp;lt;x&amp;gt;0&amp;lt;/x&amp;gt;        &amp;lt;y&amp;gt;1&amp;lt;/y&amp;gt;        &amp;lt;z&amp;gt;2&amp;lt;/z&amp;gt;    &amp;lt;/vector3&amp;gt;    &amp;lt;vector3d name="vector3d"&amp;gt;        &amp;lt;x&amp;gt;0&amp;lt;/x&amp;gt;        &amp;lt;y&amp;gt;1&amp;lt;/y&amp;gt;        &amp;lt;z&amp;gt;2.05&amp;lt;/z&amp;gt;    &amp;lt;/vector3d&amp;gt;    &amp;lt;string name="string"&amp;gt;string&amp;lt;/string&amp;gt;  &amp;lt;/config&amp;gt;</code></para><para>Despite looking a bit messy, it's actually a lot easier to use and doesn't have as many drawbacks as INI files. Newlines are preserved, and most importantly, types are also preserved. Oh, and it's UTF-8 encoded, so internationalization won't be as much as a problem, theoretically. Here's how to use it:</para><para><code>PluginConfiguration cfg = PluginConfiguration.CreateForType&amp;lt;MyCoolModule&amp;gt;(); cfg["a string"] = "I love KSP!"; cfg["another setting"] = new Vector3d(0,1,2); cfg.save(); // Later... cfg.load(); settingAString = cfg.GetValue&amp;lt;string&amp;gt;("a string"); settingAVector = cfg.GetValue&amp;lt;Vector3d&amp;gt;("another setting");</code></para></member><member name="P:KSP.IO.PluginConfiguration.Item"></member><member name="M:KSP.IO.PluginConfiguration.Equals(object)"></member><member name="M:KSP.IO.PluginConfiguration.Finalize"></member><member name="M:KSP.IO.PluginConfiguration.GetHashCode"></member><member name="M:KSP.IO.PluginConfiguration.GetType"></member><member name="M:KSP.IO.PluginConfiguration.GetValue(string)"><summary>Get a typed value from the root node.</summary><typeparam name="T"/><param name="key"/><returns/></member><member name="M:KSP.IO.PluginConfiguration.GetValue(string,T)"><summary>Get a typed value from the root node, and set to a default if it doesn't exist.</summary><typeparam name="T"/><param name="key"/><param name="_default"/><returns/></member><member name="M:KSP.IO.PluginConfiguration.load"><summary>Load from disk</summary></member><member name="M:KSP.IO.PluginConfiguration.MemberwiseClone"></member><member name="M:KSP.IO.PluginConfiguration.save"><summary>Commit changes to disk</summary></member><member name="M:KSP.IO.PluginConfiguration.SetValue(string,object)"><summary>Set a configuration key's value</summary><param name="key"/><param name="value"/></member><member name="M:KSP.IO.PluginConfiguration.ToString"></member><member name="M:KSP.IO.PluginConfiguration.CreateForType(Vessel)"><summary>Initialize the configuration object</summary><typeparam name="T"/><param name="flight"/><returns/></member><member name="M:KSP.IO.PluginConfiguration.#ctor(string)"></member><member name="T:KSP.IO.SeekOrigin"><summary>This enum is a replacement for its System.IO equivalent. It's used to determine from where one wishes to seek in a file stream.</summary></member><member name="T:KSP.IO.TextReader"><summary>Identical to System.IO.TextReader, but with added IDisposable methods (for use in using() statements), and a factory method instead of constructors.</summary></member><member name="P:KSP.IO.TextReader.BaseStream"></member><member name="P:KSP.IO.TextReader.CurrentEncoding"></member><member name="P:KSP.IO.TextReader.EndOfStream"></member><member name="M:KSP.IO.TextReader.Close"></member><member name="M:KSP.IO.TextReader.DiscardBufferedData"></member><member name="M:KSP.IO.TextReader.Dispose"></member><member name="M:KSP.IO.TextReader.Equals(object)"></member><member name="M:KSP.IO.TextReader.Finalize"></member><member name="M:KSP.IO.TextReader.GetHashCode"></member><member name="M:KSP.IO.TextReader.GetType"></member><member name="M:KSP.IO.TextReader.MemberwiseClone"></member><member name="M:KSP.IO.TextReader.Peek"></member><member name="M:KSP.IO.TextReader.Read"></member><member name="M:KSP.IO.TextReader.Read(System.Char[],System.Int32,System.Int32)"></member><member name="M:KSP.IO.TextReader.Read(char[],System.Int32,System.Int32)"></member><member name="M:KSP.IO.TextReader.ReadLine"></member><member name="M:KSP.IO.TextReader.ReadToEnd"></member><member name="M:KSP.IO.TextReader.ToString"></member><member name="M:KSP.IO.TextReader.CreateForType(string,Vessel)"><summary>Create a text reader stream.</summary><typeparam name="T"/><param name="filename"/><param name="flight"/><returns/></member><member name="T:KSP.IO.TextWriter"><summary>Identical to System.IO.TextWriter, but with added IDisposable methods (for use in using() statements), and a factory method instead of constructors.</summary></member><member name="P:KSP.IO.TextWriter.Encoding"></member><member name="P:KSP.IO.TextWriter.FormatProvider"></member><member name="P:KSP.IO.TextWriter.NewLine"></member><member name="M:KSP.IO.TextWriter.Close"></member><member name="M:KSP.IO.TextWriter.Dispose"></member><member name="M:KSP.IO.TextWriter.Equals(object)"></member><member name="M:KSP.IO.TextWriter.Finalize"></member><member name="M:KSP.IO.TextWriter.Flush"></member><member name="M:KSP.IO.TextWriter.GetHashCode"></member><member name="M:KSP.IO.TextWriter.GetType"></member><member name="M:KSP.IO.TextWriter.MemberwiseClone"></member><member name="M:KSP.IO.TextWriter.ToString"></member><member name="M:KSP.IO.TextWriter.Write(string)"></member><member name="M:KSP.IO.TextWriter.Write(System.UInt64)"></member><member name="M:KSP.IO.TextWriter.Write(string,object,object)"></member><member name="M:KSP.IO.TextWriter.Write(System.Char[])"></member><member name="M:KSP.IO.TextWriter.Write(object)"></member><member name="M:KSP.IO.TextWriter.Write(System.Double)"></member><member name="M:KSP.IO.TextWriter.Write(System.Decimal)"></member><member name="M:KSP.IO.TextWriter.Write(System.Single)"></member><member name="M:KSP.IO.TextWriter.Write(System.UInt32)"></member><member name="M:KSP.IO.TextWriter.Write(System.Int32)"></member><member name="M:KSP.IO.TextWriter.Write(string,object,object,object)"></member><member name="M:KSP.IO.TextWriter.Write(System.Char[],System.Int32,System.Int32)"></member><member name="M:KSP.IO.TextWriter.Write(string,object[])"></member><member name="M:KSP.IO.TextWriter.Write(System.Char)"></member><member name="M:KSP.IO.TextWriter.Write(System.Boolean)"></member><member name="M:KSP.IO.TextWriter.Write(System.Int64)"></member><member name="M:KSP.IO.TextWriter.Write(string,object)"></member><member name="M:KSP.IO.TextWriter.Write(System.Char)"></member><member name="M:KSP.IO.TextWriter.Write(char[])"></member><member name="M:KSP.IO.TextWriter.Write(System.Decimal)"></member><member name="M:KSP.IO.TextWriter.Write(System.UInt32)"></member><member name="M:KSP.IO.TextWriter.Write(System.UInt64)"></member><member name="M:KSP.IO.TextWriter.Write(char[],System.Int32,System.Int32)"></member><member name="M:KSP.IO.TextWriter.WriteLine"></member><member name="M:KSP.IO.TextWriter.WriteLine(System.Int64)"></member><member name="M:KSP.IO.TextWriter.WriteLine(string,object)"></member><member name="M:KSP.IO.TextWriter.WriteLine(string,object[])"></member><member name="M:KSP.IO.TextWriter.WriteLine(System.Decimal)"></member><member name="M:KSP.IO.TextWriter.WriteLine(System.Boolean)"></member><member name="M:KSP.IO.TextWriter.WriteLine(System.Char)"></member><member name="M:KSP.IO.TextWriter.WriteLine(System.Double)"></member><member name="M:KSP.IO.TextWriter.WriteLine(System.Char[],System.Int32,System.Int32)"></member><member name="M:KSP.IO.TextWriter.WriteLine(System.UInt64)"></member><member name="M:KSP.IO.TextWriter.WriteLine(object)"></member><member name="M:KSP.IO.TextWriter.WriteLine(string,object,object)"></member><member name="M:KSP.IO.TextWriter.WriteLine(string,object,object,object)"></member><member name="M:KSP.IO.TextWriter.WriteLine(System.Single)"></member><member name="M:KSP.IO.TextWriter.WriteLine(System.Char[])"></member><member name="M:KSP.IO.TextWriter.WriteLine(string)"></member><member name="M:KSP.IO.TextWriter.WriteLine(System.UInt32)"></member><member name="M:KSP.IO.TextWriter.WriteLine(System.Int32)"></member><member name="M:KSP.IO.TextWriter.WriteLine(System.Char)"></member><member name="M:KSP.IO.TextWriter.WriteLine(char[])"></member><member name="M:KSP.IO.TextWriter.WriteLine(System.Decimal)"></member><member name="M:KSP.IO.TextWriter.WriteLine(System.UInt32)"></member><member name="M:KSP.IO.TextWriter.WriteLine(System.UInt64)"></member><member name="M:KSP.IO.TextWriter.WriteLine(char[],System.Int32,System.Int32)"></member><member name="M:KSP.IO.TextWriter.CreateForType(string,Vessel)"><summary>Create a text writing stream</summary><typeparam name="T"/><param name="filename"/><param name="flight"/><returns/></member><member name="T:KSP.UI.Screens.ApplicationLauncher"><summary>The application launcher is the set of buttons that appear in the upper right, including for example the resource tab. You can add your own buttons to this toolbar.   See http://forum.kerbalspaceprogram.com/threads/86682-Appilcation-Launcher-and-Mods?p=1303921#post1303921</summary></member><member name="F:KSP.UI.Screens.ApplicationLauncher.anchor"></member><member name="F:KSP.UI.Screens.ApplicationLauncher.appSpace"></member><member name="F:KSP.UI.Screens.ApplicationLauncher.launcherSpace"></member><member name="F:KSP.UI.Screens.ApplicationLauncher.listItemPrefab"></member><member name="F:KSP.UI.Screens.ApplicationLauncher.listResizer"></member><member name="F:KSP.UI.Screens.ApplicationLauncher.modListBtnLeft"></member><member name="F:KSP.UI.Screens.ApplicationLauncher.modListBtnRight"></member><member name="F:KSP.UI.Screens.ApplicationLauncher.modListDivider"></member><member name="F:KSP.UI.Screens.ApplicationLauncher.modListResizer"></member><member name="F:KSP.UI.Screens.ApplicationLauncher.prefab_horizontalRightLeft"></member><member name="F:KSP.UI.Screens.ApplicationLauncher.prefab_verticalTopDown"></member><member name="F:KSP.UI.Screens.ApplicationLauncher.tmpButtonStorage"></member><member name="F:KSP.UI.Screens.ApplicationLauncher.tmpModButtonStorage"></member><member name="F:KSP.UI.Screens.ApplicationLauncher.Ready"><summary>Don't try to add buttons before ApplicationLauncher.Ready is true. If it's currently false, you can register for the GameEvents.onGUIApplicationLauncherReady event which will fire when the application launcher becomes ready to have buttons added to it.</summary></member><member name="P:KSP.UI.Screens.ApplicationLauncher.CurrentLayout"></member><member name="P:KSP.UI.Screens.ApplicationLauncher.enabled"></member><member name="P:KSP.UI.Screens.ApplicationLauncher.gameObject"></member><member name="P:KSP.UI.Screens.ApplicationLauncher.hideFlags"></member><member name="P:KSP.UI.Screens.ApplicationLauncher.isActiveAndEnabled"></member><member name="P:KSP.UI.Screens.ApplicationLauncher.IsPositionedAtTop"><summary>Whether the application launcher toolbar is positioned in the top right or in the bottom right (it's in the bottom right in the editor).</summary></member><member name="P:KSP.UI.Screens.ApplicationLauncher.name"></member><member name="P:KSP.UI.Screens.ApplicationLauncher.tag"></member><member name="P:KSP.UI.Screens.ApplicationLauncher.transform"></member><member name="P:KSP.UI.Screens.ApplicationLauncher.useGUILayout"></member><member name="P:KSP.UI.Screens.ApplicationLauncher.Instance"><summary>The single instance of ApplicationLauncher; call all the methods of this class using this instance.</summary></member><member name="M:KSP.UI.Screens.ApplicationLauncher.AddApplication(Callback,Callback,Callback,Callback,Callback,Callback,UnityEngine.Texture)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.AddApplication(Callback,Callback,Callback,Callback,Callback,Callback,UnityEngine.Animator)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.AddApplication(RUIToggleButton.OnTrue,RUIToggleButton.OnFalse,RUIToggleButton.OnHover,RUIToggleButton.OnHoverOut,RUIToggleButton.OnEnable,RUIToggleButton.OnDisable,PackedSprite)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.AddApplication(RUIToggleButton.OnTrue,RUIToggleButton.OnFalse,RUIToggleButton.OnHover,RUIToggleButton.OnHoverOut,RUIToggleButton.OnEnable,RUIToggleButton.OnDisable,Texture)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.AddModApplication(Callback,Callback,Callback,Callback,Callback,Callback,KSP.UI.Screens.ApplicationLauncher+AppScenes,UnityEngine.Texture)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.AddModApplication(Callback,Callback,Callback,Callback,Callback,Callback,KSP.UI.Screens.ApplicationLauncher+AppScenes,UnityEngine.Animator)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.AddModApplication(RUIToggleButton.OnTrue,RUIToggleButton.OnFalse,RUIToggleButton.OnHover,RUIToggleButton.OnHoverOut,RUIToggleButton.OnEnable,RUIToggleButton.OnDisable,ApplicationLauncher.AppScenes,PackedSprite)"><summary>Add a MOD(3rd party) application to the Application Launcher. Use ApplicationLauncherButton.VisibleInScenes to set where the button should be displayed.   Note that the application launcher is destroyed when the player exits to the main menu. If the player then  loads up a new save the application launcher will be recreated and you will have to re-add your button.  Register for GameEvents.onGUIApplicationLauncherDestroyed and GameEvents.onGUIApplicationLauncherReady to detect when the application launcher has been destroyed and when it has been re-created.</summary><param name="onTrue">Callback for when the button is toggeled on</param><param name="onFalse">Callback for when the button is toggeled off</param><param name="onHover">Callback for when the mouse is hovering over the button</param><param name="onHoverOut">Callback for when the mouse hoveris off the button</param><param name="onEnable">Callback for when the button is shown or enabled by the application launcher</param><param name="onDisable">Callback for when the button is hidden or disabled by the application launcher</param><param name="visibleInScenes">The "scenes" this button will be visible in. For example VisibleInScenes = ApplicationLauncher.AppScenes.FLIGHT | ApplicationLauncher.AppScenes.MAPVIEW;</param><param name="sprite">The 38x38 PackedSprite animation to use for the button icon. Use ApplicationLauncherButton.PlayAnim() to play the animation.</param><returns/></member><member name="M:KSP.UI.Screens.ApplicationLauncher.AddModApplication(RUIToggleButton.OnTrue,RUIToggleButton.OnFalse,RUIToggleButton.OnHover,RUIToggleButton.OnHoverOut,RUIToggleButton.OnEnable,RUIToggleButton.OnDisable,ApplicationLauncher.AppScenes,Texture)"><summary>Add a MOD(3rd party) application to the Application Launcher. Use ApplicationLauncherButton.VisibleInScenes to set where the button should be displayed.   Note that the application launcher is destroyed when the player exits to the main menu. If the player then  loads up a new save the application launcher will be recreated and you will have to re-add your button.  Register for GameEvents.onGUIApplicationLauncherDestroyed and GameEvents.onGUIApplicationLauncherReady to detect when the application launcher has been destroyed and when it has been re-created.</summary><param name="onTrue">Callback for when the button is toggeled on</param><param name="onFalse">Callback for when the button is toggeled off</param><param name="onHover">Callback for when the mouse is hovering over the button</param><param name="onHoverOut">Callback for when the mouse hoveris off the button</param><param name="onEnable">Callback for when the button is shown or enabled by the application launcher</param><param name="onDisable">Callback for when the button is hidden or disabled by the application launcher</param><param name="visibleInScenes">The "scenes" this button will be visible in. For example VisibleInScenes = ApplicationLauncher.AppScenes.FLIGHT | ApplicationLauncher.AppScenes.MAPVIEW;</param><param name="texture">The 38x38 Texture to use for the button icon.</param><returns/></member><member name="M:KSP.UI.Screens.ApplicationLauncher.AddOnHideCallback(KSP.UI.Screens.ApplicationLauncher+OnHide)"><summary>Register a method that will be called when the ApplicationLauncher GUI hides itself.</summary><param name="del"/></member><member name="M:KSP.UI.Screens.ApplicationLauncher.AddOnRepositionCallback(KSP.UI.Screens.ApplicationLauncher+OnReposition)"><summary>Register a method that will be called when the ApplicationLauncher moves from the top right to the bottom right, or vice versa.</summary><param name="del"/></member><member name="M:KSP.UI.Screens.ApplicationLauncher.AddOnShowCallback(KSP.UI.Screens.ApplicationLauncher+OnShow)"><summary>Register a method that will be called when the ApplicationLauncher GUI shows itself.</summary><param name="del"/></member><member name="M:KSP.UI.Screens.ApplicationLauncher.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.BroadcastMessage(string,object)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.BroadcastMessage(string)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.CancelInvoke"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.CancelInvoke(string)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.CompareTag(string)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.Contains(KSP.UI.Screens.ApplicationLauncherButton,bool&amp;)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.Contains(ApplicationLauncherButton,System.Boolean)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.DetermineVisibility(KSP.UI.Screens.ApplicationLauncherButton)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.DisableMutuallyExclusive(KSP.UI.Screens.ApplicationLauncherButton)"><summary>Reverses the effect of EnableMutuallyExclusive()</summary><param name="launcherButton"/></member><member name="M:KSP.UI.Screens.ApplicationLauncher.EnableMutuallyExclusive(KSP.UI.Screens.ApplicationLauncherButton)"><summary>Makes your application hide the stock applications when opened, and  makes stock applications hide your appliction when opened.</summary><param name="launcherButton"/></member><member name="M:KSP.UI.Screens.ApplicationLauncher.Equals(object)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.Finalize"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.GetComponent(System.Type)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.GetComponent"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.GetComponent(string)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.GetComponentInChildren(System.Type)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.GetComponentInChildren"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.GetComponentInParent(System.Type)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.GetComponentInParent"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.GetComponents(System.Type)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.GetComponents(List)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.GetComponents"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.GetComponentsInChildren(System.Type)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.GetComponentsInChildren(System.Boolean)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.GetComponentsInChildren"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.GetComponentsInChildren(List)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.GetComponentsInParent(System.Type)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.GetComponentsInParent(System.Boolean)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.GetComponentsInParent(System.Boolean,List)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.GetComponentsInParent"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.GetHashCode"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.GetInstanceID"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.GetKnowledgeBaseList"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.GetType"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.Hide"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.Invoke(string,System.Single)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.IsInvoking(string)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.IsInvoking"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.MemberwiseClone"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.OnHide"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.OnReposition"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.OnShow"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.RemoveApplication(KSP.UI.Screens.ApplicationLauncherButton)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.RemoveModApplication(KSP.UI.Screens.ApplicationLauncherButton)"><summary>Removes your button from the application launcher toolbar.</summary><param name="button"/></member><member name="M:KSP.UI.Screens.ApplicationLauncher.RemoveOnHideCallback(KSP.UI.Screens.ApplicationLauncher+OnHide)"><summary>Un-register a method that will be called when the ApplicationLauncher GUI hides itself.</summary><param name="del"/></member><member name="M:KSP.UI.Screens.ApplicationLauncher.RemoveOnRepositionCallback(KSP.UI.Screens.ApplicationLauncher+OnReposition)"><summary>Un-register a method that will be called when the ApplicationLauncher moves from the top right to the bottom right, or vice versa.</summary><param name="del"/></member><member name="M:KSP.UI.Screens.ApplicationLauncher.RemoveOnShowCallback(KSP.UI.Screens.ApplicationLauncher+OnShow)"><summary>Un-register a method that will be called when the ApplicationLauncher GUI shows itself.</summary><param name="del"/></member><member name="M:KSP.UI.Screens.ApplicationLauncher.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.SendMessage(string,object)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.SendMessage(string)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.SendMessageUpwards(string,object)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.SendMessageUpwards(string)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.ShouldBeVisible(KSP.UI.Screens.ApplicationLauncherButton)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.Show"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.StartCoroutine(string,object)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.StartCoroutine(string)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.StopAllCoroutines"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.StopCoroutine(string)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.ToString"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.#ctor"></member><member name="T:KSP.UI.Screens.EditorActionGroups"><summary>The top-level object representing the Action Group Editor window in the VAB/SPH.</summary></member><member name="F:KSP.UI.Screens.EditorActionGroups.actionGroupList"></member><member name="F:KSP.UI.Screens.EditorActionGroups.actionGroupPrefab"></member><member name="F:KSP.UI.Screens.EditorActionGroups.groupActionsList"></member><member name="F:KSP.UI.Screens.EditorActionGroups.groupPartActionPrefab"></member><member name="F:KSP.UI.Screens.EditorActionGroups.groupPartTitlePrefab"></member><member name="F:KSP.UI.Screens.EditorActionGroups.partActionList"></member><member name="F:KSP.UI.Screens.EditorActionGroups.partActionPrefab"></member><member name="F:KSP.UI.Screens.EditorActionGroups.partActionResetPrefab"></member><member name="F:KSP.UI.Screens.EditorActionGroups.partActionTitlePrefab"></member><member name="P:KSP.UI.Screens.EditorActionGroups.enabled"></member><member name="P:KSP.UI.Screens.EditorActionGroups.gameObject"></member><member name="P:KSP.UI.Screens.EditorActionGroups.hideFlags"></member><member name="P:KSP.UI.Screens.EditorActionGroups.isActiveAndEnabled"></member><member name="P:KSP.UI.Screens.EditorActionGroups.name"></member><member name="P:KSP.UI.Screens.EditorActionGroups.SelectedGroup"></member><member name="P:KSP.UI.Screens.EditorActionGroups.tag"></member><member name="P:KSP.UI.Screens.EditorActionGroups.transform"></member><member name="P:KSP.UI.Screens.EditorActionGroups.useGUILayout"></member><member name="P:KSP.UI.Screens.EditorActionGroups.Instance"><summary>Call this to get the current instance of the Action Group Editor window.</summary></member><member name="M:KSP.UI.Screens.EditorActionGroups.ActivateInterface(ShipConstruct)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.AddActionToGroup(KSP.UI.Screens.EditorActionPartItem)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.AddToSelection(KSP.UI.Screens.EditorActionPartSelector)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.BroadcastMessage(string,object)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.BroadcastMessage(string)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.CancelInvoke"></member><member name="M:KSP.UI.Screens.EditorActionGroups.CancelInvoke(string)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.ClearSelection(System.Boolean)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.CompareTag(string)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.DeactivateInterface(ShipConstruct)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.Equals(object)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.Finalize"></member><member name="M:KSP.UI.Screens.EditorActionGroups.GetComponent(System.Type)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.GetComponent"></member><member name="M:KSP.UI.Screens.EditorActionGroups.GetComponent(string)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.GetComponentInChildren(System.Type)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.GetComponentInChildren"></member><member name="M:KSP.UI.Screens.EditorActionGroups.GetComponentInParent(System.Type)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.GetComponentInParent"></member><member name="M:KSP.UI.Screens.EditorActionGroups.GetComponents(System.Type)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.GetComponents(List)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.GetComponents"></member><member name="M:KSP.UI.Screens.EditorActionGroups.GetComponentsInChildren(System.Type)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.GetComponentsInChildren(System.Boolean)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.GetComponentsInChildren"></member><member name="M:KSP.UI.Screens.EditorActionGroups.GetComponentsInChildren(List)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.GetComponentsInParent(System.Type)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.GetComponentsInParent(System.Boolean)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.GetComponentsInParent(System.Boolean,List)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.GetComponentsInParent"></member><member name="M:KSP.UI.Screens.EditorActionGroups.GetHashCode"></member><member name="M:KSP.UI.Screens.EditorActionGroups.GetInstanceID"></member><member name="M:KSP.UI.Screens.EditorActionGroups.GetSelectedParts"><summary>Returns list of currently selected parts by mouse left-click. Returns multiple parts when placed in symmetry and returns all parts in that symmetry placement. Note it is uncertain if the part left-clicked is always first in the returned list.</summary></member><member name="M:KSP.UI.Screens.EditorActionGroups.GetType"></member><member name="M:KSP.UI.Screens.EditorActionGroups.HasSelectedParts"></member><member name="M:KSP.UI.Screens.EditorActionGroups.Invoke(string,System.Single)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.IsInvoking(string)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.IsInvoking"></member><member name="M:KSP.UI.Screens.EditorActionGroups.MemberwiseClone"></member><member name="M:KSP.UI.Screens.EditorActionGroups.RemoveActionFromGroup(KSP.UI.Screens.EditorActionPartItem)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.ResetPart(KSP.UI.Screens.EditorActionPartSelector)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.SelectGroup"><summary>Intended purpose of this method is unclear. However, calling it refreshes the Action Group Editor window if data has changed behind the scenes and the window is displayed stale data.</summary></member><member name="M:KSP.UI.Screens.EditorActionGroups.SelectionContains(Part)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.SendMessage(string,object)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.SendMessage(string)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.SendMessageUpwards(string,object)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.SendMessageUpwards(string)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.StartCoroutine(string,object)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.StartCoroutine(string)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.StopAllCoroutines"></member><member name="M:KSP.UI.Screens.EditorActionGroups.StopCoroutine(string)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.ToString"></member><member name="M:KSP.UI.Screens.EditorActionGroups.#ctor"></member><member name="T:KSP.UI.Screens.Flight.KerbalPortrait"></member><member name="F:KSP.UI.Screens.Flight.KerbalPortrait.evaButton"></member><member name="F:KSP.UI.Screens.Flight.KerbalPortrait.evaTooltip"></member><member name="F:KSP.UI.Screens.Flight.KerbalPortrait.hoverArea"></member><member name="F:KSP.UI.Screens.Flight.KerbalPortrait.hoverObjectsContainer"></member><member name="F:KSP.UI.Screens.Flight.KerbalPortrait.ivaButton"></member><member name="F:KSP.UI.Screens.Flight.KerbalPortrait.ivaTooltip"></member><member name="F:KSP.UI.Screens.Flight.KerbalPortrait.lvlSprites"></member><member name="F:KSP.UI.Screens.Flight.KerbalPortrait.nameField"></member><member name="F:KSP.UI.Screens.Flight.KerbalPortrait.overlayImg"></member><member name="F:KSP.UI.Screens.Flight.KerbalPortrait.portrait"></member><member name="F:KSP.UI.Screens.Flight.KerbalPortrait.rectContainment"></member><member name="F:KSP.UI.Screens.Flight.KerbalPortrait.roleLevelImage"></member><member name="F:KSP.UI.Screens.Flight.KerbalPortrait.roleObjectsContainer"></member><member name="F:KSP.UI.Screens.Flight.KerbalPortrait.roleText"></member><member name="P:KSP.UI.Screens.Flight.KerbalPortrait.crewMember"><summary>The kerbal class instance of the kerbal this portrait is attached to.</summary></member><member name="P:KSP.UI.Screens.Flight.KerbalPortrait.crewMemberName"><summary>The name of the kerbal this portrait is attached to.</summary></member><member name="P:KSP.UI.Screens.Flight.KerbalPortrait.enabled"></member><member name="P:KSP.UI.Screens.Flight.KerbalPortrait.gameObject"></member><member name="P:KSP.UI.Screens.Flight.KerbalPortrait.hideFlags"></member><member name="P:KSP.UI.Screens.Flight.KerbalPortrait.isActiveAndEnabled"></member><member name="P:KSP.UI.Screens.Flight.KerbalPortrait.name"></member><member name="P:KSP.UI.Screens.Flight.KerbalPortrait.tag"></member><member name="P:KSP.UI.Screens.Flight.KerbalPortrait.transform"></member><member name="P:KSP.UI.Screens.Flight.KerbalPortrait.useGUILayout"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.BroadcastMessage(string,object)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.BroadcastMessage(string)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.CancelInvoke"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.CancelInvoke(string)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.ClickEVA"><summary>Called when you click the EVA button in the portrait (or call it from your code). Will cause the kerbal to perform an EVA.</summary></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.ClickIVA"><summary>Called when you click the View (IVA) button in the portrait (or call it from your code). Will cause the Camera to switch to IVA mode focused on the kerbal this portrait is attached to.</summary></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.CompareTag(string)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.Equals(object)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.Finalize"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.GetComponent(System.Type)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.GetComponent"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.GetComponent(string)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.GetComponentInChildren(System.Type)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.GetComponentInChildren"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.GetComponentInParent(System.Type)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.GetComponentInParent"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.GetComponents(System.Type)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.GetComponents(List)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.GetComponents"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.GetComponentsInChildren(System.Type)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.GetComponentsInChildren(System.Boolean)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.GetComponentsInChildren"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.GetComponentsInChildren(List)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.GetComponentsInParent(System.Type)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.GetComponentsInParent(System.Boolean)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.GetComponentsInParent(System.Boolean,List)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.GetComponentsInParent"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.GetHashCode"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.GetInstanceID"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.GetType"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.Invoke(string,System.Single)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.IsInvoking(string)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.IsInvoking"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.MemberwiseClone"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.OnBecameInvisible"><summary>Called when this portrait is scrolled off the screen.</summary></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.OnBecameVisible"><summary>Called when this portrait is scrolled onto the screen.</summary></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.OnCrewDie"><summary>Called when the kerbal attached to this portrait dies.</summary></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.OnOverlayUpdate(Kerbal)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.OverlayUpdate(System.Boolean,System.Single)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.SendMessage(string,object)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.SendMessage(string)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.SendMessageUpwards(string,object)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.SendMessageUpwards(string)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.Setup(Kerbal,UnityEngine.RectTransform)"><summary>Called when this portrait is created.</summary></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.StartCoroutine(string,object)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.StartCoroutine(string)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.StopAllCoroutines"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.StopCoroutine(string)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.ToString"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.#ctor"></member><member name="T:KSP.UI.Screens.Flight.KerbalPortraitGallery"></member><member name="F:KSP.UI.Screens.Flight.KerbalPortraitGallery.portraitPrefab"></member><member name="F:KSP.UI.Screens.Flight.KerbalPortraitGallery.GalleryCapacity"></member><member name="F:KSP.UI.Screens.Flight.KerbalPortraitGallery.GalleryMaxSize"></member><member name="P:KSP.UI.Screens.Flight.KerbalPortraitGallery.ActiveCrew"></member><member name="P:KSP.UI.Screens.Flight.KerbalPortraitGallery.countPortraits"></member><member name="P:KSP.UI.Screens.Flight.KerbalPortraitGallery.enabled"></member><member name="P:KSP.UI.Screens.Flight.KerbalPortraitGallery.gameObject"></member><member name="P:KSP.UI.Screens.Flight.KerbalPortraitGallery.hideFlags"></member><member name="P:KSP.UI.Screens.Flight.KerbalPortraitGallery.isActiveAndEnabled"></member><member name="P:KSP.UI.Screens.Flight.KerbalPortraitGallery.name"></member><member name="P:KSP.UI.Screens.Flight.KerbalPortraitGallery.Portraits"></member><member name="P:KSP.UI.Screens.Flight.KerbalPortraitGallery.tag"></member><member name="P:KSP.UI.Screens.Flight.KerbalPortraitGallery.transform"></member><member name="P:KSP.UI.Screens.Flight.KerbalPortraitGallery.useGUILayout"></member><member name="P:KSP.UI.Screens.Flight.KerbalPortraitGallery.Instance"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.BroadcastMessage(string,object)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.BroadcastMessage(string)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.CancelInvoke"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.CancelInvoke(string)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.ClearPortraits"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.CompareTag(string)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.DespawnInactivePortraits"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.DespawnPortrait(Kerbal)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.DespawnPortrait(KSP.UI.Screens.Flight.KerbalPortrait)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.Equals(object)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.Finalize"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.GetComponent(System.Type)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.GetComponent"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.GetComponent(string)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.GetComponentInChildren(System.Type)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.GetComponentInChildren"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.GetComponentInParent(System.Type)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.GetComponentInParent"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.GetComponents(System.Type)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.GetComponents(List)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.GetComponents"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.GetComponentsInChildren(System.Type)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.GetComponentsInChildren(System.Boolean)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.GetComponentsInChildren"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.GetComponentsInChildren(List)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.GetComponentsInParent(System.Type)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.GetComponentsInParent(System.Boolean)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.GetComponentsInParent(System.Boolean,List)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.GetComponentsInParent"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.GetHashCode"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.GetInstanceID"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.GetMaxGalleryCapacity(System.Single,System.Single,System.Single)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.GetType"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.HasPortrait(Kerbal)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.Invoke(string,System.Single)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.IsInvoking(string)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.IsInvoking"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.MemberwiseClone"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.onBtnAddSlot"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.onBtnLeft"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.onBtnRemSlot"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.onBtnRight"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.OnCameraChange(CameraManager+CameraMode)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.onCrewTransferred(GameEvents+HostedFromToAction)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.OnDestroy"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.onIVAOverlayDismiss"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.onIVAOverlayPress(System.Boolean)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.onVesselWasModified(Vessel)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.RegisterActiveCrew(Kerbal)"><summary>Register a Kerbal crewmember to the Portrait Gallery. Beware this will duplicate portraits if the crewmember is already in the list.
The list itself cannot be accessed as it is a private list. You can call UnRegisterActiveCrew before calling this. But that kind of defeats the purpose. The best bet is to attach to the portraitPrefab instance and build your own list. If you unregistered the kerbal previously and called kerbal.SetVisibleInPortrait(false) and set kerbal.inPart to null that you have to reverse this and set their inPart and SetVisibleInPortrait(true) before calling this method.</summary></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.SendMessage(string,object)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.SendMessage(string)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.SendMessageUpwards(string,object)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.SendMessageUpwards(string)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.SetActivePortraitsForVessel(Vessel)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.SpawnPortrait(Kerbal)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.Start"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.StartCoroutine(string,object)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.StartCoroutine(string)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.StartRefresh(Vessel)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.StartReset(Vessel)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.StopAllCoroutines"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.StopCoroutine(string)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.ToString"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.UIControlsUpdate"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.UnregisterActiveCrew(Kerbal)"><summary>UnRegister a Kerbal crewmember to the Portrait Gallery. They will respawn a portrait though unless you set the kerbal.inPart to null and set the kerbal.SetVisibleInPortrait(false) first. If you do this, don't forget to set the kerbal.SetVisibleInPortrait(true) before you ReigsterActiveCrew.</summary></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.UpdatePortraitScrolling(System.Int32)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.#ctor"></member><member name="T:KSPAction"><summary>Apply this attribute to a function to allow it to be called via action groups.</summary></member><member name="F:KSPAction.actionGroup"><summary>Which action groups this action is currently a part of? Probably you can test whether this action is part of a given action group (say, the Abort group) with</summary><para><code>if((actionGroup &amp;amp; KSPActionGroup.Abort) != 0)</code></para></member><member name="F:KSPAction.guiName"><summary>The name of this action as it appears in the action group editor.</summary></member><member name="P:KSPAction.TypeId"></member><member name="M:KSPAction.Equals(object)"></member><member name="M:KSPAction.Finalize"></member><member name="M:KSPAction.GetHashCode"></member><member name="M:KSPAction.GetType"></member><member name="M:KSPAction.IsDefaultAttribute"></member><member name="M:KSPAction.Match(object)"></member><member name="M:KSPAction.MemberwiseClone"></member><member name="M:KSPAction.ToString"></member><member name="M:KSPAction.#ctor(string,KSPActionGroup)"></member><member name="M:KSPAction.#ctor(string)"></member><member name="T:KSPAddon"><summary>Apply this attribute to a class that derives from MonoBehaviour to have KSP automatically start up your addon at a specified time.   At the time specified by the "startup" argument KSP will create a new GameObject and attach your MonoBehaviour to it. You can then implement the Unity event functions like Start(), Update(), etc.</summary></member><member name="F:KSPAddon.once"><summary>Whether KSP should start up your addon just once per game session, or every time the startup time is reached. If you want your addon to persist forever, even through scene changes, after being started once, set once to true. call DontDestroyOnLoad(this) in your  Start() function.</summary></member><member name="F:KSPAddon.startup"><summary>When this addon should be started.</summary></member><member name="P:KSPAddon.TypeId"></member><member name="M:KSPAddon.Equals(object)"></member><member name="M:KSPAddon.Finalize"></member><member name="M:KSPAddon.GetHashCode"></member><member name="M:KSPAddon.GetType"></member><member name="M:KSPAddon.IsDefaultAttribute"></member><member name="M:KSPAddon.Match(object)"></member><member name="M:KSPAddon.MemberwiseClone"></member><member name="M:KSPAddon.ToString"></member><member name="M:KSPAddon.#ctor(KSPAddon+Startup,System.Boolean)"><summary>Constructor.</summary><param name="startup">When this addon should be started</param><param name="once">Whether KSP should start up your addon just once per game session, or every time the startup time is reached. If you want your addon to persist forever, even through scene changes, after being started once, set once to true. call DontDestroyOnLoad(this) in your  Start() function.</param></member><member name="T:KSPAssembly"><summary>This attribute and the KSPAssemblyDependency attribute can be used to ensure that plugin assemblies are loaded in the right order.   Suppose Mod A depends on mod B, which is currently at version 2.6.  Mod B should add the following line to the end of Properties/AssemblyInfo.cs:</summary><code>[assembly: KSPAssembly("ModBName", 2, 6)]</code><remarks>where "ModBName" is the name of Mod B (Mod B's .dll?). Replace 2 and 6 with the major and minor version of Mod B.  Then Mod A should add the following line to the end of Properties/AssemblyInfo.cs:</remarks><code>[assembly: KSPAssemblyDependency("ModBName", 2, 6)]</code><remarks>This will tell KSP that Mod A depends on version 2.6 of Mod B, and ensure the the assemblies get loaded in the proper order.</remarks></member><member name="F:KSPAssembly.name"></member><member name="F:KSPAssembly.versionMajor"></member><member name="F:KSPAssembly.versionMinor"></member><member name="P:KSPAssembly.TypeId"></member><member name="M:KSPAssembly.Equals(object)"></member><member name="M:KSPAssembly.Finalize"></member><member name="M:KSPAssembly.GetHashCode"></member><member name="M:KSPAssembly.GetType"></member><member name="M:KSPAssembly.IsDefaultAttribute"></member><member name="M:KSPAssembly.Match(object)"></member><member name="M:KSPAssembly.MemberwiseClone"></member><member name="M:KSPAssembly.ToString"></member><member name="M:KSPAssembly.#ctor(string,System.Int32,System.Int32)"></member><member name="T:KSPAssemblyDependency"><summary>This attribute and the KSPAssembly attribute can be used to ensure that plugin assemblies are loaded in the right order.   Suppose Mod A depends on mod B, which is currently at version 2.6.  Mod B should add the following line to the end of Properties/AssemblyInfo.cs:</summary><code>[assembly: KSPAssembly("ModBName", 2, 6)]</code><remarks>where "ModBName" is the name of Mod B (Mod B's .dll?). Replace 2 and 6 with the major and minor version of Mod B.  Then Mod A should add the following line to the end of Properties/AssemblyInfo.cs:</remarks><code>[assembly: KSPAssemblyDependency("ModBName", 2, 6)]</code><remarks>This will tell KSP that Mod A depends on version 2.6 of Mod B, and ensure the the assemblies get loaded in the proper order.</remarks></member><member name="F:KSPAssemblyDependency.name"></member><member name="F:KSPAssemblyDependency.versionMajor"></member><member name="F:KSPAssemblyDependency.versionMinor"></member><member name="P:KSPAssemblyDependency.TypeId"></member><member name="M:KSPAssemblyDependency.Equals(object)"></member><member name="M:KSPAssemblyDependency.Finalize"></member><member name="M:KSPAssemblyDependency.GetHashCode"></member><member name="M:KSPAssemblyDependency.GetType"></member><member name="M:KSPAssemblyDependency.IsDefaultAttribute"></member><member name="M:KSPAssemblyDependency.Match(object)"></member><member name="M:KSPAssemblyDependency.MemberwiseClone"></member><member name="M:KSPAssemblyDependency.ToString"></member><member name="M:KSPAssemblyDependency.#ctor(string,System.Int32,System.Int32)"></member><member name="T:KSPEvent"><summary>Apply this attribute to a function in a PartModule to make it callable by the player via the right click menu of the part, or from other plugin code via Part.SendEvent.  It seems like this attribute is NOT refreshed on parts already in flight when you rebuild  your module DLL! You need to launch a new ship with your part.</summary></member><member name="F:KSPEvent.active"><summary>Whether this event can be triggered through Part.SendEvent.</summary></member><member name="F:KSPEvent.category"></member><member name="F:KSPEvent.externalToEVAOnly"><summary>Whether the event is only available when out on EVA.</summary></member><member name="F:KSPEvent.guiActive"><summary>Whether the event is shown as available in the right click menu (active must also be true).</summary></member><member name="F:KSPEvent.guiActiveEditor"></member><member name="F:KSPEvent.guiActiveUncommand"></member><member name="F:KSPEvent.guiActiveUnfocused"><summary>Whether the event is shown as available in the right click menu even when the part is on a ship not currently being controlled by the player (but close enough to right click).</summary></member><member name="F:KSPEvent.guiIcon"></member><member name="F:KSPEvent.guiName"><summary>The name shown for the event in the right click menu.</summary></member><member name="F:KSPEvent.isDefault"></member><member name="F:KSPEvent.name"><summary>The name of the event, which can be used to trigger the event using from plugin code using Part.SendEvent.</summary></member><member name="F:KSPEvent.unfocusedRange"><summary>When the part is on a ship not being controlled by the player, how close the player needs to be (in meters) in order for the event to appear in the right click menu.</summary></member><member name="P:KSPEvent.TypeId"></member><member name="M:KSPEvent.Equals(object)"></member><member name="M:KSPEvent.Finalize"></member><member name="M:KSPEvent.GetHashCode"></member><member name="M:KSPEvent.GetType"></member><member name="M:KSPEvent.IsDefaultAttribute"></member><member name="M:KSPEvent.Match(object)"></member><member name="M:KSPEvent.MemberwiseClone"></member><member name="M:KSPEvent.ToString"></member><member name="M:KSPEvent.#ctor"></member><member name="T:KSPField"><summary>Apply this attribute to a field in a PartModule or ScenarioModule to make the field  get automatically initialized from the cfg file, and optionally persistent. See  http://forum.kerbalspaceprogram.com/showthread.php/10296-0-15-code-update-PartModule-KSPField-KSPEvent-ConfigNode-and-PartResource</summary></member><member name="F:KSPField.category"><summary>Seemingly unused</summary></member><member name="F:KSPField.guiActive"><summary>Whether to show the value of this field in the right click menu of the part.</summary></member><member name="F:KSPField.guiActiveEditor"><summary>Whether to show the value of this field in the right click menu of the part when in the VAB/SPH.</summary></member><member name="F:KSPField.guiFormat"><summary>The format string that will be passed to ToString when displaying the value of your field in the right click menu of the part? E.g. "F3" for a floating point number with 3 digits past the decimal point.</summary></member><member name="F:KSPField.guiName"><summary>The name that will be shown for this field in the right click menu of the part.</summary></member><member name="F:KSPField.guiUnits"><summary>The units that will be shown for this field in the right click menu of the part.</summary></member><member name="F:KSPField.isPersistant"><summary>Whether to store the value of this field in persistent.sfs when the game state is saved, and reload it from persistent.sfs when the game state is loaded.</summary></member><member name="P:KSPField.TypeId"></member><member name="M:KSPField.Equals(object)"></member><member name="M:KSPField.Finalize"></member><member name="M:KSPField.GetHashCode"></member><member name="M:KSPField.GetType"></member><member name="M:KSPField.IsDefaultAttribute"></member><member name="M:KSPField.Match(object)"></member><member name="M:KSPField.MemberwiseClone"></member><member name="M:KSPField.ToString"></member><member name="M:KSPField.#ctor"></member><member name="T:KSPScenario"><summary>Like KSPAddon, but for ScenarioModules. Apply this attribute to your subclass of ScenarioModule and KSP will add it to the game at the right time.</summary></member><member name="F:KSPScenario.createOptions"></member><member name="F:KSPScenario.tgtScenes"></member><member name="P:KSPScenario.TargetScenes"></member><member name="P:KSPScenario.TypeId"></member><member name="M:KSPScenario.Equals(object)"></member><member name="M:KSPScenario.Finalize"></member><member name="M:KSPScenario.GetHashCode"></member><member name="M:KSPScenario.GetType"></member><member name="M:KSPScenario.HasCreateOption(ScenarioCreationOptions)"></member><member name="M:KSPScenario.IsDefaultAttribute"></member><member name="M:KSPScenario.Match(object)"></member><member name="M:KSPScenario.MemberwiseClone"></member><member name="M:KSPScenario.ToString"></member><member name="M:KSPScenario.#ctor(ScenarioCreationOptions,GameScenes[])"><summary>Constructor.</summary><param name="createOptions">Directions about which games the scenario should be added to. Different options can be combined with the | operator.</param><param name="tgtScenes">A list of the game scenes to which the scenario should be added</param></member><member name="T:KerbalAnimationManager"></member><member name="F:KerbalAnimationManager.clamber"></member><member name="F:KerbalAnimationManager.evaController"></member><member name="F:KerbalAnimationManager.flagPlant"></member><member name="F:KerbalAnimationManager.idle"></member><member name="F:KerbalAnimationManager.JumpFwdEnd"></member><member name="F:KerbalAnimationManager.JumpFwdStart"></member><member name="F:KerbalAnimationManager.JumpStillEnd"></member><member name="F:KerbalAnimationManager.JumpStillStart"></member><member name="F:KerbalAnimationManager.ladderClimb"></member><member name="F:KerbalAnimationManager.ladderDescend"></member><member name="F:KerbalAnimationManager.ladderGrabGrounded"></member><member name="F:KerbalAnimationManager.ladderGrabSuspended"></member><member name="F:KerbalAnimationManager.ladderIdle"></member><member name="F:KerbalAnimationManager.ladderLeanBack"></member><member name="F:KerbalAnimationManager.ladderLeanFwd"></member><member name="F:KerbalAnimationManager.ladderLeanLeft"></member><member name="F:KerbalAnimationManager.ladderLeanRight"></member><member name="F:KerbalAnimationManager.ladderPushOff"></member><member name="F:KerbalAnimationManager.ladderRelease"></member><member name="F:KerbalAnimationManager.packExtend"></member><member name="F:KerbalAnimationManager.packStow"></member><member name="F:KerbalAnimationManager.run"></member><member name="F:KerbalAnimationManager.seatIdle"></member><member name="F:KerbalAnimationManager.standUpFaceDown"></member><member name="F:KerbalAnimationManager.standUpFaceUp"></member><member name="F:KerbalAnimationManager.strafeLeft"></member><member name="F:KerbalAnimationManager.strafeRight"></member><member name="F:KerbalAnimationManager.suspendedIdle"></member><member name="F:KerbalAnimationManager.swimFwd"></member><member name="F:KerbalAnimationManager.swimIdle"></member><member name="F:KerbalAnimationManager.swimUpFaceDown"></member><member name="F:KerbalAnimationManager.swimUpFaceUp"></member><member name="F:KerbalAnimationManager.syncLayers"></member><member name="F:KerbalAnimationManager.turnLeft"></member><member name="F:KerbalAnimationManager.turnRight"></member><member name="F:KerbalAnimationManager.walkBack"></member><member name="F:KerbalAnimationManager.walkFwd"></member><member name="F:KerbalAnimationManager.walkLowGee"></member><member name="F:KerbalAnimationManager.walkLowGeeLeft"></member><member name="F:KerbalAnimationManager.walkLowGeeRight"></member><member name="F:KerbalAnimationManager.walkLowGeeSuspendedLeft"></member><member name="F:KerbalAnimationManager.walkLowGeeSuspendedRight"></member><member name="M:KerbalAnimationManager.Equals(object)"></member><member name="M:KerbalAnimationManager.Finalize"></member><member name="M:KerbalAnimationManager.GetAllAnimations"></member><member name="M:KerbalAnimationManager.GetHashCode"></member><member name="M:KerbalAnimationManager.GetType"></member><member name="M:KerbalAnimationManager.MemberwiseClone"></member><member name="M:KerbalAnimationManager.Start(KerbalEVA)"></member><member name="M:KerbalAnimationManager.SyncAnimationLayers"><summary>Syncs up animations that affect different parts of the Kerbal's body. This allows, for example, the animation of the arms while the legs move when walking forward and putting away the jetpack controls.</summary></member><member name="M:KerbalAnimationManager.ToString"></member><member name="M:KerbalAnimationManager.#ctor"></member><member name="T:KerbalEVA"><summary>Kerbals on EVA are represented as vessels with a single part. That part contains a KerbalEVA PartModule.</summary></member><member name="F:KerbalEVA.Animations"></member><member name="F:KerbalEVA.boundAttack"></member><member name="F:KerbalEVA.boundFallThreshold"></member><member name="F:KerbalEVA.boundForce"></member><member name="F:KerbalEVA.boundFrequency"></member><member name="F:KerbalEVA.boundRelease"></member><member name="F:KerbalEVA.boundSharpness"></member><member name="F:KerbalEVA.boundSpeed"></member><member name="F:KerbalEVA.boundThreshold"></member><member name="F:KerbalEVA.canRecover"></member><member name="F:KerbalEVA.characterColliders"></member><member name="F:KerbalEVA.CharacterFrameMode"></member><member name="F:KerbalEVA.CharacterFrameModeToggle"></member><member name="F:KerbalEVA.clamberReach"></member><member name="F:KerbalEVA.clamberStandoff"></member><member name="F:KerbalEVA.fFwd"></member><member name="F:KerbalEVA.flagReach"></member><member name="F:KerbalEVA.footPivot"></member><member name="F:KerbalEVA.fRgt"></member><member name="F:KerbalEVA.fsm"></member><member name="F:KerbalEVA.fUp"></member><member name="F:KerbalEVA.headLamp"></member><member name="F:KerbalEVA.hopThreshold"></member><member name="F:KerbalEVA.iC"></member><member name="F:KerbalEVA.initialMass"></member><member name="F:KerbalEVA.isEnabled"></member><member name="F:KerbalEVA.isRagdoll"><summary>Indicates whether the Kerbal is currently in ragdoll mode or not.</summary></member><member name="F:KerbalEVA.JetpackDeployed"><summary>Indicates whether the jetpack is switched on or not.</summary></member><member name="F:KerbalEVA.JetpackIsThrusting"><summary>Indicates whether the jetpack is actively thrusting</summary></member><member name="F:KerbalEVA.Kd"></member><member name="F:KerbalEVA.Ki"></member><member name="F:KerbalEVA.Kp"></member><member name="F:KerbalEVA.ladderClimbSpeed"></member><member name="F:KerbalEVA.ladderPivot"></member><member name="F:KerbalEVA.ladderPushoffForce"></member><member name="F:KerbalEVA.lampOn"><summary>Indicates whether the headlamp is on or off</summary></member><member name="F:KerbalEVA.linPower"></member><member name="F:KerbalEVA.massMultiplier"></member><member name="F:KerbalEVA.maxJumpForce"></member><member name="F:KerbalEVA.minRunningGee"></member><member name="F:KerbalEVA.minWalkingGee"></member><member name="F:KerbalEVA.moduleName"></member><member name="F:KerbalEVA.otherRagdollColliders"></member><member name="F:KerbalEVA.overrideStagingIconIfBlank"></member><member name="F:KerbalEVA.PropellantConsumption"></member><member name="F:KerbalEVA.propellantResourceId"></member><member name="F:KerbalEVA.ragdollNodes"></member><member name="F:KerbalEVA.recoverThreshold"></member><member name="F:KerbalEVA.recoverTime"></member><member name="F:KerbalEVA.referenceTransform"></member><member name="F:KerbalEVA.rotPower"></member><member name="F:KerbalEVA.runSpeed"></member><member name="F:KerbalEVA.snapshot"></member><member name="F:KerbalEVA.splatEnabled"></member><member name="F:KerbalEVA.splatPrefab"></member><member name="F:KerbalEVA.splatSpeed"></member><member name="F:KerbalEVA.splatThreshold"></member><member name="F:KerbalEVA.stagingDisableText"></member><member name="F:KerbalEVA.stagingEnabled"></member><member name="F:KerbalEVA.stagingEnableText"></member><member name="F:KerbalEVA.stagingToggleEnabledEditor"></member><member name="F:KerbalEVA.stagingToggleEnabledFlight"></member><member name="F:KerbalEVA.strafeSpeed"></member><member name="F:KerbalEVA.stumbleThreshold"></member><member name="F:KerbalEVA.swimSpeed"></member><member name="F:KerbalEVA.turnRate"></member><member name="F:KerbalEVA.upperTorso"></member><member name="F:KerbalEVA.walkSpeed"></member><member name="F:KerbalEVA.waterAngularDragMultiplier"></member><member name="P:KerbalEVA.Actions"></member><member name="P:KerbalEVA.ClassID"></member><member name="P:KerbalEVA.ClassName"></member><member name="P:KerbalEVA.enabled"></member><member name="P:KerbalEVA.Events"></member><member name="P:KerbalEVA.Fields"></member><member name="P:KerbalEVA.flagItems"></member><member name="P:KerbalEVA.Fuel"><summary>The current amount of EVA fuel the Kerbal is carrying</summary></member><member name="P:KerbalEVA.FuelCapacity"><summary>The maximum amount of EVA fuel the Kerbal can carry</summary></member><member name="P:KerbalEVA.gameObject"></member><member name="P:KerbalEVA.GUIName"></member><member name="P:KerbalEVA.hideFlags"></member><member name="P:KerbalEVA.isActiveAndEnabled"></member><member name="P:KerbalEVA.name"></member><member name="P:KerbalEVA.OnALadder"><summary>Whether the kerbal is currently hanging on to a ladder.</summary></member><member name="P:KerbalEVA.part"></member><member name="P:KerbalEVA.Ready"></member><member name="P:KerbalEVA.tag"></member><member name="P:KerbalEVA.transform"></member><member name="P:KerbalEVA.useGUILayout"></member><member name="P:KerbalEVA.vessel"></member><member name="M:KerbalEVA.AddFlag(System.Int32)"></member><member name="M:KerbalEVA.BoardPart(Part)"><summary>Ends the EVA by boarding the specified part.</summary></member><member name="M:KerbalEVA.BoardSeat(KerbalSeat)"><summary>Ends the EVA by boarding a seat instead of a part.</summary></member><member name="M:KerbalEVA.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:KerbalEVA.BroadcastMessage(string,object)"></member><member name="M:KerbalEVA.BroadcastMessage(string)"></member><member name="M:KerbalEVA.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:KerbalEVA.CancelInvoke"></member><member name="M:KerbalEVA.CancelInvoke(string)"></member><member name="M:KerbalEVA.CompareContactsByNormalToSurface(UnityEngine.ContactPoint,UnityEngine.ContactPoint)"></member><member name="M:KerbalEVA.CompareTag(string)"></member><member name="M:KerbalEVA.Equals(object)"></member><member name="M:KerbalEVA.Finalize"></member><member name="M:KerbalEVA.GetComponent(System.Type)"></member><member name="M:KerbalEVA.GetComponent"></member><member name="M:KerbalEVA.GetComponent(string)"></member><member name="M:KerbalEVA.GetComponentInChildren(System.Type)"></member><member name="M:KerbalEVA.GetComponentInChildren"></member><member name="M:KerbalEVA.GetComponentInParent(System.Type)"></member><member name="M:KerbalEVA.GetComponentInParent"></member><member name="M:KerbalEVA.GetComponents(System.Type)"></member><member name="M:KerbalEVA.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:KerbalEVA.GetComponents(List)"></member><member name="M:KerbalEVA.GetComponents"></member><member name="M:KerbalEVA.GetComponentsInChildren(System.Type)"></member><member name="M:KerbalEVA.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:KerbalEVA.GetComponentsInChildren(System.Boolean)"></member><member name="M:KerbalEVA.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:KerbalEVA.GetComponentsInChildren"></member><member name="M:KerbalEVA.GetComponentsInChildren(List)"></member><member name="M:KerbalEVA.GetComponentsInParent(System.Type)"></member><member name="M:KerbalEVA.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:KerbalEVA.GetComponentsInParent(System.Boolean)"></member><member name="M:KerbalEVA.GetComponentsInParent(System.Boolean,List)"></member><member name="M:KerbalEVA.GetComponentsInParent"></member><member name="M:KerbalEVA.GetEjectPoint(UnityEngine.Vector3,System.Single,System.Single,System.Single)"></member><member name="M:KerbalEVA.GetHashCode"></member><member name="M:KerbalEVA.GetInfo"></member><member name="M:KerbalEVA.GetInstanceID"></member><member name="M:KerbalEVA.GetL19Contact"></member><member name="M:KerbalEVA.GetStagingDisableText"></member><member name="M:KerbalEVA.GetStagingEnableText"></member><member name="M:KerbalEVA.GetType"></member><member name="M:KerbalEVA.Invoke(string,System.Single)"></member><member name="M:KerbalEVA.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:KerbalEVA.IsInvoking(string)"></member><member name="M:KerbalEVA.IsInvoking"></member><member name="M:KerbalEVA.IsStageable"></member><member name="M:KerbalEVA.Load(ConfigNode)"></member><member name="M:KerbalEVA.MakeReference"></member><member name="M:KerbalEVA.MemberwiseClone"></member><member name="M:KerbalEVA.OnActive"></member><member name="M:KerbalEVA.OnAwake"></member><member name="M:KerbalEVA.OnCollisionEnter(UnityEngine.Collision)"></member><member name="M:KerbalEVA.OnCollisionExit(UnityEngine.Collision)"></member><member name="M:KerbalEVA.OnCollisionStay(UnityEngine.Collision)"></member><member name="M:KerbalEVA.OnDeboardSeat"></member><member name="M:KerbalEVA.OnFixedUpdate"></member><member name="M:KerbalEVA.OnGrapple"></member><member name="M:KerbalEVA.OnInactive"></member><member name="M:KerbalEVA.OnInitialize"></member><member name="M:KerbalEVA.OnLoad(ConfigNode)"></member><member name="M:KerbalEVA.OnPartDie"></member><member name="M:KerbalEVA.OnSave(ConfigNode)"></member><member name="M:KerbalEVA.OnStart(PartModule+StartState)"></member><member name="M:KerbalEVA.OnUpdate"></member><member name="M:KerbalEVA.OnVesselGoOffRails(Vessel)"></member><member name="M:KerbalEVA.OnVesselGoOnRails(Vessel)"></member><member name="M:KerbalEVA.OnVesselSituationChange(GameEvents+HostedFromToAction)"></member><member name="M:KerbalEVA.PlantFlag"></member><member name="M:KerbalEVA.RenameVessel"></member><member name="M:KerbalEVA.Save(ConfigNode)"></member><member name="M:KerbalEVA.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:KerbalEVA.SendMessage(string,object)"></member><member name="M:KerbalEVA.SendMessage(string)"></member><member name="M:KerbalEVA.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:KerbalEVA.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:KerbalEVA.SendMessageUpwards(string,object)"></member><member name="M:KerbalEVA.SendMessageUpwards(string)"></member><member name="M:KerbalEVA.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:KerbalEVA.SetStaging(System.Boolean)"></member><member name="M:KerbalEVA.SetupAnimations"></member><member name="M:KerbalEVA.SetWaypoint(UnityEngine.Vector3)"></member><member name="M:KerbalEVA.StagingEnabled"></member><member name="M:KerbalEVA.StagingToggleEnabledEditor"></member><member name="M:KerbalEVA.StagingToggleEnabledFlight"></member><member name="M:KerbalEVA.Start"></member><member name="M:KerbalEVA.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:KerbalEVA.StartCoroutine(string,object)"></member><member name="M:KerbalEVA.StartCoroutine(string)"></member><member name="M:KerbalEVA.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:KerbalEVA.StartNonCollidePeriod(System.Single,System.Single,Part,UnityEngine.Transform)"></member><member name="M:KerbalEVA.StopAllCoroutines"></member><member name="M:KerbalEVA.StopCoroutine(string)"></member><member name="M:KerbalEVA.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:KerbalEVA.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:KerbalEVA.SurfaceContact"></member><member name="M:KerbalEVA.SurfaceOrSplashed"></member><member name="M:KerbalEVA.ToggleStaging"></member><member name="M:KerbalEVA.ToString"></member><member name="M:KerbalEVA.UpdateStagingToggle"></member><member name="M:KerbalEVA.#ctor"></member><member name="T:KerbalGUIManager"><summary>This Class is now Defunct in KSP 1.1 although it still exists.
You need to use KSP.UI.Screens.Flight.KerbalPortraitGallery</summary></member><member name="F:KerbalGUIManager.AvatarSize"></member><member name="F:KerbalGUIManager.AvatarSpacing"></member><member name="F:KerbalGUIManager.AvatarTextSize"></member><member name="F:KerbalGUIManager.buttonHeight"></member><member name="F:KerbalGUIManager.buttonSpacing"></member><member name="F:KerbalGUIManager.buttonWidth"></member><member name="F:KerbalGUIManager.crewNameTextStyle"></member><member name="F:KerbalGUIManager.portraitRenderMaterial"></member><member name="F:KerbalGUIManager.screenAnchor"></member><member name="F:KerbalGUIManager.startIndex"></member><member name="F:KerbalGUIManager.useDrawQueue"></member><member name="F:KerbalGUIManager.ActiveCrew"></member><member name="P:KerbalGUIManager.enabled"></member><member name="P:KerbalGUIManager.gameObject"></member><member name="P:KerbalGUIManager.hideFlags"></member><member name="P:KerbalGUIManager.isActiveAndEnabled"></member><member name="P:KerbalGUIManager.name"></member><member name="P:KerbalGUIManager.tag"></member><member name="P:KerbalGUIManager.transform"></member><member name="P:KerbalGUIManager.useGUILayout"></member><member name="P:KerbalGUIManager.CrewNameTextStyle"></member><member name="P:KerbalGUIManager.PortraitRenderMaterial"></member><member name="M:KerbalGUIManager.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:KerbalGUIManager.BroadcastMessage(string,object)"></member><member name="M:KerbalGUIManager.BroadcastMessage(string)"></member><member name="M:KerbalGUIManager.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:KerbalGUIManager.CancelInvoke"></member><member name="M:KerbalGUIManager.CancelInvoke(string)"></member><member name="M:KerbalGUIManager.CompareTag(string)"></member><member name="M:KerbalGUIManager.Equals(object)"></member><member name="M:KerbalGUIManager.Finalize"></member><member name="M:KerbalGUIManager.GetComponent(System.Type)"></member><member name="M:KerbalGUIManager.GetComponent"></member><member name="M:KerbalGUIManager.GetComponent(string)"></member><member name="M:KerbalGUIManager.GetComponentInChildren(System.Type)"></member><member name="M:KerbalGUIManager.GetComponentInChildren"></member><member name="M:KerbalGUIManager.GetComponentInParent(System.Type)"></member><member name="M:KerbalGUIManager.GetComponentInParent"></member><member name="M:KerbalGUIManager.GetComponents(System.Type)"></member><member name="M:KerbalGUIManager.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:KerbalGUIManager.GetComponents(List)"></member><member name="M:KerbalGUIManager.GetComponents"></member><member name="M:KerbalGUIManager.GetComponentsInChildren(System.Type)"></member><member name="M:KerbalGUIManager.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:KerbalGUIManager.GetComponentsInChildren(System.Boolean)"></member><member name="M:KerbalGUIManager.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:KerbalGUIManager.GetComponentsInChildren"></member><member name="M:KerbalGUIManager.GetComponentsInChildren(List)"></member><member name="M:KerbalGUIManager.GetComponentsInParent(System.Type)"></member><member name="M:KerbalGUIManager.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:KerbalGUIManager.GetComponentsInParent(System.Boolean)"></member><member name="M:KerbalGUIManager.GetComponentsInParent(System.Boolean,List)"></member><member name="M:KerbalGUIManager.GetComponentsInParent"></member><member name="M:KerbalGUIManager.GetHashCode"></member><member name="M:KerbalGUIManager.GetInstanceID"></member><member name="M:KerbalGUIManager.GetType"></member><member name="M:KerbalGUIManager.Invoke(string,System.Single)"></member><member name="M:KerbalGUIManager.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:KerbalGUIManager.IsInvoking(string)"></member><member name="M:KerbalGUIManager.IsInvoking"></member><member name="M:KerbalGUIManager.MemberwiseClone"></member><member name="M:KerbalGUIManager.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:KerbalGUIManager.SendMessage(string,object)"></member><member name="M:KerbalGUIManager.SendMessage(string)"></member><member name="M:KerbalGUIManager.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:KerbalGUIManager.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:KerbalGUIManager.SendMessageUpwards(string,object)"></member><member name="M:KerbalGUIManager.SendMessageUpwards(string)"></member><member name="M:KerbalGUIManager.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:KerbalGUIManager.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:KerbalGUIManager.StartCoroutine(string,object)"></member><member name="M:KerbalGUIManager.StartCoroutine(string)"></member><member name="M:KerbalGUIManager.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:KerbalGUIManager.StopAllCoroutines"></member><member name="M:KerbalGUIManager.StopCoroutine(string)"></member><member name="M:KerbalGUIManager.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:KerbalGUIManager.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:KerbalGUIManager.ToString"></member><member name="M:KerbalGUIManager.AddActiveCrew(Kerbal)"></member><member name="M:KerbalGUIManager.PrintActiveCrew"></member><member name="M:KerbalGUIManager.RemoveActiveCrew(Kerbal)"></member><member name="M:KerbalGUIManager.#ctor"></member><member name="T:KerbalInstructor"><summary>A KerbalInstructor object controls the animated image of a kerbal instructor in a TutorialScenario. KerbalInstructors come with a stock emote animations that you can trigger by calling the appropriate functions.</summary></member><member name="F:KerbalInstructor.anim"></member><member name="F:KerbalInstructor.anim_false_disagreeA"></member><member name="F:KerbalInstructor.anim_false_disagreeB"></member><member name="F:KerbalInstructor.anim_false_disagreeC"></member><member name="F:KerbalInstructor.anim_false_disappointed"></member><member name="F:KerbalInstructor.anim_false_sadA"></member><member name="F:KerbalInstructor.anim_idle"></member><member name="F:KerbalInstructor.anim_idle_lookAround"></member><member name="F:KerbalInstructor.anim_idle_sigh"></member><member name="F:KerbalInstructor.anim_idle_wonder"></member><member name="F:KerbalInstructor.anim_true_nodA"></member><member name="F:KerbalInstructor.anim_true_nodB"></member><member name="F:KerbalInstructor.anim_true_smileA"></member><member name="F:KerbalInstructor.anim_true_smileB"></member><member name="F:KerbalInstructor.anim_true_thumbsUp"></member><member name="F:KerbalInstructor.anim_true_thumbUp"></member><member name="F:KerbalInstructor.AnimationRoot"></member><member name="F:KerbalInstructor.CharacterName"></member><member name="F:KerbalInstructor.DrawDebugPanel"></member><member name="F:KerbalInstructor.instructorCamera"></member><member name="F:KerbalInstructor.PortraitRenderMaterial"></member><member name="P:KerbalInstructor.enabled"></member><member name="P:KerbalInstructor.gameObject"></member><member name="P:KerbalInstructor.hideFlags"></member><member name="P:KerbalInstructor.isActiveAndEnabled"></member><member name="P:KerbalInstructor.name"></member><member name="P:KerbalInstructor.tag"></member><member name="P:KerbalInstructor.transform"></member><member name="P:KerbalInstructor.useGUILayout"></member><member name="M:KerbalInstructor.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:KerbalInstructor.BroadcastMessage(string,object)"></member><member name="M:KerbalInstructor.BroadcastMessage(string)"></member><member name="M:KerbalInstructor.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:KerbalInstructor.CancelInvoke"></member><member name="M:KerbalInstructor.CancelInvoke(string)"></member><member name="M:KerbalInstructor.ClearCamera"></member><member name="M:KerbalInstructor.CompareTag(string)"></member><member name="M:KerbalInstructor.Equals(object)"></member><member name="M:KerbalInstructor.Finalize"></member><member name="M:KerbalInstructor.GetComponent(System.Type)"></member><member name="M:KerbalInstructor.GetComponent"></member><member name="M:KerbalInstructor.GetComponent(string)"></member><member name="M:KerbalInstructor.GetComponentInChildren(System.Type)"></member><member name="M:KerbalInstructor.GetComponentInChildren"></member><member name="M:KerbalInstructor.GetComponentInParent(System.Type)"></member><member name="M:KerbalInstructor.GetComponentInParent"></member><member name="M:KerbalInstructor.GetComponents(System.Type)"></member><member name="M:KerbalInstructor.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:KerbalInstructor.GetComponents(List)"></member><member name="M:KerbalInstructor.GetComponents"></member><member name="M:KerbalInstructor.GetComponentsInChildren(System.Type)"></member><member name="M:KerbalInstructor.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:KerbalInstructor.GetComponentsInChildren(System.Boolean)"></member><member name="M:KerbalInstructor.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:KerbalInstructor.GetComponentsInChildren"></member><member name="M:KerbalInstructor.GetComponentsInChildren(List)"></member><member name="M:KerbalInstructor.GetComponentsInParent(System.Type)"></member><member name="M:KerbalInstructor.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:KerbalInstructor.GetComponentsInParent(System.Boolean)"></member><member name="M:KerbalInstructor.GetComponentsInParent(System.Boolean,List)"></member><member name="M:KerbalInstructor.GetComponentsInParent"></member><member name="M:KerbalInstructor.GetHashCode"></member><member name="M:KerbalInstructor.GetInstanceID"></member><member name="M:KerbalInstructor.GetType"></member><member name="M:KerbalInstructor.Invoke(string,System.Single)"></member><member name="M:KerbalInstructor.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:KerbalInstructor.IsInvoking(string)"></member><member name="M:KerbalInstructor.IsInvoking"></member><member name="M:KerbalInstructor.MemberwiseClone"></member><member name="M:KerbalInstructor.PlayEmote(CharacterAnimationState)"><summary>Presumably, makes the instructor execute a given animation.</summary><param name="st">The animation to execute.</param></member><member name="M:KerbalInstructor.PlayEmote(CharacterAnimationState,CharacterAnimationState,System.Boolean)"></member><member name="M:KerbalInstructor.PlayEmoteQueued(CharacterAnimationState,CharacterAnimationState)"></member><member name="M:KerbalInstructor.PlayEmoteRepeating(CharacterAnimationState,System.Single)"><summary>Presumably, makes the instructor execute a given animation repeatedly.</summary><param name="st">The animation to exectue.</param><param name="repeatInterval">How often to repeat the animation, in seconds?</param></member><member name="M:KerbalInstructor.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:KerbalInstructor.SendMessage(string,object)"></member><member name="M:KerbalInstructor.SendMessage(string)"></member><member name="M:KerbalInstructor.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:KerbalInstructor.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:KerbalInstructor.SendMessageUpwards(string,object)"></member><member name="M:KerbalInstructor.SendMessageUpwards(string)"></member><member name="M:KerbalInstructor.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:KerbalInstructor.SetupAnimations"></member><member name="M:KerbalInstructor.SetupCamera(UnityEngine.RenderTexture)"></member><member name="M:KerbalInstructor.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:KerbalInstructor.StartCoroutine(string,object)"></member><member name="M:KerbalInstructor.StartCoroutine(string)"></member><member name="M:KerbalInstructor.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:KerbalInstructor.StopAllCoroutines"></member><member name="M:KerbalInstructor.StopCoroutine(string)"></member><member name="M:KerbalInstructor.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:KerbalInstructor.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:KerbalInstructor.StopRepeatingEmote"><summary>Presumably, makes the instructor stop repeating whatever animation you last told it to repeat.</summary></member><member name="M:KerbalInstructor.ToString"></member><member name="M:KerbalInstructor.#ctor"></member><member name="T:KerbalRoster"></member><member name="P:KerbalRoster.Applicants"></member><member name="P:KerbalRoster.Count"></member><member name="P:KerbalRoster.Crew"></member><member name="P:KerbalRoster.GameMode"></member><member name="P:KerbalRoster.Item"></member><member name="P:KerbalRoster.Item"></member><member name="P:KerbalRoster.Tourist"></member><member name="P:KerbalRoster.Unowned"></member><member name="P:KerbalRoster.ExperienceConfig"></member><member name="M:KerbalRoster.DefaultCrewForVessel(ConfigNode,VesselCrewManifest,System.Boolean)"></member><member name="M:KerbalRoster.Equals(object)"></member><member name="M:KerbalRoster.Exists(string)"></member><member name="M:KerbalRoster.Finalize"></member><member name="M:KerbalRoster.GetActiveCrewCount"></member><member name="M:KerbalRoster.GetAssignedCrewCount"></member><member name="M:KerbalRoster.GetAvailableCrewCount"></member><member name="M:KerbalRoster.GetHashCode"></member><member name="M:KerbalRoster.GetKIACrewCount"></member><member name="M:KerbalRoster.GetLostCrewCount"></member><member name="M:KerbalRoster.GetMissingCrewCount"></member><member name="M:KerbalRoster.GetNewKerbal(ProtoCrewMember+KerbalType)"><summary>Generates a new Kerbal pertaining to type (i.e. Crew, Tourist, Unowned, Applicant).</summary></member><member name="M:KerbalRoster.GetNextApplicant"></member><member name="M:KerbalRoster.GetNextAvailableKerbal(ProtoCrewMember+KerbalType)"></member><member name="M:KerbalRoster.GetNextOrNewKerbal(ProtoCrewMember+KerbalType)"></member><member name="M:KerbalRoster.GetType"></member><member name="M:KerbalRoster.HireApplicant(ProtoCrewMember)"></member><member name="M:KerbalRoster.IndexOf(ProtoCrewMember)"></member><member name="M:KerbalRoster.Init(Game)"></member><member name="M:KerbalRoster.Kerbals(ProtoCrewMember+KerbalType,ProtoCrewMember+RosterStatus[])"></member><member name="M:KerbalRoster.MemberwiseClone"></member><member name="M:KerbalRoster.Remove(string)"></member><member name="M:KerbalRoster.Remove(ProtoCrewMember)"></member><member name="M:KerbalRoster.RemoveDead(ProtoCrewMember)"></member><member name="M:KerbalRoster.RemoveMIA(ProtoCrewMember)"></member><member name="M:KerbalRoster.SackAvailable(ProtoCrewMember)"></member><member name="M:KerbalRoster.Save(ConfigNode)"></member><member name="M:KerbalRoster.ToString"></member><member name="M:KerbalRoster.Update(System.Double)"></member><member name="M:KerbalRoster.UpdateCrewForVessel(ConfigNode,VesselCrewManifest,System.Func)"></member><member name="M:KerbalRoster.ValidateAssignments(Game)"></member><member name="M:KerbalRoster.AddExperienceType(string,string,System.Single,System.Single)"></member><member name="M:KerbalRoster.CalculateExperience(FlightLog)"></member><member name="M:KerbalRoster.CalculateExperienceLevel(System.Single)"></member><member name="M:KerbalRoster.GenerateExperienceLog(FlightLog)"></member><member name="M:KerbalRoster.GenerateInitialCrewRoster(Game+Modes)"></member><member name="M:KerbalRoster.GetExperienceEffectType(string)"></member><member name="M:KerbalRoster.GetExperienceLevelRequirement(System.Int32)"></member><member name="M:KerbalRoster.GetExperienceMaxLevel"></member><member name="M:KerbalRoster.GetExperienceTraitType(string)"></member><member name="M:KerbalRoster.SetExperienceTrait(ProtoCrewMember,string)"><summary>Sets the trait (i.e. Scientist/Engineer/Pilot/Custom).  This trait is by default a hash of the Kerbal's name.  However, this method can be called to permanently set the trait of the Kerbal.  The traitName must match one of those found in the Traits.cfg file.  For example:

SetExperienceTrait(Kerbal_Object, "Pilot");

Will set the Kerbal in Kerbal_Object as a pilot, whether he would be by default or not.</summary></member><member name="M:KerbalRoster.#ctor(Game+Modes)"></member><member name="M:KerbalRoster.#ctor(ConfigNode,Game+Modes)"></member><member name="T:Krakensbane"><summary>The physics simulation has problems if vessels move too fast relative to  the underlying reference frame used by the simulation, or get too far from the origin of the coordinate system. Krakensbane shifts the reference frame origin and velocity so that the active vessel is always near the origin of, and moving slowly with respect to, the underlying coordinate system used by the physics simulation.</summary></member><member name="F:Krakensbane.excessV"></member><member name="F:Krakensbane.FrameVel"></member><member name="F:Krakensbane.lastCorrection"></member><member name="F:Krakensbane.MaxV"></member><member name="F:Krakensbane.RBVel"></member><member name="F:Krakensbane.totalVel"></member><member name="P:Krakensbane.enabled"></member><member name="P:Krakensbane.gameObject"></member><member name="P:Krakensbane.hideFlags"></member><member name="P:Krakensbane.isActiveAndEnabled"></member><member name="P:Krakensbane.name"></member><member name="P:Krakensbane.tag"></member><member name="P:Krakensbane.transform"></member><member name="P:Krakensbane.useGUILayout"></member><member name="P:Krakensbane.SqrThreshold"></member><member name="P:Krakensbane.Threshold"></member><member name="M:Krakensbane.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:Krakensbane.BroadcastMessage(string,object)"></member><member name="M:Krakensbane.BroadcastMessage(string)"></member><member name="M:Krakensbane.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:Krakensbane.CancelInvoke"></member><member name="M:Krakensbane.CancelInvoke(string)"></member><member name="M:Krakensbane.CompareTag(string)"></member><member name="M:Krakensbane.Equals(object)"></member><member name="M:Krakensbane.Finalize"></member><member name="M:Krakensbane.GetComponent(System.Type)"></member><member name="M:Krakensbane.GetComponent"></member><member name="M:Krakensbane.GetComponent(string)"></member><member name="M:Krakensbane.GetComponentInChildren(System.Type)"></member><member name="M:Krakensbane.GetComponentInChildren"></member><member name="M:Krakensbane.GetComponentInParent(System.Type)"></member><member name="M:Krakensbane.GetComponentInParent"></member><member name="M:Krakensbane.GetComponents(System.Type)"></member><member name="M:Krakensbane.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:Krakensbane.GetComponents(List)"></member><member name="M:Krakensbane.GetComponents"></member><member name="M:Krakensbane.GetComponentsInChildren(System.Type)"></member><member name="M:Krakensbane.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:Krakensbane.GetComponentsInChildren(System.Boolean)"></member><member name="M:Krakensbane.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:Krakensbane.GetComponentsInChildren"></member><member name="M:Krakensbane.GetComponentsInChildren(List)"></member><member name="M:Krakensbane.GetComponentsInParent(System.Type)"></member><member name="M:Krakensbane.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:Krakensbane.GetComponentsInParent(System.Boolean)"></member><member name="M:Krakensbane.GetComponentsInParent(System.Boolean,List)"></member><member name="M:Krakensbane.GetComponentsInParent"></member><member name="M:Krakensbane.GetHashCode"></member><member name="M:Krakensbane.GetInstanceID"></member><member name="M:Krakensbane.GetType"></member><member name="M:Krakensbane.Invoke(string,System.Single)"></member><member name="M:Krakensbane.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:Krakensbane.IsInvoking(string)"></member><member name="M:Krakensbane.IsInvoking"></member><member name="M:Krakensbane.MemberwiseClone"></member><member name="M:Krakensbane.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:Krakensbane.SendMessage(string,object)"></member><member name="M:Krakensbane.SendMessage(string)"></member><member name="M:Krakensbane.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:Krakensbane.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:Krakensbane.SendMessageUpwards(string,object)"></member><member name="M:Krakensbane.SendMessageUpwards(string)"></member><member name="M:Krakensbane.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:Krakensbane.setOffset(Vector3d)"><summary>Moves all vessels not on rails by the given position offset. This will usually only affect the active vessel, unless there are other vessels nearby. The offset can be very large and the vessels will not break, unlike for Vessel.SetPosition.</summary><param name="offset"/></member><member name="M:Krakensbane.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:Krakensbane.StartCoroutine(string,object)"></member><member name="M:Krakensbane.StartCoroutine(string)"></member><member name="M:Krakensbane.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:Krakensbane.StopAllCoroutines"></member><member name="M:Krakensbane.StopCoroutine(string)"></member><member name="M:Krakensbane.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:Krakensbane.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:Krakensbane.ToString"></member><member name="M:Krakensbane.GetFrameVelocity"><summary>Returns the velocity of the Krakensbane velocity frame.</summary><returns/></member><member name="M:Krakensbane.GetFrameVelocityV3f"><summary>Returns the velocity of the Krakensbane velocity frame as a single-precision vector.</summary><returns/></member><member name="M:Krakensbane.GetLastCorrection"><summary>Returns the last velocity correction performed.</summary><returns/></member><member name="M:Krakensbane.ResetVelocityFrame"><summary>sets the frame velocity back to 0m/s. Use this if setting the worldspace velocity of vessels directly.</summary></member><member name="M:Krakensbane.#ctor"></member><member name="T:ManeuverNode"><summary>Represents a maneuver node.</summary></member><member name="F:ManeuverNode.attachedGizmo"></member><member name="F:ManeuverNode.DeltaV"><summary>The delta-V of the burn represented by this maneuver node, in m/s. NOTE: maneuver nodes use a special coordinate system for delta-V. The x-component of DeltaV represents the delta-V in the radial-plus direction. The y-component of DeltaV  represents the delta-V in the normal-minus direction. The z-component of DeltaV represents the delta-V in the prograde direction.</summary></member><member name="F:ManeuverNode.nextPatch"><summary>The orbit patch that starts at this maneuver node.</summary></member><member name="F:ManeuverNode.nodeRotation"></member><member name="F:ManeuverNode.patch"><summary>The orbit patch that ends at this maneuver node?</summary></member><member name="F:ManeuverNode.scaledSpaceTarget"></member><member name="F:ManeuverNode.solver"></member><member name="F:ManeuverNode.UT"><summary>The universal time of the burn represented by this maneuver node.</summary></member><member name="M:ManeuverNode.AttachGizmo(UnityEngine.GameObject,PatchedConicRenderer)"></member><member name="M:ManeuverNode.AttachGizmo(GameObject,PatchedConicRenderer,PatchRendering)"></member><member name="M:ManeuverNode.DetachGizmo"></member><member name="M:ManeuverNode.Equals(object)"></member><member name="M:ManeuverNode.Finalize"></member><member name="M:ManeuverNode.GetBurnVector(Orbit)"><summary>Perhaps this translates the DeltaV vector into a world-space vector?</summary><param name="currentOrbit"/><returns/></member><member name="M:ManeuverNode.GetHashCode"></member><member name="M:ManeuverNode.GetType"></member><member name="M:ManeuverNode.Load(ConfigNode)"></member><member name="M:ManeuverNode.MemberwiseClone"></member><member name="M:ManeuverNode.OnGizmoUpdated(Vector3d,System.Double)"><summary>You can call this function to change the delta-V and time of a maneuver node.</summary><param name="dV">The new delta-V. See the DeltaV for notes about the coordinate system used.</param><param name="ut">The new universal time.</param></member><member name="M:ManeuverNode.RemoveSelf"></member><member name="M:ManeuverNode.Save(ConfigNode)"></member><member name="M:ManeuverNode.ToString"></member><member name="M:ManeuverNode.#ctor"></member><member name="T:MapView"><summary>This class stores some global information related to the map view.</summary></member><member name="F:MapView.camDistance"></member><member name="F:MapView.camFocusTarget"></member><member name="F:MapView.camHdg"></member><member name="F:MapView.camPitch"></member><member name="F:MapView.ConstantMode"></member><member name="F:MapView.dottedLineMaterial"></member><member name="F:MapView.draw3Dlines"></member><member name="F:MapView.mainCamera"></member><member name="F:MapView.mainCameras"></member><member name="F:MapView.maneuverModeActive"></member><member name="F:MapView.maneuverModeToggle"></member><member name="F:MapView.maneuverNodePrefab"></member><member name="F:MapView.mapCamera"></member><member name="F:MapView.MapCollapse_navBall"></member><member name="F:MapView.masterOrbitOpacity"></member><member name="F:MapView.max3DlineDrawDist"></member><member name="F:MapView.orbitDrawModeBtn"></member><member name="F:MapView.orbitIconsMap"></member><member name="F:MapView.orbitIconsMaterial"></member><member name="F:MapView.orbitIconsTextSkin"></member><member name="F:MapView.orbitIconsTextSkinDef"></member><member name="F:MapView.orbitLinesMaterial"></member><member name="F:MapView.patchColors"></member><member name="F:MapView.scaledVessel"></member><member name="F:MapView.scriptsToDisable"></member><member name="F:MapView.spaceCameraHome"></member><member name="F:MapView.targetPatchColors"></member><member name="F:MapView.transitionDuration"></member><member name="F:MapView.uiCameras"></member><member name="F:MapView.uiNodePrefab"></member><member name="F:MapView.vectorCam"></member><member name="F:MapView.culledCaptions"></member><member name="F:MapView.DottedLineMaterialStatic"></member><member name="F:MapView.fetch"></member><member name="F:MapView.MapIconTextOverlap"></member><member name="F:MapView.MapIsEnabled"><summary>Whether the game is currently in map view or not.</summary></member><member name="F:MapView.OnEnterMapView"></member><member name="F:MapView.OnExitMapView"></member><member name="F:MapView.OrbitLinesMaterialStatic"></member><member name="F:MapView.totalCaptions"></member><member name="P:MapView.enabled"></member><member name="P:MapView.gameObject"></member><member name="P:MapView.hideFlags"></member><member name="P:MapView.isActiveAndEnabled"></member><member name="P:MapView.name"></member><member name="P:MapView.tag"></member><member name="P:MapView.transform"></member><member name="P:MapView.useGUILayout"></member><member name="P:MapView.VectorCamera"></member><member name="P:MapView.DottedLinesMaterial"></member><member name="P:MapView.Draw3DLines"></member><member name="P:MapView.fetch"></member><member name="P:MapView.ManeuverModeActive"></member><member name="P:MapView.ManeuverNodePrefab"></member><member name="P:MapView.MapCamera"></member><member name="P:MapView.OrbitDrawMode"></member><member name="P:MapView.OrbitIconsMap"></member><member name="P:MapView.OrbitIconsMaterial"></member><member name="P:MapView.OrbitIconsTextSkin"></member><member name="P:MapView.OrbitIconsTextSkinDef"></member><member name="P:MapView.OrbitLinesMaterial"></member><member name="P:MapView.PatchColors"></member><member name="P:MapView.SplineEccentricOffset"></member><member name="P:MapView.TargetPatchColors"></member><member name="P:MapView.UINodePrefab"></member><member name="M:MapView.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:MapView.BroadcastMessage(string,object)"></member><member name="M:MapView.BroadcastMessage(string)"></member><member name="M:MapView.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:MapView.CancelInvoke"></member><member name="M:MapView.CancelInvoke(string)"></member><member name="M:MapView.CompareTag(string)"></member><member name="M:MapView.CreateVectorCanvasCam"></member><member name="M:MapView.Equals(object)"></member><member name="M:MapView.Finalize"></member><member name="M:MapView.GetComponent(System.Type)"></member><member name="M:MapView.GetComponent"></member><member name="M:MapView.GetComponent(string)"></member><member name="M:MapView.GetComponentInChildren(System.Type)"></member><member name="M:MapView.GetComponentInChildren"></member><member name="M:MapView.GetComponentInParent(System.Type)"></member><member name="M:MapView.GetComponentInParent"></member><member name="M:MapView.GetComponents(System.Type)"></member><member name="M:MapView.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:MapView.GetComponents(List)"></member><member name="M:MapView.GetComponents"></member><member name="M:MapView.GetComponentsInChildren(System.Type)"></member><member name="M:MapView.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:MapView.GetComponentsInChildren(System.Boolean)"></member><member name="M:MapView.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:MapView.GetComponentsInChildren"></member><member name="M:MapView.GetComponentsInChildren(List)"></member><member name="M:MapView.GetComponentsInParent(System.Type)"></member><member name="M:MapView.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:MapView.GetComponentsInParent(System.Boolean)"></member><member name="M:MapView.GetComponentsInParent(System.Boolean,List)"></member><member name="M:MapView.GetComponentsInParent"></member><member name="M:MapView.GetHashCode"></member><member name="M:MapView.GetInstanceID"></member><member name="M:MapView.GetType"></member><member name="M:MapView.Invoke(string,System.Single)"></member><member name="M:MapView.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:MapView.IsInvoking(string)"></member><member name="M:MapView.IsInvoking"></member><member name="M:MapView.LerpOrbitOpacity"></member><member name="M:MapView.MemberwiseClone"></member><member name="M:MapView.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:MapView.SendMessage(string,object)"></member><member name="M:MapView.SendMessage(string)"></member><member name="M:MapView.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:MapView.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:MapView.SendMessageUpwards(string,object)"></member><member name="M:MapView.SendMessageUpwards(string)"></member><member name="M:MapView.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:MapView.Start"></member><member name="M:MapView.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:MapView.StartCoroutine(string,object)"></member><member name="M:MapView.StartCoroutine(string)"></member><member name="M:MapView.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:MapView.StartOpacityLerp(System.Single)"></member><member name="M:MapView.StopAllCoroutines"></member><member name="M:MapView.StopCoroutine(string)"></member><member name="M:MapView.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:MapView.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:MapView.ToString"></member><member name="M:MapView.UpdateMap(System.Boolean)"></member><member name="M:MapView.EnterMapView"><summary>Calling this function will cause the game to switch to map view from the flight view.</summary></member><member name="M:MapView.ExitMapView"><summary>Calling this function will cause the game to switch to flight view from the map view.</summary></member><member name="M:MapView.GetEccOffset(System.Single,System.Single,System.Single)"></member><member name="M:MapView.#ctor"></member><member name="T:ModuleAblator"><summary>A PartModule that lets a part cool its skin by consuming a resource through pyrolysis. For example, ablative heatshields are implemented with this module. Attention: this module may override some heat conduction behavior (see reentryConductivity).</summary></member><member name="F:ModuleAblator.ablationTempThresh"><summary>Skin temperature (in Kelvin) at which ablation begins. This is merely a cutoff; it doesn't reposition the zero point of the calculation. If you set this value very high, you'll see ablation rate instantly jump from zero to a high value as the temperature passes this threshold.</summary></member><member name="F:ModuleAblator.ablativeResource"><summary>Which resource is consumed by the ablation process. Yes, you can put any resource here that is present in the part, for hilarious results... but you probably want to set it to "Ablator".</summary></member><member name="F:ModuleAblator.charAlpha"></member><member name="F:ModuleAblator.charMax"><summary>How dark the charring effect on a part that has experienced ablation can get at most. Between 0 and 1, should be higher than or equal to charMin.</summary></member><member name="F:ModuleAblator.charMin"><summary>How darkly charred a part with ModuleAblator starts out, even without prior use. Between 0 and 1, should be lower than or equal to charMax.</summary></member><member name="F:ModuleAblator.flux"></member><member name="F:ModuleAblator.fluxField"></member><member name="F:ModuleAblator.isEnabled"></member><member name="F:ModuleAblator.loss"></member><member name="F:ModuleAblator.lossConst"><summary>A constant that governs the rate at which ablation happens. Modified by lossExp. Usually positive and very small (one digit).</summary></member><member name="F:ModuleAblator.lossExp"><summary>An exponent that governs the rate at which ablation happens. Modifies lossConst. Usually negative and quite large (four digits).</summary></member><member name="F:ModuleAblator.lossField"></member><member name="F:ModuleAblator.moduleName"></member><member name="F:ModuleAblator.outputMult"></member><member name="F:ModuleAblator.outputResource"></member><member name="F:ModuleAblator.overrideStagingIconIfBlank"></member><member name="F:ModuleAblator.pyrolysisLossFactor"></member><member name="F:ModuleAblator.reentryConductivity"><summary>Governs the internal&lt;-&gt;internal heat conduction behavior of a part with ModuleAblator. Note that this *hard overrides* all other internals based heat conduction fields, such as heatConductivity or bulkheadProfiles - at all times, not just during reentry! It doesn't affect skin&lt;-&gt;skin conduction between parts, or the part's own skin&lt;-&gt;internal heat exchange. Default internal heat conductivity in KSP is 0.12, smaller conducts less, larger conducts more.</summary></member><member name="F:ModuleAblator.snapshot"></member><member name="F:ModuleAblator.stagingDisableText"></member><member name="F:ModuleAblator.stagingEnabled"></member><member name="F:ModuleAblator.stagingEnableText"></member><member name="F:ModuleAblator.stagingToggleEnabledEditor"></member><member name="F:ModuleAblator.stagingToggleEnabledFlight"></member><member name="P:ModuleAblator.Actions"></member><member name="P:ModuleAblator.ClassID"></member><member name="P:ModuleAblator.ClassName"></member><member name="P:ModuleAblator.enabled"></member><member name="P:ModuleAblator.Events"></member><member name="P:ModuleAblator.Fields"></member><member name="P:ModuleAblator.gameObject"></member><member name="P:ModuleAblator.GUIName"></member><member name="P:ModuleAblator.hideFlags"></member><member name="P:ModuleAblator.isActiveAndEnabled"></member><member name="P:ModuleAblator.name"></member><member name="P:ModuleAblator.part"></member><member name="P:ModuleAblator.tag"></member><member name="P:ModuleAblator.transform"></member><member name="P:ModuleAblator.useGUILayout"></member><member name="P:ModuleAblator.vessel"></member><member name="M:ModuleAblator.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleAblator.BroadcastMessage(string,object)"></member><member name="M:ModuleAblator.BroadcastMessage(string)"></member><member name="M:ModuleAblator.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleAblator.CancelInvoke"></member><member name="M:ModuleAblator.CancelInvoke(string)"></member><member name="M:ModuleAblator.CompareTag(string)"></member><member name="M:ModuleAblator.Equals(object)"></member><member name="M:ModuleAblator.Finalize"></member><member name="M:ModuleAblator.FixedUpdate"></member><member name="M:ModuleAblator.GetComponent(System.Type)"></member><member name="M:ModuleAblator.GetComponent"></member><member name="M:ModuleAblator.GetComponent(string)"></member><member name="M:ModuleAblator.GetComponentInChildren(System.Type)"></member><member name="M:ModuleAblator.GetComponentInChildren"></member><member name="M:ModuleAblator.GetComponentInParent(System.Type)"></member><member name="M:ModuleAblator.GetComponentInParent"></member><member name="M:ModuleAblator.GetComponents(System.Type)"></member><member name="M:ModuleAblator.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:ModuleAblator.GetComponents(List)"></member><member name="M:ModuleAblator.GetComponents"></member><member name="M:ModuleAblator.GetComponentsInChildren(System.Type)"></member><member name="M:ModuleAblator.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:ModuleAblator.GetComponentsInChildren(System.Boolean)"></member><member name="M:ModuleAblator.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:ModuleAblator.GetComponentsInChildren"></member><member name="M:ModuleAblator.GetComponentsInChildren(List)"></member><member name="M:ModuleAblator.GetComponentsInParent(System.Type)"></member><member name="M:ModuleAblator.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:ModuleAblator.GetComponentsInParent(System.Boolean)"></member><member name="M:ModuleAblator.GetComponentsInParent(System.Boolean,List)"></member><member name="M:ModuleAblator.GetComponentsInParent"></member><member name="M:ModuleAblator.GetHashCode"></member><member name="M:ModuleAblator.GetInfo"></member><member name="M:ModuleAblator.GetInstanceID"></member><member name="M:ModuleAblator.GetStagingDisableText"></member><member name="M:ModuleAblator.GetStagingEnableText"></member><member name="M:ModuleAblator.GetType"></member><member name="M:ModuleAblator.Invoke(string,System.Single)"></member><member name="M:ModuleAblator.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:ModuleAblator.IsInvoking(string)"></member><member name="M:ModuleAblator.IsInvoking"></member><member name="M:ModuleAblator.IsStageable"></member><member name="M:ModuleAblator.Load(ConfigNode)"></member><member name="M:ModuleAblator.MemberwiseClone"></member><member name="M:ModuleAblator.OnActive"></member><member name="M:ModuleAblator.OnAwake"></member><member name="M:ModuleAblator.OnFixedUpdate"></member><member name="M:ModuleAblator.OnInactive"></member><member name="M:ModuleAblator.OnInitialize"></member><member name="M:ModuleAblator.OnLoad(ConfigNode)"></member><member name="M:ModuleAblator.OnSave(ConfigNode)"></member><member name="M:ModuleAblator.OnStart(PartModule+StartState)"></member><member name="M:ModuleAblator.OnUpdate"></member><member name="M:ModuleAblator.Save(ConfigNode)"></member><member name="M:ModuleAblator.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleAblator.SendMessage(string,object)"></member><member name="M:ModuleAblator.SendMessage(string)"></member><member name="M:ModuleAblator.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleAblator.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleAblator.SendMessageUpwards(string,object)"></member><member name="M:ModuleAblator.SendMessageUpwards(string)"></member><member name="M:ModuleAblator.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleAblator.SetStaging(System.Boolean)"></member><member name="M:ModuleAblator.StagingEnabled"></member><member name="M:ModuleAblator.StagingToggleEnabledEditor"></member><member name="M:ModuleAblator.StagingToggleEnabledFlight"></member><member name="M:ModuleAblator.Start"></member><member name="M:ModuleAblator.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:ModuleAblator.StartCoroutine(string,object)"></member><member name="M:ModuleAblator.StartCoroutine(string)"></member><member name="M:ModuleAblator.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:ModuleAblator.StopAllCoroutines"></member><member name="M:ModuleAblator.StopCoroutine(string)"></member><member name="M:ModuleAblator.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:ModuleAblator.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:ModuleAblator.ToggleStaging"></member><member name="M:ModuleAblator.ToString"></member><member name="M:ModuleAblator.UpdateStagingToggle"></member><member name="M:ModuleAblator.#ctor"></member><member name="T:ModuleAsteroid"><summary>Key module in PART[PotatoRoid]   Although this module is included in the PotatoRoid config file, it is not saved  in the VESSEL trees of unvisited asteroids. The module is initialized when an asteroid  first enters physics range</summary></member><member name="F:ModuleAsteroid.AsteroidName"><summary>Stores the original name of the asteroid, before any ships docked with it</summary></member><member name="F:ModuleAsteroid.density"><summary>Density of asteroid, in tons/m^3. Used to calculate part mass.</summary></member><member name="F:ModuleAsteroid.experimentUsageMask"></member><member name="F:ModuleAsteroid.forceProceduralDrag"></member><member name="F:ModuleAsteroid.isEnabled"></member><member name="F:ModuleAsteroid.maxRadiusMultiplier"><summary>Largest allowed radius relative to nominal radius for that asteroid class</summary></member><member name="F:ModuleAsteroid.minRadiusMultiplier"><summary>Smallest allowed radius relative to nominal radius for that asteroid class</summary></member><member name="F:ModuleAsteroid.moduleName"></member><member name="F:ModuleAsteroid.overrideStagingIconIfBlank"></member><member name="F:ModuleAsteroid.prefabBaseURL"><summary>Stores some kind of resource.</summary><example>"Procedural/PA_C"</example></member><member name="F:ModuleAsteroid.sampleExperimentId"><summary>The science experiment triggered by sampling this asteroid.</summary></member><member name="F:ModuleAsteroid.sampleExperimentXmitScalar"><summary>The fraction of science recovered by transmitting back to Kerbin.</summary></member><member name="F:ModuleAsteroid.seed"><summary>Used to generate asteroid mesh</summary></member><member name="F:ModuleAsteroid.snapshot"></member><member name="F:ModuleAsteroid.stagingDisableText"></member><member name="F:ModuleAsteroid.stagingEnabled"></member><member name="F:ModuleAsteroid.stagingEnableText"></member><member name="F:ModuleAsteroid.stagingToggleEnabledEditor"></member><member name="F:ModuleAsteroid.stagingToggleEnabledFlight"></member><member name="P:ModuleAsteroid.Actions"></member><member name="P:ModuleAsteroid.ClassID"></member><member name="P:ModuleAsteroid.ClassName"></member><member name="P:ModuleAsteroid.enabled"></member><member name="P:ModuleAsteroid.Events"></member><member name="P:ModuleAsteroid.Fields"></member><member name="P:ModuleAsteroid.gameObject"></member><member name="P:ModuleAsteroid.GUIName"></member><member name="P:ModuleAsteroid.hideFlags"></member><member name="P:ModuleAsteroid.isActiveAndEnabled"></member><member name="P:ModuleAsteroid.name"></member><member name="P:ModuleAsteroid.part"></member><member name="P:ModuleAsteroid.tag"></member><member name="P:ModuleAsteroid.transform"></member><member name="P:ModuleAsteroid.useGUILayout"></member><member name="P:ModuleAsteroid.vessel"></member><member name="M:ModuleAsteroid.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleAsteroid.BroadcastMessage(string,object)"></member><member name="M:ModuleAsteroid.BroadcastMessage(string)"></member><member name="M:ModuleAsteroid.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleAsteroid.CancelInvoke"></member><member name="M:ModuleAsteroid.CancelInvoke(string)"></member><member name="M:ModuleAsteroid.CompareTag(string)"></member><member name="M:ModuleAsteroid.Equals(object)"></member><member name="M:ModuleAsteroid.Finalize"></member><member name="M:ModuleAsteroid.GetComponent(System.Type)"></member><member name="M:ModuleAsteroid.GetComponent"></member><member name="M:ModuleAsteroid.GetComponent(string)"></member><member name="M:ModuleAsteroid.GetComponentInChildren(System.Type)"></member><member name="M:ModuleAsteroid.GetComponentInChildren"></member><member name="M:ModuleAsteroid.GetComponentInParent(System.Type)"></member><member name="M:ModuleAsteroid.GetComponentInParent"></member><member name="M:ModuleAsteroid.GetComponents(System.Type)"></member><member name="M:ModuleAsteroid.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:ModuleAsteroid.GetComponents(List)"></member><member name="M:ModuleAsteroid.GetComponents"></member><member name="M:ModuleAsteroid.GetComponentsInChildren(System.Type)"></member><member name="M:ModuleAsteroid.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:ModuleAsteroid.GetComponentsInChildren(System.Boolean)"></member><member name="M:ModuleAsteroid.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:ModuleAsteroid.GetComponentsInChildren"></member><member name="M:ModuleAsteroid.GetComponentsInChildren(List)"></member><member name="M:ModuleAsteroid.GetComponentsInParent(System.Type)"></member><member name="M:ModuleAsteroid.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:ModuleAsteroid.GetComponentsInParent(System.Boolean)"></member><member name="M:ModuleAsteroid.GetComponentsInParent(System.Boolean,List)"></member><member name="M:ModuleAsteroid.GetComponentsInParent"></member><member name="M:ModuleAsteroid.GetHashCode"></member><member name="M:ModuleAsteroid.GetInfo"></member><member name="M:ModuleAsteroid.GetInstanceID"></member><member name="M:ModuleAsteroid.GetModuleMass(System.Single,ModifierStagingSituation)"></member><member name="M:ModuleAsteroid.GetModuleMassChangeWhen"></member><member name="M:ModuleAsteroid.GetStagingDisableText"></member><member name="M:ModuleAsteroid.GetStagingEnableText"></member><member name="M:ModuleAsteroid.GetType"></member><member name="M:ModuleAsteroid.GetVesselName"><summary>Returns asteroid name</summary><returns>The original asteroid name, not that of any docked ships</returns><remarks>Implements IVesselAutoRename</remarks></member><member name="M:ModuleAsteroid.GetVesselType"><summary>Returns the ship class</summary><returns>Returns VesselType.SpaceObject</returns><remarks>Implements IVesselAutoRename</remarks></member><member name="M:ModuleAsteroid.Invoke(string,System.Single)"></member><member name="M:ModuleAsteroid.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:ModuleAsteroid.IsInvoking(string)"></member><member name="M:ModuleAsteroid.IsInvoking"></member><member name="M:ModuleAsteroid.IsStageable"></member><member name="M:ModuleAsteroid.Load(ConfigNode)"></member><member name="M:ModuleAsteroid.MakeTarget"><summary>Called when the player selects the asteroid's center of mass as their target</summary></member><member name="M:ModuleAsteroid.MemberwiseClone"></member><member name="M:ModuleAsteroid.OnActive"></member><member name="M:ModuleAsteroid.OnAwake"></member><member name="M:ModuleAsteroid.OnDestroy"></member><member name="M:ModuleAsteroid.OnFixedUpdate"></member><member name="M:ModuleAsteroid.OnInactive"></member><member name="M:ModuleAsteroid.OnInitialize"></member><member name="M:ModuleAsteroid.OnLoad(ConfigNode)"></member><member name="M:ModuleAsteroid.OnSave(ConfigNode)"></member><member name="M:ModuleAsteroid.OnStart(PartModule+StartState)"><summary>Initializes the asteroid</summary></member><member name="M:ModuleAsteroid.OnUpdate"></member><member name="M:ModuleAsteroid.PostInit"></member><member name="M:ModuleAsteroid.Rangefinder(UnityEngine.Transform)"></member><member name="M:ModuleAsteroid.RenameAsteroidEvent"><summary>Called when the player manually renames the asteroid</summary></member><member name="M:ModuleAsteroid.Save(ConfigNode)"></member><member name="M:ModuleAsteroid.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleAsteroid.SendMessage(string,object)"></member><member name="M:ModuleAsteroid.SendMessage(string)"></member><member name="M:ModuleAsteroid.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleAsteroid.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleAsteroid.SendMessageUpwards(string,object)"></member><member name="M:ModuleAsteroid.SendMessageUpwards(string)"></member><member name="M:ModuleAsteroid.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleAsteroid.SetAsteroidMass(System.Single)"></member><member name="M:ModuleAsteroid.SetStaging(System.Boolean)"></member><member name="M:ModuleAsteroid.StagingEnabled"></member><member name="M:ModuleAsteroid.StagingToggleEnabledEditor"></member><member name="M:ModuleAsteroid.StagingToggleEnabledFlight"></member><member name="M:ModuleAsteroid.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:ModuleAsteroid.StartCoroutine(string,object)"></member><member name="M:ModuleAsteroid.StartCoroutine(string)"></member><member name="M:ModuleAsteroid.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:ModuleAsteroid.StopAllCoroutines"></member><member name="M:ModuleAsteroid.StopCoroutine(string)"></member><member name="M:ModuleAsteroid.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:ModuleAsteroid.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:ModuleAsteroid.TakeSampleEVAEvent"><summary>Called when the player takes a surface sample</summary></member><member name="M:ModuleAsteroid.ToggleStaging"></member><member name="M:ModuleAsteroid.ToString"></member><member name="M:ModuleAsteroid.UpdateDragCube"></member><member name="M:ModuleAsteroid.UpdateStagingToggle"></member><member name="M:ModuleAsteroid.#ctor"></member><member name="T:ModuleDataTransmitter"><summary>Implement science data transmission mechanics.</summary></member><member name="F:ModuleDataTransmitter.animationModuleIndex"></member><member name="F:ModuleDataTransmitter.DeployFxModuleIndices"><summary>If one or more animations must be played before transmission start, and again in reverse after transmission end or is aborted, this array will store the indexes in the part modules array of the ModuleAnimateGeneric that should be used to play them.</summary></member><member name="F:ModuleDataTransmitter.isEnabled"></member><member name="F:ModuleDataTransmitter.moduleName"></member><member name="F:ModuleDataTransmitter.overrideStagingIconIfBlank"></member><member name="F:ModuleDataTransmitter.packetInterval"><summary>The time between packets, in seconds.</summary></member><member name="F:ModuleDataTransmitter.packetResourceCost"><summary>How much requiredResource it cost to send a single packet.</summary></member><member name="F:ModuleDataTransmitter.packetSize"><summary>The data size of a packet, in Mbit.</summary></member><member name="F:ModuleDataTransmitter.ProgressFxModuleIndices"><summary>If one or more animations must be played during transmission, this array will store the indexes in the part modules array of the ModuleAnimateGeneric that should be used to play them.</summary></member><member name="F:ModuleDataTransmitter.requiredResource"><summary>The resource consumed by the data transmission. It default to ElectricCharge.</summary></member><member name="F:ModuleDataTransmitter.snapshot"></member><member name="F:ModuleDataTransmitter.stagingDisableText"></member><member name="F:ModuleDataTransmitter.stagingEnabled"></member><member name="F:ModuleDataTransmitter.stagingEnableText"></member><member name="F:ModuleDataTransmitter.stagingToggleEnabledEditor"></member><member name="F:ModuleDataTransmitter.stagingToggleEnabledFlight"></member><member name="F:ModuleDataTransmitter.statusText"></member><member name="F:ModuleDataTransmitter.xmitIncomplete"><summary>This flag determine the behaviour in case an individual ScienceData transmission is interrupted for lack of requiredResource. If this is set to true, the partial data transmitted is credited in the science system and the ScienceData lost. If this is set to false, no data is credited in the science system and the ScienceData is returned to the first ModuleScienceContainer with space available in the vessel.</summary></member><member name="P:ModuleDataTransmitter.Actions"></member><member name="P:ModuleDataTransmitter.ClassID"></member><member name="P:ModuleDataTransmitter.ClassName"></member><member name="P:ModuleDataTransmitter.DataRate"></member><member name="P:ModuleDataTransmitter.DataResourceCost"></member><member name="P:ModuleDataTransmitter.enabled"></member><member name="P:ModuleDataTransmitter.Events"></member><member name="P:ModuleDataTransmitter.Fields"></member><member name="P:ModuleDataTransmitter.gameObject"></member><member name="P:ModuleDataTransmitter.GUIName"></member><member name="P:ModuleDataTransmitter.hideFlags"></member><member name="P:ModuleDataTransmitter.isActiveAndEnabled"></member><member name="P:ModuleDataTransmitter.name"></member><member name="P:ModuleDataTransmitter.part"></member><member name="P:ModuleDataTransmitter.tag"></member><member name="P:ModuleDataTransmitter.transform"></member><member name="P:ModuleDataTransmitter.useGUILayout"></member><member name="P:ModuleDataTransmitter.vessel"></member><member name="M:ModuleDataTransmitter.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleDataTransmitter.BroadcastMessage(string,object)"></member><member name="M:ModuleDataTransmitter.BroadcastMessage(string)"></member><member name="M:ModuleDataTransmitter.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleDataTransmitter.CancelInvoke"></member><member name="M:ModuleDataTransmitter.CancelInvoke(string)"></member><member name="M:ModuleDataTransmitter.CanTransmit"></member><member name="M:ModuleDataTransmitter.CompareTag(string)"></member><member name="M:ModuleDataTransmitter.Equals(object)"></member><member name="M:ModuleDataTransmitter.Finalize"></member><member name="M:ModuleDataTransmitter.GetComponent(System.Type)"></member><member name="M:ModuleDataTransmitter.GetComponent"></member><member name="M:ModuleDataTransmitter.GetComponent(string)"></member><member name="M:ModuleDataTransmitter.GetComponentInChildren(System.Type)"></member><member name="M:ModuleDataTransmitter.GetComponentInChildren"></member><member name="M:ModuleDataTransmitter.GetComponentInParent(System.Type)"></member><member name="M:ModuleDataTransmitter.GetComponentInParent"></member><member name="M:ModuleDataTransmitter.GetComponents(System.Type)"></member><member name="M:ModuleDataTransmitter.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:ModuleDataTransmitter.GetComponents(List)"></member><member name="M:ModuleDataTransmitter.GetComponents"></member><member name="M:ModuleDataTransmitter.GetComponentsInChildren(System.Type)"></member><member name="M:ModuleDataTransmitter.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:ModuleDataTransmitter.GetComponentsInChildren(System.Boolean)"></member><member name="M:ModuleDataTransmitter.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:ModuleDataTransmitter.GetComponentsInChildren"></member><member name="M:ModuleDataTransmitter.GetComponentsInChildren(List)"></member><member name="M:ModuleDataTransmitter.GetComponentsInParent(System.Type)"></member><member name="M:ModuleDataTransmitter.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:ModuleDataTransmitter.GetComponentsInParent(System.Boolean)"></member><member name="M:ModuleDataTransmitter.GetComponentsInParent(System.Boolean,List)"></member><member name="M:ModuleDataTransmitter.GetComponentsInParent"></member><member name="M:ModuleDataTransmitter.GetConsumedResources"></member><member name="M:ModuleDataTransmitter.GetHashCode"></member><member name="M:ModuleDataTransmitter.GetInfo"></member><member name="M:ModuleDataTransmitter.GetInstanceID"></member><member name="M:ModuleDataTransmitter.GetStagingDisableText"></member><member name="M:ModuleDataTransmitter.GetStagingEnableText"></member><member name="M:ModuleDataTransmitter.GetType"></member><member name="M:ModuleDataTransmitter.Invoke(string,System.Single)"></member><member name="M:ModuleDataTransmitter.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:ModuleDataTransmitter.IsBusy"></member><member name="M:ModuleDataTransmitter.IsInvoking(string)"></member><member name="M:ModuleDataTransmitter.IsInvoking"></member><member name="M:ModuleDataTransmitter.IsStageable"></member><member name="M:ModuleDataTransmitter.Load(ConfigNode)"></member><member name="M:ModuleDataTransmitter.MemberwiseClone"></member><member name="M:ModuleDataTransmitter.OnActive"></member><member name="M:ModuleDataTransmitter.OnAwake"></member><member name="M:ModuleDataTransmitter.OnFixedUpdate"></member><member name="M:ModuleDataTransmitter.OnInactive"></member><member name="M:ModuleDataTransmitter.OnInitialize"></member><member name="M:ModuleDataTransmitter.OnLoad(ConfigNode)"></member><member name="M:ModuleDataTransmitter.OnSave(ConfigNode)"></member><member name="M:ModuleDataTransmitter.OnStart(PartModule+StartState)"></member><member name="M:ModuleDataTransmitter.OnUpdate"></member><member name="M:ModuleDataTransmitter.Save(ConfigNode)"></member><member name="M:ModuleDataTransmitter.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleDataTransmitter.SendMessage(string,object)"></member><member name="M:ModuleDataTransmitter.SendMessage(string)"></member><member name="M:ModuleDataTransmitter.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleDataTransmitter.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleDataTransmitter.SendMessageUpwards(string,object)"></member><member name="M:ModuleDataTransmitter.SendMessageUpwards(string)"></member><member name="M:ModuleDataTransmitter.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleDataTransmitter.SetStaging(System.Boolean)"></member><member name="M:ModuleDataTransmitter.StagingEnabled"></member><member name="M:ModuleDataTransmitter.StagingToggleEnabledEditor"></member><member name="M:ModuleDataTransmitter.StagingToggleEnabledFlight"></member><member name="M:ModuleDataTransmitter.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:ModuleDataTransmitter.StartCoroutine(string,object)"></member><member name="M:ModuleDataTransmitter.StartCoroutine(string)"></member><member name="M:ModuleDataTransmitter.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:ModuleDataTransmitter.StartTransmission"></member><member name="M:ModuleDataTransmitter.StopAllCoroutines"></member><member name="M:ModuleDataTransmitter.StopCoroutine(string)"></member><member name="M:ModuleDataTransmitter.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:ModuleDataTransmitter.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:ModuleDataTransmitter.StopTransmission"></member><member name="M:ModuleDataTransmitter.ToggleStaging"></member><member name="M:ModuleDataTransmitter.ToString"></member><member name="M:ModuleDataTransmitter.TransmitData(System.Collections.Generic.List)"></member><member name="M:ModuleDataTransmitter.TransmitData(System.Collections.Generic.List,Callback)"></member><member name="M:ModuleDataTransmitter.TransmitIncompleteToggle"></member><member name="M:ModuleDataTransmitter.UpdateStagingToggle"></member><member name="M:ModuleDataTransmitter.#ctor"></member><member name="T:ModuleDeployableSolarPanel"><summary>Implement solar panel mechanics.</summary></member><member name="F:ModuleDeployableSolarPanel._distMult"><summary>Used internally. This is an implementation detail that somehow got exposed to the public API. Do not change nor rely on its value.</summary></member><member name="F:ModuleDeployableSolarPanel._efficMult"><summary>Used internally. This is an implementation detail that somehow got exposed to the public API. Do not change nor rely on its value.</summary></member><member name="F:ModuleDeployableSolarPanel._flowRate"><summary>Used internally. This is an implementation detail that somehow got exposed to the public API. Do not change nor rely on its value.</summary></member><member name="F:ModuleDeployableSolarPanel.animationName"></member><member name="F:ModuleDeployableSolarPanel.applyShielding"></member><member name="F:ModuleDeployableSolarPanel.chargeRate"><summary>The ElectricCharge per second this panel will generate when in direct sunlight, perfectly aligned with the sun direction and at a distance from the Sun center equal to the major axis of the home body.</summary></member><member name="F:ModuleDeployableSolarPanel.currentRotation"></member><member name="F:ModuleDeployableSolarPanel.efficiencyMult"></member><member name="F:ModuleDeployableSolarPanel.flowFormat"></member><member name="F:ModuleDeployableSolarPanel.flowMult"></member><member name="F:ModuleDeployableSolarPanel.flowRate"></member><member name="F:ModuleDeployableSolarPanel.flowUnits"></member><member name="F:ModuleDeployableSolarPanel.flowUnitsUseSpace"></member><member name="F:ModuleDeployableSolarPanel.hit"><summary>Store the results of the last raycast from the solar panel position toward the Sun.</summary></member><member name="F:ModuleDeployableSolarPanel.impactResistance"></member><member name="F:ModuleDeployableSolarPanel.instantAnimInEditor"></member><member name="F:ModuleDeployableSolarPanel.isBreakable"></member><member name="F:ModuleDeployableSolarPanel.isEnabled"></member><member name="F:ModuleDeployableSolarPanel.launchUT"></member><member name="F:ModuleDeployableSolarPanel.moduleName"></member><member name="F:ModuleDeployableSolarPanel.originalRotation"></member><member name="F:ModuleDeployableSolarPanel.overrideStagingIconIfBlank"></member><member name="F:ModuleDeployableSolarPanel.panelDrag"></member><member name="F:ModuleDeployableSolarPanel.panelMass"></member><member name="F:ModuleDeployableSolarPanel.panelRotationTransform"></member><member name="F:ModuleDeployableSolarPanel.panelState"></member><member name="F:ModuleDeployableSolarPanel.panelType"></member><member name="F:ModuleDeployableSolarPanel.pivotName"></member><member name="F:ModuleDeployableSolarPanel.powerCurve"><summary>This is evaluated and the result used as multiplier for the chargeRate, if useCurve is set to true.</summary></member><member name="F:ModuleDeployableSolarPanel.raycastOffset"></member><member name="F:ModuleDeployableSolarPanel.raycastOffsetScaled"></member><member name="F:ModuleDeployableSolarPanel.raycastTransformName"></member><member name="F:ModuleDeployableSolarPanel.resourceName"></member><member name="F:ModuleDeployableSolarPanel.resources"></member><member name="F:ModuleDeployableSolarPanel.retractable"></member><member name="F:ModuleDeployableSolarPanel.runOnce"></member><member name="F:ModuleDeployableSolarPanel.snapshot"></member><member name="F:ModuleDeployableSolarPanel.stagingDisableText"></member><member name="F:ModuleDeployableSolarPanel.stagingEnabled"></member><member name="F:ModuleDeployableSolarPanel.stagingEnableText"></member><member name="F:ModuleDeployableSolarPanel.stagingToggleEnabledEditor"></member><member name="F:ModuleDeployableSolarPanel.stagingToggleEnabledFlight"></member><member name="F:ModuleDeployableSolarPanel.stateString"></member><member name="F:ModuleDeployableSolarPanel.status"></member><member name="F:ModuleDeployableSolarPanel.storedAnimationSpeed"></member><member name="F:ModuleDeployableSolarPanel.storedAnimationTime"></member><member name="F:ModuleDeployableSolarPanel.sunAlignmentOffset"></member><member name="F:ModuleDeployableSolarPanel.sunAOA"></member><member name="F:ModuleDeployableSolarPanel.sunDotTransform"></member><member name="F:ModuleDeployableSolarPanel.sunTracking"><summary>If this value is true, the ElectricCharge calculations will assume the panel is able to allineate itself toward the Sun direction, inasmuch as its pivot permit.</summary></member><member name="F:ModuleDeployableSolarPanel.sunTransform"><summary>Cache the Sun transform locally, to avoid some computations. This really should have made private.</summary></member><member name="F:ModuleDeployableSolarPanel.temperatureEfficCurve"><summary>This FloatCurve is evaluated with the current part temperature in Kelvin, and the result used as multiplier with chargeRate.</summary></member><member name="F:ModuleDeployableSolarPanel.timeEfficCurve"><summary>This floatCurve was perhaps meant to make the panels degrade over time. It is evalued and the result multiplied with chargeRate, but no part specify it and it default to a 'flat curve' returning 1.0.</summary></member><member name="F:ModuleDeployableSolarPanel.trackingSpeed"></member><member name="F:ModuleDeployableSolarPanel.type"></member><member name="F:ModuleDeployableSolarPanel.useAnimation"></member><member name="F:ModuleDeployableSolarPanel.useCurve"><summary>If this value is true, the solar panel will evaluate the FloatCurve powerCurve to determine a multiplier for the chargeRate. If, instead, this value is false then chargeRate will be multiplied using the current solar flux normalized against the solar flux at the home body.</summary></member><member name="F:ModuleDeployableSolarPanel.useRaycastForSunDot"></member><member name="F:ModuleDeployableSolarPanel.windResistance"></member><member name="P:ModuleDeployableSolarPanel.Actions"></member><member name="P:ModuleDeployableSolarPanel.ClassID"></member><member name="P:ModuleDeployableSolarPanel.ClassName"></member><member name="P:ModuleDeployableSolarPanel.enabled"></member><member name="P:ModuleDeployableSolarPanel.Events"></member><member name="P:ModuleDeployableSolarPanel.Fields"></member><member name="P:ModuleDeployableSolarPanel.gameObject"></member><member name="P:ModuleDeployableSolarPanel.GUIName"></member><member name="P:ModuleDeployableSolarPanel.hideFlags"></member><member name="P:ModuleDeployableSolarPanel.isActiveAndEnabled"></member><member name="P:ModuleDeployableSolarPanel.name"></member><member name="P:ModuleDeployableSolarPanel.part"></member><member name="P:ModuleDeployableSolarPanel.tag"></member><member name="P:ModuleDeployableSolarPanel.transform"></member><member name="P:ModuleDeployableSolarPanel.useGUILayout"></member><member name="P:ModuleDeployableSolarPanel.vessel"></member><member name="M:ModuleDeployableSolarPanel.AssumeDragCubePosition(string)"></member><member name="M:ModuleDeployableSolarPanel.breakPanels"></member><member name="M:ModuleDeployableSolarPanel.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleDeployableSolarPanel.BroadcastMessage(string,object)"></member><member name="M:ModuleDeployableSolarPanel.BroadcastMessage(string)"></member><member name="M:ModuleDeployableSolarPanel.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleDeployableSolarPanel.CancelInvoke"></member><member name="M:ModuleDeployableSolarPanel.CancelInvoke(string)"></member><member name="M:ModuleDeployableSolarPanel.CompareTag(string)"></member><member name="M:ModuleDeployableSolarPanel.Equals(object)"></member><member name="M:ModuleDeployableSolarPanel.Extend"></member><member name="M:ModuleDeployableSolarPanel.ExtendAction(KSPActionParam)"></member><member name="M:ModuleDeployableSolarPanel.ExtendPanelsAction(KSPActionParam)"></member><member name="M:ModuleDeployableSolarPanel.Finalize"></member><member name="M:ModuleDeployableSolarPanel.FixedUpdate"></member><member name="M:ModuleDeployableSolarPanel.GetComponent(System.Type)"></member><member name="M:ModuleDeployableSolarPanel.GetComponent"></member><member name="M:ModuleDeployableSolarPanel.GetComponent(string)"></member><member name="M:ModuleDeployableSolarPanel.GetComponentInChildren(System.Type)"></member><member name="M:ModuleDeployableSolarPanel.GetComponentInChildren"></member><member name="M:ModuleDeployableSolarPanel.GetComponentInParent(System.Type)"></member><member name="M:ModuleDeployableSolarPanel.GetComponentInParent"></member><member name="M:ModuleDeployableSolarPanel.GetComponents(System.Type)"></member><member name="M:ModuleDeployableSolarPanel.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:ModuleDeployableSolarPanel.GetComponents(List)"></member><member name="M:ModuleDeployableSolarPanel.GetComponents"></member><member name="M:ModuleDeployableSolarPanel.GetComponentsInChildren(System.Type)"></member><member name="M:ModuleDeployableSolarPanel.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:ModuleDeployableSolarPanel.GetComponentsInChildren(System.Boolean)"></member><member name="M:ModuleDeployableSolarPanel.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:ModuleDeployableSolarPanel.GetComponentsInChildren"></member><member name="M:ModuleDeployableSolarPanel.GetComponentsInChildren(List)"></member><member name="M:ModuleDeployableSolarPanel.GetComponentsInParent(System.Type)"></member><member name="M:ModuleDeployableSolarPanel.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:ModuleDeployableSolarPanel.GetComponentsInParent(System.Boolean)"></member><member name="M:ModuleDeployableSolarPanel.GetComponentsInParent(System.Boolean,List)"></member><member name="M:ModuleDeployableSolarPanel.GetComponentsInParent"></member><member name="M:ModuleDeployableSolarPanel.GetDragCubeNames"></member><member name="M:ModuleDeployableSolarPanel.GetHashCode"></member><member name="M:ModuleDeployableSolarPanel.GetInfo"></member><member name="M:ModuleDeployableSolarPanel.GetInstanceID"></member><member name="M:ModuleDeployableSolarPanel.GetStagingDisableText"></member><member name="M:ModuleDeployableSolarPanel.GetStagingEnableText"></member><member name="M:ModuleDeployableSolarPanel.GetType"></member><member name="M:ModuleDeployableSolarPanel.Invoke(string,System.Single)"></member><member name="M:ModuleDeployableSolarPanel.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:ModuleDeployableSolarPanel.IsInvoking(string)"></member><member name="M:ModuleDeployableSolarPanel.IsInvoking"></member><member name="M:ModuleDeployableSolarPanel.IsStageable"></member><member name="M:ModuleDeployableSolarPanel.LateUpdate"></member><member name="M:ModuleDeployableSolarPanel.Load(ConfigNode)"></member><member name="M:ModuleDeployableSolarPanel.MemberwiseClone"></member><member name="M:ModuleDeployableSolarPanel.OnActive"></member><member name="M:ModuleDeployableSolarPanel.OnAwake"></member><member name="M:ModuleDeployableSolarPanel.OnCollisionEnter(UnityEngine.Collision)"></member><member name="M:ModuleDeployableSolarPanel.OnFixedUpdate"></member><member name="M:ModuleDeployableSolarPanel.OnInactive"></member><member name="M:ModuleDeployableSolarPanel.OnInitialize"></member><member name="M:ModuleDeployableSolarPanel.OnLoad(ConfigNode)"></member><member name="M:ModuleDeployableSolarPanel.OnSave(ConfigNode)"></member><member name="M:ModuleDeployableSolarPanel.OnStart(PartModule+StartState)"></member><member name="M:ModuleDeployableSolarPanel.OnUpdate"></member><member name="M:ModuleDeployableSolarPanel.recurse(UnityEngine.Transform)"></member><member name="M:ModuleDeployableSolarPanel.Retract"></member><member name="M:ModuleDeployableSolarPanel.RetractAction(KSPActionParam)"></member><member name="M:ModuleDeployableSolarPanel.Save(ConfigNode)"></member><member name="M:ModuleDeployableSolarPanel.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleDeployableSolarPanel.SendMessage(string,object)"></member><member name="M:ModuleDeployableSolarPanel.SendMessage(string)"></member><member name="M:ModuleDeployableSolarPanel.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleDeployableSolarPanel.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleDeployableSolarPanel.SendMessageUpwards(string,object)"></member><member name="M:ModuleDeployableSolarPanel.SendMessageUpwards(string)"></member><member name="M:ModuleDeployableSolarPanel.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleDeployableSolarPanel.SetStaging(System.Boolean)"></member><member name="M:ModuleDeployableSolarPanel.StagingEnabled"></member><member name="M:ModuleDeployableSolarPanel.StagingToggleEnabledEditor"></member><member name="M:ModuleDeployableSolarPanel.StagingToggleEnabledFlight"></member><member name="M:ModuleDeployableSolarPanel.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:ModuleDeployableSolarPanel.StartCoroutine(string,object)"></member><member name="M:ModuleDeployableSolarPanel.StartCoroutine(string)"></member><member name="M:ModuleDeployableSolarPanel.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:ModuleDeployableSolarPanel.startFSM"></member><member name="M:ModuleDeployableSolarPanel.StopAllCoroutines"></member><member name="M:ModuleDeployableSolarPanel.StopCoroutine(string)"></member><member name="M:ModuleDeployableSolarPanel.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:ModuleDeployableSolarPanel.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:ModuleDeployableSolarPanel.ToggleStaging"></member><member name="M:ModuleDeployableSolarPanel.ToString"></member><member name="M:ModuleDeployableSolarPanel.updateFSM"></member><member name="M:ModuleDeployableSolarPanel.UpdatePanelExtended"></member><member name="M:ModuleDeployableSolarPanel.UpdatePanelExtended_SetResource"></member><member name="M:ModuleDeployableSolarPanel.UpdateStagingToggle"></member><member name="M:ModuleDeployableSolarPanel.UsesProceduralDragCubes"></member><member name="M:ModuleDeployableSolarPanel.#ctor"></member><member name="T:ModuleDragModifier"></member><member name="F:ModuleDragModifier.dragCubeName"><summary>Some parts, like parachutes or cargo bays, have multiple drag cubes to reflect their deployment states.</summary></member><member name="F:ModuleDragModifier.dragModifier"><summary>Changes the amount of drag a part produces. Typical application is modifying the amount of slowing a parachute creates. Unsure if it modifies the physical size of the drag cube, or only its drag.</summary></member><member name="F:ModuleDragModifier.isEnabled"></member><member name="F:ModuleDragModifier.moduleName"></member><member name="F:ModuleDragModifier.overrideStagingIconIfBlank"></member><member name="F:ModuleDragModifier.snapshot"></member><member name="F:ModuleDragModifier.stagingDisableText"></member><member name="F:ModuleDragModifier.stagingEnabled"></member><member name="F:ModuleDragModifier.stagingEnableText"></member><member name="F:ModuleDragModifier.stagingToggleEnabledEditor"></member><member name="F:ModuleDragModifier.stagingToggleEnabledFlight"></member><member name="P:ModuleDragModifier.Actions"></member><member name="P:ModuleDragModifier.ClassID"></member><member name="P:ModuleDragModifier.ClassName"></member><member name="P:ModuleDragModifier.enabled"></member><member name="P:ModuleDragModifier.Events"></member><member name="P:ModuleDragModifier.Fields"></member><member name="P:ModuleDragModifier.gameObject"></member><member name="P:ModuleDragModifier.GUIName"></member><member name="P:ModuleDragModifier.hideFlags"></member><member name="P:ModuleDragModifier.isActiveAndEnabled"></member><member name="P:ModuleDragModifier.name"></member><member name="P:ModuleDragModifier.part"></member><member name="P:ModuleDragModifier.tag"></member><member name="P:ModuleDragModifier.transform"></member><member name="P:ModuleDragModifier.useGUILayout"></member><member name="P:ModuleDragModifier.vessel"></member><member name="M:ModuleDragModifier.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleDragModifier.BroadcastMessage(string,object)"></member><member name="M:ModuleDragModifier.BroadcastMessage(string)"></member><member name="M:ModuleDragModifier.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleDragModifier.CancelInvoke"></member><member name="M:ModuleDragModifier.CancelInvoke(string)"></member><member name="M:ModuleDragModifier.CompareTag(string)"></member><member name="M:ModuleDragModifier.Equals(object)"></member><member name="M:ModuleDragModifier.Finalize"></member><member name="M:ModuleDragModifier.GetComponent(System.Type)"></member><member name="M:ModuleDragModifier.GetComponent"></member><member name="M:ModuleDragModifier.GetComponent(string)"></member><member name="M:ModuleDragModifier.GetComponentInChildren(System.Type)"></member><member name="M:ModuleDragModifier.GetComponentInChildren"></member><member name="M:ModuleDragModifier.GetComponentInParent(System.Type)"></member><member name="M:ModuleDragModifier.GetComponentInParent"></member><member name="M:ModuleDragModifier.GetComponents(System.Type)"></member><member name="M:ModuleDragModifier.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:ModuleDragModifier.GetComponents(List)"></member><member name="M:ModuleDragModifier.GetComponents"></member><member name="M:ModuleDragModifier.GetComponentsInChildren(System.Type)"></member><member name="M:ModuleDragModifier.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:ModuleDragModifier.GetComponentsInChildren(System.Boolean)"></member><member name="M:ModuleDragModifier.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:ModuleDragModifier.GetComponentsInChildren"></member><member name="M:ModuleDragModifier.GetComponentsInChildren(List)"></member><member name="M:ModuleDragModifier.GetComponentsInParent(System.Type)"></member><member name="M:ModuleDragModifier.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:ModuleDragModifier.GetComponentsInParent(System.Boolean)"></member><member name="M:ModuleDragModifier.GetComponentsInParent(System.Boolean,List)"></member><member name="M:ModuleDragModifier.GetComponentsInParent"></member><member name="M:ModuleDragModifier.GetHashCode"></member><member name="M:ModuleDragModifier.GetInfo"></member><member name="M:ModuleDragModifier.GetInstanceID"></member><member name="M:ModuleDragModifier.GetStagingDisableText"></member><member name="M:ModuleDragModifier.GetStagingEnableText"></member><member name="M:ModuleDragModifier.GetType"></member><member name="M:ModuleDragModifier.Invoke(string,System.Single)"></member><member name="M:ModuleDragModifier.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:ModuleDragModifier.IsInvoking(string)"></member><member name="M:ModuleDragModifier.IsInvoking"></member><member name="M:ModuleDragModifier.IsStageable"></member><member name="M:ModuleDragModifier.Load(ConfigNode)"></member><member name="M:ModuleDragModifier.MemberwiseClone"></member><member name="M:ModuleDragModifier.OnActive"></member><member name="M:ModuleDragModifier.OnAwake"></member><member name="M:ModuleDragModifier.OnFixedUpdate"></member><member name="M:ModuleDragModifier.OnInactive"></member><member name="M:ModuleDragModifier.OnInitialize"></member><member name="M:ModuleDragModifier.OnLoad(ConfigNode)"></member><member name="M:ModuleDragModifier.OnSave(ConfigNode)"></member><member name="M:ModuleDragModifier.OnStart(PartModule+StartState)"></member><member name="M:ModuleDragModifier.OnUpdate"></member><member name="M:ModuleDragModifier.Save(ConfigNode)"></member><member name="M:ModuleDragModifier.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleDragModifier.SendMessage(string,object)"></member><member name="M:ModuleDragModifier.SendMessage(string)"></member><member name="M:ModuleDragModifier.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleDragModifier.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleDragModifier.SendMessageUpwards(string,object)"></member><member name="M:ModuleDragModifier.SendMessageUpwards(string)"></member><member name="M:ModuleDragModifier.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleDragModifier.SetStaging(System.Boolean)"></member><member name="M:ModuleDragModifier.StagingEnabled"></member><member name="M:ModuleDragModifier.StagingToggleEnabledEditor"></member><member name="M:ModuleDragModifier.StagingToggleEnabledFlight"></member><member name="M:ModuleDragModifier.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:ModuleDragModifier.StartCoroutine(string,object)"></member><member name="M:ModuleDragModifier.StartCoroutine(string)"></member><member name="M:ModuleDragModifier.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:ModuleDragModifier.StopAllCoroutines"></member><member name="M:ModuleDragModifier.StopCoroutine(string)"></member><member name="M:ModuleDragModifier.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:ModuleDragModifier.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:ModuleDragModifier.ToggleStaging"></member><member name="M:ModuleDragModifier.ToString"></member><member name="M:ModuleDragModifier.UpdateStagingToggle"></member><member name="M:ModuleDragModifier.#ctor"></member><member name="T:ModuleEngines"><summary>A PartModule that can be configured to behave like many different kinds of engines. All stock propulsion systems except for RCS are implemented through ModuleEngines (or ModuleEnginesFX, which is an extension of this module that can do more).</summary></member><member name="F:ModuleEngines.allowRestart"><summary>Whether the engine can be restarted after it was shut down. Defaults to True.</summary></member><member name="F:ModuleEngines.allowShutdown"><summary>Whether the engine can be shut down at all. Typically set False for solid boosters. Defaults to True.</summary></member><member name="F:ModuleEngines.atmChangeFlow"></member><member name="F:ModuleEngines.atmCurve"><summary>Used for air-breathing engines, usually together with useAtmCurve, velCurve, and useVelCurve. Defines a thrust curve based on atmospheric pressure. Thrust reduction or increase applied by this curve does not change fuel flow. This means engines using this curve only need one static Isp value inside atmosphereCurve, as fuel efficiency is instead defined by how much thrust you're getting at your current altitude (and airspeed, if also using velCurve).

key = pressure,mandatory  thrustMultiplier,mandatory  tangentAngleIn,optional  tangentAngleOut,optional

Pressure is 0 in space, 1 at kerbin sea level, and can be higher elsewhere.</summary></member><member name="F:ModuleEngines.atmCurveIsp"></member><member name="F:ModuleEngines.atmosphereCurve"><summary>Represents the specific impulse (Isp) of the engine as a function of atmospheric pressure. To get the Isp at a certain height h (in meters), use</summary><code>atmosphereCurve.Evaluate(h)</code><remarks>.

key = pressure,mandatory  Isp,mandatory  tangentAngleIn,optional  tangentAngleOut,optional

Pressure is 0 in space, 1 at kerbin sea level, and can be higher elsewhere.</remarks></member><member name="F:ModuleEngines.autoPositionFX"></member><member name="F:ModuleEngines.CLAMP"></member><member name="F:ModuleEngines.consumedResources"></member><member name="F:ModuleEngines.currentThrottle"><summary>The current *internal* throttle of the engine, which may be different from the current throttle set by the player if</summary><c>useEngineResponseTime</c><remarks>is true.</remarks></member><member name="F:ModuleEngines.disableUnderwater"><summary>Whether the engine can run when submerged in liquid.</summary></member><member name="F:ModuleEngines.disengageGroup"></member><member name="F:ModuleEngines.engageGroup"></member><member name="F:ModuleEngines.engineAccelerationSpeed"><summary>How quickly the engine spools up when the user-set throttle is higher than</summary><c>currentThrottle</c><remarks>.    Each frame, if the user throttle is higher than the engine's</remarks><c>currentThrottle</c><remarks>,</remarks><c>currentThrottle</c><remarks>is updated according to the formula</remarks><code>currentThrottle += (user throttle - currentThrottle) * engineAccelerationSpeed * dt</code><c>engineAccelerationSpeed</c><remarks>has units of inverse seconds.</remarks></member><member name="F:ModuleEngines.engineDecelerationSpeed"><summary>How quickly the engine spools down when the user-set throttle is higher than</summary><c>currentThrottle</c><remarks>.    Each frame, if the user throttle is lower than the engine's</remarks><c>currentThrottle</c><remarks>,</remarks><c>currentThrottle</c><remarks>is updated according to the formula</remarks><code>currentThrottle += (user throttle - currentThrottle) * engineDecelerationSpeed * dt</code><c>engineDecelerationSpeed</c><remarks>has units of inverse seconds.</remarks></member><member name="F:ModuleEngines.engineID"></member><member name="F:ModuleEngines.EngineIgnited"><summary>Whether the engine has ever been turned on?</summary></member><member name="F:ModuleEngines.engineShutdown"></member><member name="F:ModuleEngines.engineType"></member><member name="F:ModuleEngines.exhaustDamage"><summary>Whether the engine's exhaust will damage parts that it hits. A ray is cast back along the engine's thrust vector and if that ray hits a part then that part gets heated up, and may explode if it exceeds its maximum temperature.</summary></member><member name="F:ModuleEngines.exhaustDamageDistanceOffset"></member><member name="F:ModuleEngines.exhaustDamageFalloffPower"></member><member name="F:ModuleEngines.exhaustDamageMaxMutliplier"></member><member name="F:ModuleEngines.exhaustDamageMaxRange"></member><member name="F:ModuleEngines.exhaustDamageMultiplier"></member><member name="F:ModuleEngines.exhaustDamageSplashbackFallofPower"></member><member name="F:ModuleEngines.exhaustDamageSplashbackMaxMutliplier"></member><member name="F:ModuleEngines.exhaustDamageSplashbackMult"></member><member name="F:ModuleEngines.exhaustSplashbackDamage"></member><member name="F:ModuleEngines.finalThrust"></member><member name="F:ModuleEngines.flameout"></member><member name="F:ModuleEngines.flameoutBar"></member><member name="F:ModuleEngines.flameoutGroup"></member><member name="F:ModuleEngines.flameoutGroups"></member><member name="F:ModuleEngines.flowMultCap"></member><member name="F:ModuleEngines.flowMultCapSharpness"></member><member name="F:ModuleEngines.flowMultiplier"></member><member name="F:ModuleEngines.fuelFlowGui"></member><member name="F:ModuleEngines.fxGroupPrefix"></member><member name="F:ModuleEngines.fxOffset"></member><member name="F:ModuleEngines.g"></member><member name="F:ModuleEngines.heatProduction"><summary>How much internal flux is created when the engine runs. This should be seen more as a multiplier than an absolute value; actual production ingame depends on current thrust output.</summary></member><member name="F:ModuleEngines.hit"></member><member name="F:ModuleEngines.ignitionThreshold"></member><member name="F:ModuleEngines.isEnabled"></member><member name="F:ModuleEngines.machHeatMult"></member><member name="F:ModuleEngines.machLimit"></member><member name="F:ModuleEngines.manuallyOverridden"></member><member name="F:ModuleEngines.maxFuelFlow"></member><member name="F:ModuleEngines.maxThrust"><summary>The thrust this engine produces at maximum throttle.</summary></member><member name="F:ModuleEngines.minFuelFlow"></member><member name="F:ModuleEngines.minThrust"><summary>The thrust this engine produces at minimum throttle.</summary></member><member name="F:ModuleEngines.mixtureDensity"></member><member name="F:ModuleEngines.mixtureDensityRecip"></member><member name="F:ModuleEngines.moduleName"></member><member name="F:ModuleEngines.multFlow"></member><member name="F:ModuleEngines.multIsp"></member><member name="F:ModuleEngines.normalizeHeatForFlow"></member><member name="F:ModuleEngines.overrideStagingIconIfBlank"></member><member name="F:ModuleEngines.powerGroup"></member><member name="F:ModuleEngines.powerGroups"></member><member name="F:ModuleEngines.powerSfx"></member><member name="F:ModuleEngines.PropellantGauges"></member><member name="F:ModuleEngines.propellantReqMet"></member><member name="F:ModuleEngines.propellants"><para>The resources used by this engine, and their relative ratios.</para></member><member name="F:ModuleEngines.ratioSum"></member><member name="F:ModuleEngines.realIsp"><summary>The current specific impulse of this engine, in seconds.</summary></member><member name="F:ModuleEngines.requestedMassFlow"></member><member name="F:ModuleEngines.requestedThrottle"></member><member name="F:ModuleEngines.resultingThrust"></member><member name="F:ModuleEngines.runningGroup"></member><member name="F:ModuleEngines.runningGroups"></member><member name="F:ModuleEngines.shieldedCanActivate"></member><member name="F:ModuleEngines.snapshot"></member><member name="F:ModuleEngines.staged"></member><member name="F:ModuleEngines.stagingDisableText"></member><member name="F:ModuleEngines.stagingEnabled"></member><member name="F:ModuleEngines.stagingEnableText"></member><member name="F:ModuleEngines.stagingToggleEnabledEditor"></member><member name="F:ModuleEngines.stagingToggleEnabledFlight"></member><member name="F:ModuleEngines.status"></member><member name="F:ModuleEngines.statusL2"></member><member name="F:ModuleEngines.throttleLocked"><summary>Whether this engine always produces maximum thrust once activated (like solid rocket boosters).</summary></member><member name="F:ModuleEngines.thrustCurve"></member><member name="F:ModuleEngines.thrustCurveDisplay"></member><member name="F:ModuleEngines.thrustCurveRatio"></member><member name="F:ModuleEngines.thrustPercentage"></member><member name="F:ModuleEngines.thrustTransformMultipliers"></member><member name="F:ModuleEngines.thrustTransforms"><summary>These transforms store the locations and directions at which the thrust this engine generates is applied to the part. Which component of the transform rotation gives the thrust vector? (Not 100% sure but I think it is evenly split between the transforms. So if there are two transforms, each emits 50% of the total thrust of the part.)</summary></member><member name="F:ModuleEngines.thrustVectorTransformName"></member><member name="F:ModuleEngines.useAtmCurve"><summary>Used for air-breathing engines. Defaults to False, must be set to True to make the engine obey an atmCurve.</summary></member><member name="F:ModuleEngines.useAtmCurveIsp"></member><member name="F:ModuleEngines.useEngineResponseTime"><summary>Whether the engine has a nonzero spool-up and spool-down time.   If</summary><c>useEngineResponseTime</c><remarks>is true, then the engine does not spool up or down instantly when the throttle changes, but uses the</remarks><c>engineAccelerationSpeed</c><remarks>and</remarks><c>engineDecelerationSpeed</c><remarks>variables.</remarks></member><member name="F:ModuleEngines.useThrustCurve"></member><member name="F:ModuleEngines.useVelCurve"><summary>Used for air-breathing engines. Defaults to False, must be set to True to make the engine obey a velCurve.</summary></member><member name="F:ModuleEngines.useVelCurveIsp"></member><member name="F:ModuleEngines.velCurve"><summary>Used for air-breathing engines, usually together with useAtmCurve, atmCurve, and useVelCurve. Defines a thrust curve based on mach number. Thrust reduction or increase applied by this curve does not change fuel flow, which has similar implications on Isp as atmCurve does.

key = machNumber,mandatory  thrustMultiplier,mandatory  tangentAngleIn,optional  tangentAngleOut,optional</summary></member><member name="F:ModuleEngines.velCurveIsp"></member><member name="F:ModuleEngines.damageLayerMask"></member><member name="P:ModuleEngines.Actions"></member><member name="P:ModuleEngines.ClassID"></member><member name="P:ModuleEngines.ClassName"></member><member name="P:ModuleEngines.enabled"></member><member name="P:ModuleEngines.engineName"></member><member name="P:ModuleEngines.Events"></member><member name="P:ModuleEngines.Fields"></member><member name="P:ModuleEngines.gameObject"></member><member name="P:ModuleEngines.getFlameoutState"><summary>If this is true, the engine is not producing thrust because it can't get enough resources.</summary></member><member name="P:ModuleEngines.getIgnitionState"></member><member name="P:ModuleEngines.GUIName"></member><member name="P:ModuleEngines.hideFlags"></member><member name="P:ModuleEngines.isActiveAndEnabled"></member><member name="P:ModuleEngines.isOperational"></member><member name="P:ModuleEngines.name"></member><member name="P:ModuleEngines.normalizedOutput"></member><member name="P:ModuleEngines.normalizedThrustOutput"></member><member name="P:ModuleEngines.part"></member><member name="P:ModuleEngines.tag"></member><member name="P:ModuleEngines.throttleSetting"></member><member name="P:ModuleEngines.transform"></member><member name="P:ModuleEngines.useGUILayout"></member><member name="P:ModuleEngines.vessel"></member><member name="M:ModuleEngines.Activate"></member><member name="M:ModuleEngines.ActivateAction(KSPActionParam)"></member><member name="M:ModuleEngines.ActivatePowerFX"></member><member name="M:ModuleEngines.ActivateRunningFX"></member><member name="M:ModuleEngines.AutoPlaceFXGroup(FXGroup,UnityEngine.Transform)"></member><member name="M:ModuleEngines.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleEngines.BroadcastMessage(string,object)"></member><member name="M:ModuleEngines.BroadcastMessage(string)"></member><member name="M:ModuleEngines.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleEngines.BurstFlameoutGroups"></member><member name="M:ModuleEngines.CalculateThrust"></member><member name="M:ModuleEngines.CancelInvoke"></member><member name="M:ModuleEngines.CancelInvoke(string)"></member><member name="M:ModuleEngines.CheckDeprived(System.Double,string&amp;)"></member><member name="M:ModuleEngines.CheckTransformsUnderwater"></member><member name="M:ModuleEngines.CompareTag(string)"></member><member name="M:ModuleEngines.DeactivateLoopingFX"></member><member name="M:ModuleEngines.DeactivatePowerFX"></member><member name="M:ModuleEngines.DeactivateRunningFX"></member><member name="M:ModuleEngines.EngineExhaustDamage"></member><member name="M:ModuleEngines.Equals(object)"></member><member name="M:ModuleEngines.Finalize"></member><member name="M:ModuleEngines.FixedUpdate"></member><member name="M:ModuleEngines.Flameout(string,System.Boolean,System.Boolean)"></member><member name="M:ModuleEngines.FXReset"></member><member name="M:ModuleEngines.FXUpdate"></member><member name="M:ModuleEngines.GetComponent(System.Type)"></member><member name="M:ModuleEngines.GetComponent"></member><member name="M:ModuleEngines.GetComponent(string)"></member><member name="M:ModuleEngines.GetComponentInChildren(System.Type)"></member><member name="M:ModuleEngines.GetComponentInChildren"></member><member name="M:ModuleEngines.GetComponentInParent(System.Type)"></member><member name="M:ModuleEngines.GetComponentInParent"></member><member name="M:ModuleEngines.GetComponents(System.Type)"></member><member name="M:ModuleEngines.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:ModuleEngines.GetComponents(List)"></member><member name="M:ModuleEngines.GetComponents"></member><member name="M:ModuleEngines.GetComponentsInChildren(System.Type)"></member><member name="M:ModuleEngines.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:ModuleEngines.GetComponentsInChildren(System.Boolean)"></member><member name="M:ModuleEngines.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:ModuleEngines.GetComponentsInChildren"></member><member name="M:ModuleEngines.GetComponentsInChildren(List)"></member><member name="M:ModuleEngines.GetComponentsInParent(System.Type)"></member><member name="M:ModuleEngines.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:ModuleEngines.GetComponentsInParent(System.Boolean)"></member><member name="M:ModuleEngines.GetComponentsInParent(System.Boolean,List)"></member><member name="M:ModuleEngines.GetComponentsInParent"></member><member name="M:ModuleEngines.GetConsumedResources"></member><member name="M:ModuleEngines.GetCurrentThrust"></member><member name="M:ModuleEngines.GetDrawModulePanelCallback"></member><member name="M:ModuleEngines.GetEngineThrust(System.Single,System.Single)"></member><member name="M:ModuleEngines.GetEngineType"></member><member name="M:ModuleEngines.getExhaustVelocity(System.Single)"></member><member name="M:ModuleEngines.GetHashCode"></member><member name="M:ModuleEngines.GetInfo"></member><member name="M:ModuleEngines.GetInfoThrust(System.Boolean)"></member><member name="M:ModuleEngines.GetInstanceID"></member><member name="M:ModuleEngines.getMaxFuelFlow(Propellant)"></member><member name="M:ModuleEngines.GetMaxThrust"></member><member name="M:ModuleEngines.GetModuleTitle"></member><member name="M:ModuleEngines.GetPrimaryField"></member><member name="M:ModuleEngines.GetStagingDisableText"></member><member name="M:ModuleEngines.GetStagingEnableText"></member><member name="M:ModuleEngines.GetType"></member><member name="M:ModuleEngines.HijackFX(FXGroup,string)"></member><member name="M:ModuleEngines.InitializeFX"></member><member name="M:ModuleEngines.Invoke(string,System.Single)"></member><member name="M:ModuleEngines.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:ModuleEngines.IsInvoking(string)"></member><member name="M:ModuleEngines.IsInvoking"></member><member name="M:ModuleEngines.IsStageable"></member><member name="M:ModuleEngines.Load(ConfigNode)"></member><member name="M:ModuleEngines.MemberwiseClone"></member><member name="M:ModuleEngines.ModifyFlow"></member><member name="M:ModuleEngines.OnAction(KSPActionParam)"></member><member name="M:ModuleEngines.OnActive"></member><member name="M:ModuleEngines.OnAwake"></member><member name="M:ModuleEngines.OnCenterOfThrustQuery(CenterOfThrustQuery)"></member><member name="M:ModuleEngines.OnFixedUpdate"></member><member name="M:ModuleEngines.OnInactive"></member><member name="M:ModuleEngines.OnInitialize"></member><member name="M:ModuleEngines.OnLoad(ConfigNode)"></member><member name="M:ModuleEngines.OnSave(ConfigNode)"></member><member name="M:ModuleEngines.OnStart(PartModule+StartState)"></member><member name="M:ModuleEngines.OnUpdate"></member><member name="M:ModuleEngines.PlayEngageFX"></member><member name="M:ModuleEngines.PlayFlameoutFX(System.Boolean)"></member><member name="M:ModuleEngines.PlayShutdownFX"></member><member name="M:ModuleEngines.RequestPropellant(System.Double)"></member><member name="M:ModuleEngines.RequiredPropellantMass(System.Single)"></member><member name="M:ModuleEngines.Save(ConfigNode)"></member><member name="M:ModuleEngines.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleEngines.SendMessage(string,object)"></member><member name="M:ModuleEngines.SendMessage(string)"></member><member name="M:ModuleEngines.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleEngines.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleEngines.SendMessageUpwards(string,object)"></member><member name="M:ModuleEngines.SendMessageUpwards(string)"></member><member name="M:ModuleEngines.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleEngines.SetListener"></member><member name="M:ModuleEngines.SetPowerGroupsActive(System.Boolean)"></member><member name="M:ModuleEngines.SetRunningGroupsActive(System.Boolean)"></member><member name="M:ModuleEngines.SetStaging(System.Boolean)"></member><member name="M:ModuleEngines.SetupFXGroups"></member><member name="M:ModuleEngines.SetupPropellant"></member><member name="M:ModuleEngines.Shutdown"></member><member name="M:ModuleEngines.ShutdownAction(KSPActionParam)"></member><member name="M:ModuleEngines.StagingEnabled"></member><member name="M:ModuleEngines.StagingToggleEnabledEditor"></member><member name="M:ModuleEngines.StagingToggleEnabledFlight"></member><member name="M:ModuleEngines.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:ModuleEngines.StartCoroutine(string,object)"></member><member name="M:ModuleEngines.StartCoroutine(string)"></member><member name="M:ModuleEngines.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:ModuleEngines.StopAllCoroutines"></member><member name="M:ModuleEngines.StopCoroutine(string)"></member><member name="M:ModuleEngines.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:ModuleEngines.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:ModuleEngines.ThrustUpdate"></member><member name="M:ModuleEngines.TimeWarping"></member><member name="M:ModuleEngines.ToggleStaging"></member><member name="M:ModuleEngines.ToString"></member><member name="M:ModuleEngines.UnFlameout(System.Boolean)"></member><member name="M:ModuleEngines.UpdatePropellantGauge(Propellant)"></member><member name="M:ModuleEngines.UpdatePropellantStatus(System.Boolean)"></member><member name="M:ModuleEngines.UpdateStagingToggle"></member><member name="M:ModuleEngines.UpdateThrottle"></member><member name="M:ModuleEngines.#ctor"></member><member name="T:ModuleScienceExperiment"><summary>Part module for initiating and describing science experiments.</summary></member><member name="F:ModuleScienceExperiment.availableShielded"></member><member name="F:ModuleScienceExperiment.collectActionName"><summary>Name for the right-click option to collect science data from the part while on EVA.</summary></member><member name="F:ModuleScienceExperiment.collectWarningText"><summary>Text for warning pop-up while collecting science data from a non-repeatable experiment while on EVA.</summary></member><member name="F:ModuleScienceExperiment.cooldownString"></member><member name="F:ModuleScienceExperiment.cooldownTimer"></member><member name="F:ModuleScienceExperiment.cooldownToGo"></member><member name="F:ModuleScienceExperiment.dataIsCollectable"><summary>Is EVA science data collection available?</summary></member><member name="F:ModuleScienceExperiment.Deployed"></member><member name="F:ModuleScienceExperiment.experiment"><summary>The relevant experiment based on experimentID and info from ScienceDefs file.</summary></member><member name="F:ModuleScienceExperiment.experimentActionName"><summary>Right-click and action group name for initiating experiment.</summary></member><member name="F:ModuleScienceExperiment.experimentID"><summary>Must match applicable ID field in the ScienceDefs.cfg file.</summary></member><member name="F:ModuleScienceExperiment.fxModuleIndices"><summary>Set to 1 to trigger animation in ModuleAnimateGeneric on activation.</summary></member><member name="F:ModuleScienceExperiment.hideFxModuleUI"></member><member name="F:ModuleScienceExperiment.hideUIwhenUnavailable"><summary>Hide right-click experiment button when experiment cannot be performed.</summary></member><member name="F:ModuleScienceExperiment.Inoperable"><summary>Can the experiment be performed? Only relevant for non-rerunnable experiments.</summary></member><member name="F:ModuleScienceExperiment.interactionRange"><summary>EVA interaction range for data collection or experiment reset.</summary></member><member name="F:ModuleScienceExperiment.isEnabled"></member><member name="F:ModuleScienceExperiment.moduleName"></member><member name="F:ModuleScienceExperiment.overrideStagingIconIfBlank"></member><member name="F:ModuleScienceExperiment.rerunnable"><summary>Can the experiment be run more than once before requiring Science Lab reset?</summary></member><member name="F:ModuleScienceExperiment.resetActionName"><summary>Right-click, action group, and EVA button name to reset the experiment, science data will be lost.</summary></member><member name="F:ModuleScienceExperiment.resettable"></member><member name="F:ModuleScienceExperiment.resettableOnEVA"><summary>Can the experiment be reset on EVA? Science data will be lost.</summary></member><member name="F:ModuleScienceExperiment.resourceResetCost"><summary>Cost for cleaning the experiment at the science lab. Units * dataScale * baseValue?</summary></member><member name="F:ModuleScienceExperiment.resourceToReset"><summary>Resource to be used for cleaning the experiment at the science lab.</summary></member><member name="F:ModuleScienceExperiment.reviewActionName"><summary>Right-click and action group name for reviewing collected science data.</summary></member><member name="F:ModuleScienceExperiment.snapshot"></member><member name="F:ModuleScienceExperiment.stagingDisableText"></member><member name="F:ModuleScienceExperiment.stagingEnabled"></member><member name="F:ModuleScienceExperiment.stagingEnableText"></member><member name="F:ModuleScienceExperiment.stagingToggleEnabledEditor"></member><member name="F:ModuleScienceExperiment.stagingToggleEnabledFlight"></member><member name="F:ModuleScienceExperiment.transmitWarningText"><summary>Warning displayed before transmitting data from a non-rerunnable experiment.</summary></member><member name="F:ModuleScienceExperiment.usageReqMaskExternal"></member><member name="F:ModuleScienceExperiment.usageReqMaskInternal"></member><member name="F:ModuleScienceExperiment.usageReqMessage"></member><member name="F:ModuleScienceExperiment.useActionGroups"><summary>Allow action groups to be set for the experiment, rather than right-click buttons only.</summary></member><member name="F:ModuleScienceExperiment.useCooldown"></member><member name="F:ModuleScienceExperiment.useStaging"></member><member name="F:ModuleScienceExperiment.xmitDataScalar"><summary>Percentage of data allowed to be transmitted, 1 equals the amount gained from returning the sample to Kerbin.</summary></member><member name="P:ModuleScienceExperiment.Actions"></member><member name="P:ModuleScienceExperiment.ClassID"></member><member name="P:ModuleScienceExperiment.ClassName"></member><member name="P:ModuleScienceExperiment.enabled"></member><member name="P:ModuleScienceExperiment.Events"></member><member name="P:ModuleScienceExperiment.Fields"></member><member name="P:ModuleScienceExperiment.gameObject"></member><member name="P:ModuleScienceExperiment.GUIName"></member><member name="P:ModuleScienceExperiment.hideFlags"></member><member name="P:ModuleScienceExperiment.isActiveAndEnabled"></member><member name="P:ModuleScienceExperiment.name"></member><member name="P:ModuleScienceExperiment.part"></member><member name="P:ModuleScienceExperiment.tag"></member><member name="P:ModuleScienceExperiment.transform"></member><member name="P:ModuleScienceExperiment.useGUILayout"></member><member name="P:ModuleScienceExperiment.vessel"></member><member name="M:ModuleScienceExperiment.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleScienceExperiment.BroadcastMessage(string,object)"></member><member name="M:ModuleScienceExperiment.BroadcastMessage(string)"></member><member name="M:ModuleScienceExperiment.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleScienceExperiment.CancelInvoke"></member><member name="M:ModuleScienceExperiment.CancelInvoke(string)"></member><member name="M:ModuleScienceExperiment.CleanUpExperimentExternal"></member><member name="M:ModuleScienceExperiment.CollectDataExternalEvent"><summary>Transfers data from the part to an EVA Kerbal.</summary></member><member name="M:ModuleScienceExperiment.CompareTag(string)"></member><member name="M:ModuleScienceExperiment.DeployAction(KSPActionParam)"><summary>Initiates the experiment from an action group.</summary><param name="actParams"/></member><member name="M:ModuleScienceExperiment.DeployExperiment"><summary>Initiates the experiment from a right-click button.</summary></member><member name="M:ModuleScienceExperiment.DeployExperimentExternal"></member><member name="M:ModuleScienceExperiment.DumpData(ScienceData)"><summary>Removes science data from the part, called after transmission. Implements IScienceDataContainer.</summary><param name="data">The Science Data to be removed</param></member><member name="M:ModuleScienceExperiment.Equals(object)"></member><member name="M:ModuleScienceExperiment.Finalize"></member><member name="M:ModuleScienceExperiment.GetComponent(System.Type)"></member><member name="M:ModuleScienceExperiment.GetComponent"></member><member name="M:ModuleScienceExperiment.GetComponent(string)"></member><member name="M:ModuleScienceExperiment.GetComponentInChildren(System.Type)"></member><member name="M:ModuleScienceExperiment.GetComponentInChildren"></member><member name="M:ModuleScienceExperiment.GetComponentInParent(System.Type)"></member><member name="M:ModuleScienceExperiment.GetComponentInParent"></member><member name="M:ModuleScienceExperiment.GetComponents(System.Type)"></member><member name="M:ModuleScienceExperiment.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:ModuleScienceExperiment.GetComponents(List)"></member><member name="M:ModuleScienceExperiment.GetComponents"></member><member name="M:ModuleScienceExperiment.GetComponentsInChildren(System.Type)"></member><member name="M:ModuleScienceExperiment.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:ModuleScienceExperiment.GetComponentsInChildren(System.Boolean)"></member><member name="M:ModuleScienceExperiment.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:ModuleScienceExperiment.GetComponentsInChildren"></member><member name="M:ModuleScienceExperiment.GetComponentsInChildren(List)"></member><member name="M:ModuleScienceExperiment.GetComponentsInParent(System.Type)"></member><member name="M:ModuleScienceExperiment.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:ModuleScienceExperiment.GetComponentsInParent(System.Boolean)"></member><member name="M:ModuleScienceExperiment.GetComponentsInParent(System.Boolean,List)"></member><member name="M:ModuleScienceExperiment.GetComponentsInParent"></member><member name="M:ModuleScienceExperiment.GetData"><summary>Returns all Science Data stored in the module. Implements IScienceDataContainer.</summary><returns/></member><member name="M:ModuleScienceExperiment.GetHashCode"></member><member name="M:ModuleScienceExperiment.GetInfo"></member><member name="M:ModuleScienceExperiment.GetInstanceID"></member><member name="M:ModuleScienceExperiment.GetScienceCount"><summary>A count of how many Science Data reports are stored in the module. Implements IScienceDataContainer.</summary><returns/></member><member name="M:ModuleScienceExperiment.GetStagingDisableText"></member><member name="M:ModuleScienceExperiment.GetStagingEnableText"></member><member name="M:ModuleScienceExperiment.GetType"></member><member name="M:ModuleScienceExperiment.Invoke(string,System.Single)"></member><member name="M:ModuleScienceExperiment.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:ModuleScienceExperiment.IsInvoking(string)"></member><member name="M:ModuleScienceExperiment.IsInvoking"></member><member name="M:ModuleScienceExperiment.IsRerunnable"><summary>Is the experiment rerunnable? Refers to rerunnable field. Implements IScienceDataContainer.</summary><returns/></member><member name="M:ModuleScienceExperiment.IsStageable"></member><member name="M:ModuleScienceExperiment.Load(ConfigNode)"></member><member name="M:ModuleScienceExperiment.MemberwiseClone"></member><member name="M:ModuleScienceExperiment.OnActive"></member><member name="M:ModuleScienceExperiment.OnAwake"></member><member name="M:ModuleScienceExperiment.onCollectData(ModuleScienceContainer)"></member><member name="M:ModuleScienceExperiment.OnDestroy"></member><member name="M:ModuleScienceExperiment.OnFixedUpdate"></member><member name="M:ModuleScienceExperiment.OnInactive"></member><member name="M:ModuleScienceExperiment.OnInitialize"></member><member name="M:ModuleScienceExperiment.OnLoad(ConfigNode)"><summary>Stores any Science Data in the persistent file.</summary><param name="node"/></member><member name="M:ModuleScienceExperiment.OnSave(ConfigNode)"><summary>Loads any Science Data stored in the persistent file.</summary><param name="node"/></member><member name="M:ModuleScienceExperiment.OnStart(PartModule+StartState)"></member><member name="M:ModuleScienceExperiment.OnUpdate"></member><member name="M:ModuleScienceExperiment.OnVesselSituationChange(GameEvents+HostedFromToAction)"></member><member name="M:ModuleScienceExperiment.OnVesselSituationChange(GameEvents.HostedFromToAction&lt;Vessel,Vessel.Situations&gt;)"></member><member name="M:ModuleScienceExperiment.ResetAction(KSPActionParam)"><summary>Resets the experiment from an action group. Science Data is lost. Experiment can be re-run.</summary><param name="actParams"/></member><member name="M:ModuleScienceExperiment.ResetExperiment"><summary>Resets the experiment from a right-click button. Science Data is lost. Experiment can be re-run.</summary></member><member name="M:ModuleScienceExperiment.ResetExperimentExternal"><summary>Resets the experiment from an EVA right-click button. Science Data is lost. Experiment can be re-run.</summary></member><member name="M:ModuleScienceExperiment.ReturnData(ScienceData)"></member><member name="M:ModuleScienceExperiment.ReviewData"><summary>Opens experimental results dialog. Implements IScienceDataContainer.</summary></member><member name="M:ModuleScienceExperiment.ReviewDataEvent"><summary>Review stored Science Data from a right-click button.</summary></member><member name="M:ModuleScienceExperiment.ReviewDataItem(ScienceData)"><summary>Review individual Science Data reports? Implements IScienceDataContainer.</summary><param name="data"/></member><member name="M:ModuleScienceExperiment.Save(ConfigNode)"></member><member name="M:ModuleScienceExperiment.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleScienceExperiment.SendMessage(string,object)"></member><member name="M:ModuleScienceExperiment.SendMessage(string)"></member><member name="M:ModuleScienceExperiment.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleScienceExperiment.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleScienceExperiment.SendMessageUpwards(string,object)"></member><member name="M:ModuleScienceExperiment.SendMessageUpwards(string)"></member><member name="M:ModuleScienceExperiment.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleScienceExperiment.SetInoperable"><summary>Sets the Inoperable bool, determines whether experiment can be performed again.</summary></member><member name="M:ModuleScienceExperiment.SetStaging(System.Boolean)"></member><member name="M:ModuleScienceExperiment.StagingEnabled"></member><member name="M:ModuleScienceExperiment.StagingToggleEnabledEditor"></member><member name="M:ModuleScienceExperiment.StagingToggleEnabledFlight"></member><member name="M:ModuleScienceExperiment.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:ModuleScienceExperiment.StartCoroutine(string,object)"></member><member name="M:ModuleScienceExperiment.StartCoroutine(string)"></member><member name="M:ModuleScienceExperiment.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:ModuleScienceExperiment.StopAllCoroutines"></member><member name="M:ModuleScienceExperiment.StopCoroutine(string)"></member><member name="M:ModuleScienceExperiment.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:ModuleScienceExperiment.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:ModuleScienceExperiment.ToggleStaging"></member><member name="M:ModuleScienceExperiment.ToString"></member><member name="M:ModuleScienceExperiment.Update"></member><member name="M:ModuleScienceExperiment.UpdateStagingToggle"></member><member name="M:ModuleScienceExperiment.#ctor"></member><member name="T:Orbit"><para>An Orbit class represents a Keplerian orbit. Each Vessel and each CelestialBody has an Orbit. CelestialBodies and on-rails Vessels follow their Orbits exactly. Off-rails vessels (the active vessel and any nearby vessels)  do not follow their orbits exactly; instead their motion is computed frame-by-frame from the forces acting on them.</para><para>A patched consics trajectory consists of a series of Orbits, called patches.</para><para>This class uses multiple axes and reference frames to describe positions and velocities.<para>We call the choices of axes<list type="bullet"><item>World: world coordinates. Left-handed.</item></list></para></para><remarks>We use the concise notation {Axes, Frame} for describing the reference frame and axes used.&lt;/para&gt;</remarks></member><member name="F:Orbit.activePatch"><summary>Whether this patch actually represents a real orbit patch in the projected flight path. Often Orbit.nextPatch for the last real will not be null, but will be some sort of bogus Orbit object. You can recognize these because activePatch will be false.</summary></member><member name="F:Orbit.altitude"></member><member name="F:Orbit.an"></member><member name="F:Orbit.argumentOfPeriapsis"><summary>The angle between the ascending node and the periapsis, in degrees.</summary></member><member name="F:Orbit.ClAppr"></member><member name="F:Orbit.ClEctr1"></member><member name="F:Orbit.ClEctr2"></member><member name="F:Orbit.closestEncounterBody"></member><member name="F:Orbit.closestEncounterLevel"></member><member name="F:Orbit.closestEncounterPatch"></member><member name="F:Orbit.closestTgtApprUT"></member><member name="F:Orbit.CrAppr"></member><member name="F:Orbit.debug_returnFullEllipseTrajectory"></member><member name="F:Orbit.debugAN"></member><member name="F:Orbit.debugEccVec"></member><member name="F:Orbit.debugH"></member><member name="F:Orbit.debugPos"></member><member name="F:Orbit.debugVel"></member><member name="F:Orbit.E"></member><member name="F:Orbit.eccentricAnomaly"><summary>A quantity used in the math describing Keplerian orbits; Google it.</summary></member><member name="F:Orbit.eccentricity"><summary>The eccentricity of the orbit.</summary></member><member name="F:Orbit.eccVec"><summary>A vector that points toward periapsis, with mangitude equal to the eccentricity. NOTE: All Vector3d's returned by Orbit class functions have their y and z axes flipped. You have to flip these back to get the vectors in world coordinates.</summary></member><member name="F:Orbit.EndUT"><summary>The universal time at which this patch ends.</summary></member><member name="F:Orbit.epoch"><summary>A special UT at which the parameters of the Orbit are defined. See meanAnomalyAtEpoch.</summary></member><member name="F:Orbit.FEVp"></member><member name="F:Orbit.FEVs"></member><member name="F:Orbit.fromE"></member><member name="F:Orbit.fromV"></member><member name="F:Orbit.h"><summary>The specific orbital angular momentum</summary></member><member name="F:Orbit.inclination"><summary>The inclination of this orbit with respect to the equator of the central body in degrees</summary></member><member name="F:Orbit.LAN"><summary>The longitude of the ascending node of the orbit, in degrees. The LAN is the angle between the ascending node and Planetarium.right, as viewed along Planetarium.up.</summary></member><member name="F:Orbit.mag"></member><member name="F:Orbit.meanAnomaly"><summary>Mean anomaly is the fraction of the orbit that has been completed, measured starting from the periapsis, multiplied by 2π. Look it up.</summary></member><member name="F:Orbit.meanAnomalyAtEpoch"><summary>The mean anomaly of the orbit at the special UT given by Orbit.epoch.</summary></member><member name="F:Orbit.nearestTT"></member><member name="F:Orbit.nextPatch"></member><member name="F:Orbit.nextTT"></member><member name="F:Orbit.objectType"></member><member name="F:Orbit.ObT"><summary>Time since periapsis, in seconds.</summary></member><member name="F:Orbit.ObTAtEpoch"><summary>The value of ObT at the universal time given by epoch.</summary></member><member name="F:Orbit.orbitalEnergy"></member><member name="F:Orbit.orbitalSpeed"></member><member name="F:Orbit.orbitPercent"><summary>Equal to</summary><code>&gt;ObT / period</code></member><member name="F:Orbit.patchEndTransition"><summary>How the next patch follows onto this one, or FINAL if there is no patch after this one.</summary></member><member name="F:Orbit.patchStartTransition"></member><member name="F:Orbit.period"><summary>The period of the orbit, in seconds.</summary></member><member name="F:Orbit.pos"><summary>The position of the orbiting object, {AliceWorld, Primary}.</summary></member><member name="F:Orbit.previousPatch"></member><member name="F:Orbit.radius"></member><member name="F:Orbit.referenceBody"><summary>The body orbited.</summary></member><member name="F:Orbit.sampleInterval"></member><member name="F:Orbit.secondaryPosAtTransition1"></member><member name="F:Orbit.secondaryPosAtTransition2"></member><member name="F:Orbit.semiMajorAxis"><summary>The semi-major axis of the orbit, in meters. Equal to (PeR + ApR)/2</summary></member><member name="F:Orbit.SEVp"></member><member name="F:Orbit.SEVs"></member><member name="F:Orbit.StartUT"></member><member name="F:Orbit.timeToAp"><summary>The time until the object will reach apoapsis, in seconds.</summary></member><member name="F:Orbit.timeToPe"><summary>The time unti lthe object will reach periapsis, in seconds.</summary></member><member name="F:Orbit.timeToTransition1"></member><member name="F:Orbit.timeToTransition2"></member><member name="F:Orbit.toE"></member><member name="F:Orbit.toV"></member><member name="F:Orbit.trueAnomaly"></member><member name="F:Orbit.UTappr"></member><member name="F:Orbit.UTsoi"></member><member name="F:Orbit.V"></member><member name="F:Orbit.vel"><summary>The velocity of the orbiting object, {AliceWorld, Primary}.</summary></member><member name="F:Orbit.Rad2Deg"></member><member name="P:Orbit.ApA"><summary>The apoapsis of the orbit in meters, measured from sea level.</summary></member><member name="P:Orbit.ApR"><summary>The apoapsis of the orbit in meters, measured from the center of the main body.</summary></member><member name="P:Orbit.PeA"><summary>The periapsis of the orbit in meters, measured from sea level.</summary></member><member name="P:Orbit.PeR"><summary>The periapsis of the orbit in meters, measured from the center of the main body.</summary></member><member name="P:Orbit.semiLatusRectum"><summary>A property of ellipses, parabolas and hyperbolas; Google it.</summary></member><member name="P:Orbit.semiMinorAxis"><summary>A property of ellipses; Google it.</summary></member><member name="M:Orbit.DrawOrbit"></member><member name="M:Orbit.Equals(object)"></member><member name="M:Orbit.Finalize"></member><member name="M:Orbit.GetANVector"></member><member name="M:Orbit.GetDTforTrueAnomaly(System.Double,System.Double)"></member><member name="M:Orbit.GetEccentricAnomaly(System.Double)"></member><member name="M:Orbit.GetEccVector"></member><member name="M:Orbit.GetFrameVel"><summary>The velocity of the orbiting object, {AliceWorld, Sun}.</summary></member><member name="M:Orbit.GetFrameVelAtUT(System.Double)"></member><member name="M:Orbit.GetHashCode"></member><member name="M:Orbit.GetMeanAnomaly(System.Double,System.Double)"></member><member name="M:Orbit.getObTAtMeanAnomaly(System.Double)"></member><member name="M:Orbit.getObtAtUT(System.Double)"></member><member name="M:Orbit.getOrbitalSpeedAt(System.Double)"></member><member name="M:Orbit.getOrbitalSpeedAtDistance(System.Double)"></member><member name="M:Orbit.getOrbitalSpeedAtPos(Vector3d)"></member><member name="M:Orbit.getOrbitalSpeedAtRelativePos(Vector3d)"></member><member name="M:Orbit.getOrbitalVelocityAtObT(System.Double)"></member><member name="M:Orbit.getOrbitalVelocityAtTrueAnomaly(System.Double)"></member><member name="M:Orbit.getOrbitalVelocityAtUT(System.Double)"></member><member name="M:Orbit.GetOrbitNormal"><summary>A unit vector normal to the plane of the orbit. NOTE: All Vector3d's returned by Orbit class functions have their y and z axes flipped. You have to flip these back to get the vectors in world coordinates.</summary><returns>A unit normal vector.</returns></member><member name="M:Orbit.GetPatchTrajectory(System.Int32)"></member><member name="M:Orbit.getPositionAtT(System.Double)"></member><member name="M:Orbit.getPositionAtUT(System.Double)"></member><member name="M:Orbit.getPositionFromEccAnomaly(System.Double)"></member><member name="M:Orbit.getPositionFromMeanAnomaly(System.Double)"></member><member name="M:Orbit.getPositionFromTrueAnomaly(System.Double)"></member><member name="M:Orbit.getRelativePositionAtT(System.Double)"><summary>Gets the predicted displacement of the orbiting object from the center of the main body at a given time since perigee passage. NOTE: All Vector3d's returned by Orbit class functions have their y and z axes flipped. You have to flip these back to get the vectors in world coordinates.</summary><param name="T">Time since perigee passage (seconds)</param><returns>Position relative to the main body (YZ flipped)</returns></member><member name="M:Orbit.getRelativePositionAtUT(System.Double)"><summary>Gets the predicted displacement of the orbiting object from the center of the main body at a given universal time. NOTE: All Vector3d's returned by Orbit class functions have their y and z axes flipped. You have to flip these back to get the vectors in world coordinates.</summary><param name="UT">A univeral time.</param><returns>Position relative to the main body (YZ flipped)</returns></member><member name="M:Orbit.getRelativePositionFromEccAnomaly(System.Double)"></member><member name="M:Orbit.getRelativePositionFromMeanAnomaly(System.Double)"></member><member name="M:Orbit.getRelativePositionFromTrueAnomaly(System.Double)"></member><member name="M:Orbit.GetRelativeVel"><summary>The velocity of the orbiting object, {World, Primary}.</summary></member><member name="M:Orbit.GetRotFrameVel(CelestialBody)"><summary>The velocity of a hypothetical object, located where the orbiting object is, and at rest in the ConditionallyRotating[refBody] frame, {AliceWorld, BodyCentre[refBody]}. In other words, velocity of the ConditionallyRotating[refBody] frame in the BodyCentre[refBody] frame at the position of the orbiting object (AliceWorld axes). Note: this only depends on the orbital position, not on the orbital velocity.</summary></member><member name="M:Orbit.GetTimeToPeriapsis"></member><member name="M:Orbit.getTrueAnomaly(System.Double)"></member><member name="M:Orbit.GetTrueAnomalyOfZupVector(Vector3d)"></member><member name="M:Orbit.getTruePositionAtUT(System.Double)"></member><member name="M:Orbit.GetType"></member><member name="M:Orbit.GetUTforTrueAnomaly(System.Double,System.Double)"></member><member name="M:Orbit.GetVel"><summary>The velocity of the orbiting object, {World, ActiveVesselPrimary}.</summary></member><member name="M:Orbit.GetWorldSpaceVel"><summary>The velocity of the orbiting object, {World, ActiveVesselPrimaryConditionallyRotating}.</summary></member><member name="M:Orbit.Init"></member><member name="M:Orbit.MemberwiseClone"></member><member name="M:Orbit.RadiusAtTrueAnomaly(System.Double)"><summary>The distance the orbiting object will be from the center of the main body when it reaches the given true anomaly.</summary><param name="tA">True anomaly (in degrees)</param><returns>Distance from the main body's center, in meters</returns></member><member name="M:Orbit.solveEccentricAnomaly(System.Double,System.Double,System.Double,System.Int32)"></member><member name="M:Orbit.ToString"></member><member name="M:Orbit.TrueAnomalyAtRadius(System.Double)"><summary>The true anomaly at which the orbiting object will achieve the given distance from the center of the main body.</summary><param name="R">Distance from the center of the main body, in meters.</param><returns>True anomaly, in radians.</returns></member><member name="M:Orbit.TrueAnomalyAtT(System.Double)"></member><member name="M:Orbit.TrueAnomalyAtUT(System.Double)"></member><member name="M:Orbit.UpdateFromOrbitAtUT(Orbit,System.Double,CelestialBody)"></member><member name="M:Orbit.UpdateFromStateVectors(Vector3d,Vector3d,CelestialBody,System.Double)"><summary>Updates this orbit to reflect the orbit that will be taken around the given body by an object with the given position and velocity at the given universal time.</summary><param name="pos">The initial position of the object RELATIVE TO refBody at UT (YZ flipped)</param><param name="vel">The initial velocity of the object (YZ flipped)</param><param name="refBody">The main body</param><param name="UT">The universal time at which to start the orbit.</param></member><member name="M:Orbit.UpdateFromUT(System.Double)"></member><member name="M:Orbit.CreateRandomOrbitAround(CelestialBody)"></member><member name="M:Orbit.CreateRandomOrbitAround(CelestialBody,System.Double,System.Double)"></member><member name="M:Orbit.CreateRandomOrbitFlyBy(CelestialBody,System.Double)"></member><member name="M:Orbit.CreateRandomOrbitFlyBy(Orbit,System.Double,System.Double,System.Double)"></member><member name="M:Orbit.CreateRandomOrbitNearby(Orbit)"></member><member name="M:Orbit.FindClosestPoints(Orbit,Orbit,double&amp;,double&amp;,double&amp;,double&amp;,double&amp;,double&amp;,System.Double,System.Int32,int&amp;)"></member><member name="M:Orbit.FindClosestPoints(Orbit,Orbit,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Int32)"></member><member name="M:Orbit.PeApIntersects(Orbit,Orbit,System.Double)"></member><member name="M:Orbit.SolveClosestApproach(Orbit,Orbit,double&amp;,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32,int&amp;)"></member><member name="M:Orbit.SolveClosestApproach(Orbit,Orbit,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Int32)"></member><member name="M:Orbit.SolveSOI_BSP(Orbit,Orbit,double&amp;,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32,int&amp;)"></member><member name="M:Orbit.SolveSOI_BSP(Orbit,Orbit,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Int32)"></member><member name="M:Orbit.Swizzle(Vector3d)"></member><member name="M:Orbit.#ctor"></member><member name="M:Orbit.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,CelestialBody)"></member><member name="T:OrbitDriver"></member><member name="F:OrbitDriver.celestialBody"></member><member name="F:OrbitDriver.CoMoffset"></member><member name="F:OrbitDriver.drawOrbit"></member><member name="F:OrbitDriver.driverTransform"></member><member name="F:OrbitDriver.frameShift"></member><member name="F:OrbitDriver.localCoM"></member><member name="F:OrbitDriver.lowerCamVsSmaRatio"></member><member name="F:OrbitDriver.OnReferenceBodyChange"></member><member name="F:OrbitDriver.orbit"></member><member name="F:OrbitDriver.orbitColor"></member><member name="F:OrbitDriver.pos"></member><member name="F:OrbitDriver.QueuedUpdate"></member><member name="F:OrbitDriver.Renderer"></member><member name="F:OrbitDriver.reverse"></member><member name="F:OrbitDriver.startVel"></member><member name="F:OrbitDriver.updateMode"></member><member name="F:OrbitDriver.upperCamVsSmaRatio"></member><member name="F:OrbitDriver.vel"></member><member name="F:OrbitDriver.vessel"></member><member name="P:OrbitDriver.enabled"></member><member name="P:OrbitDriver.gameObject"></member><member name="P:OrbitDriver.hideFlags"></member><member name="P:OrbitDriver.isActiveAndEnabled"></member><member name="P:OrbitDriver.name"></member><member name="P:OrbitDriver.referenceBody"></member><member name="P:OrbitDriver.tag"></member><member name="P:OrbitDriver.Targetable"></member><member name="P:OrbitDriver.transform"></member><member name="P:OrbitDriver.useGUILayout"></member><member name="M:OrbitDriver.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:OrbitDriver.BroadcastMessage(string,object)"></member><member name="M:OrbitDriver.BroadcastMessage(string)"></member><member name="M:OrbitDriver.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:OrbitDriver.CancelInvoke"></member><member name="M:OrbitDriver.CancelInvoke(string)"></member><member name="M:OrbitDriver.CompareTag(string)"></member><member name="M:OrbitDriver.Equals(object)"></member><member name="M:OrbitDriver.Finalize"></member><member name="M:OrbitDriver.GetComponent(System.Type)"></member><member name="M:OrbitDriver.GetComponent"></member><member name="M:OrbitDriver.GetComponent(string)"></member><member name="M:OrbitDriver.GetComponentInChildren(System.Type)"></member><member name="M:OrbitDriver.GetComponentInChildren"></member><member name="M:OrbitDriver.GetComponentInParent(System.Type)"></member><member name="M:OrbitDriver.GetComponentInParent"></member><member name="M:OrbitDriver.GetComponents(System.Type)"></member><member name="M:OrbitDriver.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:OrbitDriver.GetComponents(List)"></member><member name="M:OrbitDriver.GetComponents"></member><member name="M:OrbitDriver.GetComponentsInChildren(System.Type)"></member><member name="M:OrbitDriver.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:OrbitDriver.GetComponentsInChildren(System.Boolean)"></member><member name="M:OrbitDriver.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:OrbitDriver.GetComponentsInChildren"></member><member name="M:OrbitDriver.GetComponentsInChildren(List)"></member><member name="M:OrbitDriver.GetComponentsInParent(System.Type)"></member><member name="M:OrbitDriver.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:OrbitDriver.GetComponentsInParent(System.Boolean)"></member><member name="M:OrbitDriver.GetComponentsInParent(System.Boolean,List)"></member><member name="M:OrbitDriver.GetComponentsInParent"></member><member name="M:OrbitDriver.GetHashCode"></member><member name="M:OrbitDriver.GetInstanceID"></member><member name="M:OrbitDriver.GetType"></member><member name="M:OrbitDriver.Invoke(string,System.Single)"></member><member name="M:OrbitDriver.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:OrbitDriver.IsInvoking(string)"></member><member name="M:OrbitDriver.IsInvoking"></member><member name="M:OrbitDriver.MemberwiseClone"></member><member name="M:OrbitDriver.OnRailsSOITransition(Orbit,CelestialBody)"></member><member name="M:OrbitDriver.RecalculateOrbit(CelestialBody)"></member><member name="M:OrbitDriver.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:OrbitDriver.SendMessage(string,object)"></member><member name="M:OrbitDriver.SendMessage(string)"></member><member name="M:OrbitDriver.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:OrbitDriver.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:OrbitDriver.SendMessageUpwards(string,object)"></member><member name="M:OrbitDriver.SendMessageUpwards(string)"></member><member name="M:OrbitDriver.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:OrbitDriver.SetOrbitMode(OrbitDriver+UpdateMode)"></member><member name="M:OrbitDriver.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:OrbitDriver.StartCoroutine(string,object)"></member><member name="M:OrbitDriver.StartCoroutine(string)"></member><member name="M:OrbitDriver.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:OrbitDriver.StopAllCoroutines"></member><member name="M:OrbitDriver.StopCoroutine(string)"></member><member name="M:OrbitDriver.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:OrbitDriver.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:OrbitDriver.ToString"></member><member name="M:OrbitDriver.UpdateOrbit"></member><member name="M:OrbitDriver.#ctor"></member><member name="T:PAsteroid"><summary>Stores information on an asteroid's shape</summary><see cref="ProceduralAsteroid.Generate(int,"/><remarks>for a 	factory method creating PAsteroids</remarks></member><member name="F:PAsteroid.highestPoint"><summary>The largest distance of any vertex to the mesh center</summary></member><member name="F:PAsteroid.volume"><summary>The (approximate?) volume of the asteroid mesh</summary></member><member name="P:PAsteroid.enabled"></member><member name="P:PAsteroid.gameObject"></member><member name="P:PAsteroid.hideFlags"></member><member name="P:PAsteroid.isActiveAndEnabled"></member><member name="P:PAsteroid.name"></member><member name="P:PAsteroid.tag"></member><member name="P:PAsteroid.transform"></member><member name="P:PAsteroid.useGUILayout"></member><member name="M:PAsteroid.Awake"></member><member name="M:PAsteroid.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:PAsteroid.BroadcastMessage(string,object)"></member><member name="M:PAsteroid.BroadcastMessage(string)"></member><member name="M:PAsteroid.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:PAsteroid.CancelInvoke"></member><member name="M:PAsteroid.CancelInvoke(string)"></member><member name="M:PAsteroid.CompareTag(string)"></member><member name="M:PAsteroid.Equals(object)"></member><member name="M:PAsteroid.Finalize"></member><member name="M:PAsteroid.GetComponent(System.Type)"></member><member name="M:PAsteroid.GetComponent"></member><member name="M:PAsteroid.GetComponent(string)"></member><member name="M:PAsteroid.GetComponentInChildren(System.Type)"></member><member name="M:PAsteroid.GetComponentInChildren"></member><member name="M:PAsteroid.GetComponentInParent(System.Type)"></member><member name="M:PAsteroid.GetComponentInParent"></member><member name="M:PAsteroid.GetComponents(System.Type)"></member><member name="M:PAsteroid.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:PAsteroid.GetComponents(List)"></member><member name="M:PAsteroid.GetComponents"></member><member name="M:PAsteroid.GetComponentsInChildren(System.Type)"></member><member name="M:PAsteroid.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:PAsteroid.GetComponentsInChildren(System.Boolean)"></member><member name="M:PAsteroid.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:PAsteroid.GetComponentsInChildren"></member><member name="M:PAsteroid.GetComponentsInChildren(List)"></member><member name="M:PAsteroid.GetComponentsInParent(System.Type)"></member><member name="M:PAsteroid.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:PAsteroid.GetComponentsInParent(System.Boolean)"></member><member name="M:PAsteroid.GetComponentsInParent(System.Boolean,List)"></member><member name="M:PAsteroid.GetComponentsInParent"></member><member name="M:PAsteroid.GetHashCode"></member><member name="M:PAsteroid.GetInstanceID"></member><member name="M:PAsteroid.GetType"></member><member name="M:PAsteroid.Invoke(string,System.Single)"></member><member name="M:PAsteroid.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:PAsteroid.IsInvoking(string)"></member><member name="M:PAsteroid.IsInvoking"></member><member name="M:PAsteroid.MemberwiseClone"></member><member name="M:PAsteroid.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:PAsteroid.SendMessage(string,object)"></member><member name="M:PAsteroid.SendMessage(string)"></member><member name="M:PAsteroid.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:PAsteroid.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:PAsteroid.SendMessageUpwards(string,object)"></member><member name="M:PAsteroid.SendMessageUpwards(string)"></member><member name="M:PAsteroid.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:PAsteroid.Setup(UnityEngine.Mesh,UnityEngine.Material,string,string,UnityEngine.Mesh,UnityEngine.PhysicMaterial,string,string,UnityEngine.Mesh,UnityEngine.PhysicMaterial,string,string,System.Func,Callback)"></member><member name="M:PAsteroid.Setup(Mesh,Material,string,string,Mesh,PhysicMaterial,string,string,Mesh,PhysicMaterial,string,string)"><summary>Combines premade elements into visual, collider, and convex meshes.</summary></member><member name="M:PAsteroid.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:PAsteroid.StartCoroutine(string,object)"></member><member name="M:PAsteroid.StartCoroutine(string)"></member><member name="M:PAsteroid.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:PAsteroid.StopAllCoroutines"></member><member name="M:PAsteroid.StopCoroutine(string)"></member><member name="M:PAsteroid.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:PAsteroid.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:PAsteroid.ToString"></member><member name="M:PAsteroid.#ctor"></member><member name="T:PSystem"></member><member name="F:PSystem.mainToolbarSelected"></member><member name="F:PSystem.rootBody"></member><member name="F:PSystem.systemName"></member><member name="F:PSystem.systemScale"></member><member name="F:PSystem.systemTimeScale"></member><member name="P:PSystem.enabled"></member><member name="P:PSystem.gameObject"></member><member name="P:PSystem.hideFlags"></member><member name="P:PSystem.isActiveAndEnabled"></member><member name="P:PSystem.name"></member><member name="P:PSystem.tag"></member><member name="P:PSystem.transform"></member><member name="P:PSystem.useGUILayout"></member><member name="M:PSystem.AddBody(PSystemBody)"></member><member name="M:PSystem.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:PSystem.BroadcastMessage(string,object)"></member><member name="M:PSystem.BroadcastMessage(string)"></member><member name="M:PSystem.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:PSystem.CancelInvoke"></member><member name="M:PSystem.CancelInvoke(string)"></member><member name="M:PSystem.CompareTag(string)"></member><member name="M:PSystem.Equals(object)"></member><member name="M:PSystem.Finalize"></member><member name="M:PSystem.GetComponent(System.Type)"></member><member name="M:PSystem.GetComponent"></member><member name="M:PSystem.GetComponent(string)"></member><member name="M:PSystem.GetComponentInChildren(System.Type)"></member><member name="M:PSystem.GetComponentInChildren"></member><member name="M:PSystem.GetComponentInParent(System.Type)"></member><member name="M:PSystem.GetComponentInParent"></member><member name="M:PSystem.GetComponents(System.Type)"></member><member name="M:PSystem.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:PSystem.GetComponents(List)"></member><member name="M:PSystem.GetComponents"></member><member name="M:PSystem.GetComponentsInChildren(System.Type)"></member><member name="M:PSystem.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:PSystem.GetComponentsInChildren(System.Boolean)"></member><member name="M:PSystem.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:PSystem.GetComponentsInChildren"></member><member name="M:PSystem.GetComponentsInChildren(List)"></member><member name="M:PSystem.GetComponentsInParent(System.Type)"></member><member name="M:PSystem.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:PSystem.GetComponentsInParent(System.Boolean)"></member><member name="M:PSystem.GetComponentsInParent(System.Boolean,List)"></member><member name="M:PSystem.GetComponentsInParent"></member><member name="M:PSystem.GetHashCode"></member><member name="M:PSystem.GetInstanceID"></member><member name="M:PSystem.GetType"></member><member name="M:PSystem.Invoke(string,System.Single)"></member><member name="M:PSystem.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:PSystem.IsInvoking(string)"></member><member name="M:PSystem.IsInvoking"></member><member name="M:PSystem.LoadDatabase"></member><member name="M:PSystem.MemberwiseClone"></member><member name="M:PSystem.Reset"></member><member name="M:PSystem.SaveDatabase"></member><member name="M:PSystem.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:PSystem.SendMessage(string,object)"></member><member name="M:PSystem.SendMessage(string)"></member><member name="M:PSystem.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:PSystem.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:PSystem.SendMessageUpwards(string,object)"></member><member name="M:PSystem.SendMessageUpwards(string)"></member><member name="M:PSystem.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:PSystem.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:PSystem.StartCoroutine(string,object)"></member><member name="M:PSystem.StartCoroutine(string)"></member><member name="M:PSystem.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:PSystem.StopAllCoroutines"></member><member name="M:PSystem.StopCoroutine(string)"></member><member name="M:PSystem.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:PSystem.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:PSystem.ToString"></member><member name="M:PSystem.#ctor"></member><member name="T:PSystemManager"><summary>A class for managing planetary systems. Ask the Kopernicus guys/look at their code for details.</summary></member><member name="F:PSystemManager.localSpaceName"></member><member name="F:PSystemManager.scaledSpaceCamera"></member><member name="F:PSystemManager.scaledSpaceFactor"></member><member name="F:PSystemManager.scaledSpaceName"></member><member name="F:PSystemManager.sun"></member><member name="F:PSystemManager.systemPrefab"></member><member name="F:PSystemManager.OrbitRendererDataCache"></member><member name="P:PSystemManager.enabled"></member><member name="P:PSystemManager.gameObject"></member><member name="P:PSystemManager.hideFlags"></member><member name="P:PSystemManager.isActiveAndEnabled"></member><member name="P:PSystemManager.localBodies"></member><member name="P:PSystemManager.name"></member><member name="P:PSystemManager.OnPSystemReady"></member><member name="P:PSystemManager.scaledBodies"></member><member name="P:PSystemManager.tag"></member><member name="P:PSystemManager.transform"></member><member name="P:PSystemManager.useGUILayout"></member><member name="P:PSystemManager.Instance"></member><member name="M:PSystemManager.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:PSystemManager.BroadcastMessage(string,object)"></member><member name="M:PSystemManager.BroadcastMessage(string)"></member><member name="M:PSystemManager.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:PSystemManager.CancelInvoke"></member><member name="M:PSystemManager.CancelInvoke(string)"></member><member name="M:PSystemManager.CompareTag(string)"></member><member name="M:PSystemManager.Equals(object)"></member><member name="M:PSystemManager.Finalize"></member><member name="M:PSystemManager.GetComponent(System.Type)"></member><member name="M:PSystemManager.GetComponent"></member><member name="M:PSystemManager.GetComponent(string)"></member><member name="M:PSystemManager.GetComponentInChildren(System.Type)"></member><member name="M:PSystemManager.GetComponentInChildren"></member><member name="M:PSystemManager.GetComponentInParent(System.Type)"></member><member name="M:PSystemManager.GetComponentInParent"></member><member name="M:PSystemManager.GetComponents(System.Type)"></member><member name="M:PSystemManager.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:PSystemManager.GetComponents(List)"></member><member name="M:PSystemManager.GetComponents"></member><member name="M:PSystemManager.GetComponentsInChildren(System.Type)"></member><member name="M:PSystemManager.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:PSystemManager.GetComponentsInChildren(System.Boolean)"></member><member name="M:PSystemManager.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:PSystemManager.GetComponentsInChildren"></member><member name="M:PSystemManager.GetComponentsInChildren(List)"></member><member name="M:PSystemManager.GetComponentsInParent(System.Type)"></member><member name="M:PSystemManager.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:PSystemManager.GetComponentsInParent(System.Boolean)"></member><member name="M:PSystemManager.GetComponentsInParent(System.Boolean,List)"></member><member name="M:PSystemManager.GetComponentsInParent"></member><member name="M:PSystemManager.GetHashCode"></member><member name="M:PSystemManager.GetInstanceID"></member><member name="M:PSystemManager.GetType"></member><member name="M:PSystemManager.Invoke(string,System.Single)"></member><member name="M:PSystemManager.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:PSystemManager.IsInvoking(string)"></member><member name="M:PSystemManager.IsInvoking"></member><member name="M:PSystemManager.MemberwiseClone"></member><member name="M:PSystemManager.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:PSystemManager.SendMessage(string,object)"></member><member name="M:PSystemManager.SendMessage(string)"></member><member name="M:PSystemManager.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:PSystemManager.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:PSystemManager.SendMessageUpwards(string,object)"></member><member name="M:PSystemManager.SendMessageUpwards(string)"></member><member name="M:PSystemManager.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:PSystemManager.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:PSystemManager.StartCoroutine(string,object)"></member><member name="M:PSystemManager.StartCoroutine(string)"></member><member name="M:PSystemManager.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:PSystemManager.StopAllCoroutines"></member><member name="M:PSystemManager.StopCoroutine(string)"></member><member name="M:PSystemManager.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:PSystemManager.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:PSystemManager.ToString"></member><member name="M:PSystemManager.#ctor"></member><member name="T:Part"><summary>Each part on a vessel is represented by a Part object. Plugins can add new functionality to parts by defining new PartModules, which can then be added to Parts. It is also possible to define new subclasses of Part, but this is deprecated in favor of PartModules.</summary></member><member name="F:Part.absorptiveConstant"></member><member name="F:Part.ActivatesEvenIfDisconnected"><summary>Whether this part will actually activate if it is scheduled to be activated in the same stage as it is decoupled from the rocket. In particular, sepratrons must have ActivatesEvenIfDisconnected set to true if they are to function properly.</summary></member><member name="F:Part.aerodynamicArea"></member><member name="F:Part.airlock"></member><member name="F:Part.airstreamShields"></member><member name="F:Part.analyticInternalInsulationFactor"></member><member name="F:Part.analyticSkinInsulationFactor"></member><member name="F:Part.angularDrag"></member><member name="F:Part.angularDragByFI"></member><member name="F:Part.atmDensity"></member><member name="F:Part.attached"></member><member name="F:Part.attachJoint"></member><member name="F:Part.attachMethod"></member><member name="F:Part.attachMode"><summary>Whether this part is attached to its parent via a stack AttachNode or a surface AttachNode.</summary></member><member name="F:Part.attachNodes"><summary>An AttachNode represents the link between two attached parts. attachNodes is a list of possible nodes to which other parts can be attached to this part. You can find the parts that actually are attached using AttachNode.attachedPart.</summary></member><member name="F:Part.attachRules"></member><member name="F:Part.attPos"></member><member name="F:Part.attPos0"></member><member name="F:Part.attRotation"></member><member name="F:Part.attRotation0"></member><member name="F:Part.blackBodyRadiationAlphaMult"></member><member name="F:Part.bodyLiftLocalPosition"></member><member name="F:Part.bodyLiftLocalVector"></member><member name="F:Part.bodyLiftMultiplier"></member><member name="F:Part.bodyLiftScalar"></member><member name="F:Part.boundsMultiplier"></member><member name="F:Part.breakingForce"></member><member name="F:Part.breakingTorque"></member><member name="F:Part.buoyancy"></member><member name="F:Part.buoyancyUseCubeNamed"></member><member name="F:Part.buoyancyUseSine"></member><member name="F:Part.CenterOfBuoyancy"></member><member name="F:Part.CenterOfDisplacement"></member><member name="F:Part.children"><summary>The parts that are children of this part in the part tree (parts that were attached to this part in the editor after this part was already part of the vessel).</summary></member><member name="F:Part.childStageOffset"></member><member name="F:Part.collider"></member><member name="F:Part.collisionEnhancer"></member><member name="F:Part.CoLOffset"></member><member name="F:Part.CoMOffset"></member><member name="F:Part.connected"></member><member name="F:Part.CoPOffset"></member><member name="F:Part.craftID"></member><member name="F:Part.crashTolerance"></member><member name="F:Part.CrewCapacity"><summary>How many crew members this part can fit.</summary></member><member name="F:Part.crewRespawnTime"></member><member name="F:Part.crewTransferAvailable"></member><member name="F:Part.currentCollisions"></member><member name="F:Part.customPartData"></member><member name="F:Part.defaultInverseStage"></member><member name="F:Part.depth"></member><member name="F:Part.dragModel"><summary>Unused?</summary></member><member name="F:Part.dragReferenceVector"></member><member name="F:Part.dragScalar"></member><member name="F:Part.dragVector"></member><member name="F:Part.dragVectorDir"></member><member name="F:Part.dragVectorDirLocal"></member><member name="F:Part.dragVectorMag"></member><member name="F:Part.dragVectorSqrMag"></member><member name="F:Part.dynamicPressurekPa"></member><member name="F:Part.edgeHighlightThresholdMult"></member><member name="F:Part.editorCollision"></member><member name="F:Part.editorLinks"></member><member name="F:Part.editorStarted"></member><member name="F:Part.emissiveConstant"></member><member name="F:Part.explosionPotential"></member><member name="F:Part.exposedArea"></member><member name="F:Part.flagURL"></member><member name="F:Part.flightID"><summary>A unique identifider for this part. Note that despite the name, each part on the same vessel will still have a different value in this field. This value is persistent and not affected by game load or docking/undocking or similar. This is the 'uid' value at the PART level of the persistent.sfs file.</summary></member><member name="F:Part.frozen"></member><member name="F:Part.fuelCrossFeed"><summary>Whether this part allows fuel crossfeed.</summary></member><member name="F:Part.fuelLookupTargets"><summary>In the flight scene, fuelLookupTargets is the list of fuel lines through which this part can draw fuel. Also if this part is a docking node docked to a another docking node through which it can draw fuel, then the attached docking node will also be in fuelLookupTargets.</summary></member><member name="F:Part.fxGroups"></member><member name="F:Part.gaugeThresholdMult"></member><member name="F:Part.GroundContact"></member><member name="F:Part.gTolerance"></member><member name="F:Part.habitableVolume"></member><member name="F:Part.hasHeiarchyModel"></member><member name="F:Part.hasLiftModule"></member><member name="F:Part.hatchObstructionCheckInwardDistance"></member><member name="F:Part.hatchObstructionCheckInwardOffset"></member><member name="F:Part.hatchObstructionCheckOutwardDistance"></member><member name="F:Part.hatchObstructionCheckSphereRadius"></member><member name="F:Part.heatConductivity"></member><member name="F:Part.heatConvectiveConstant"></member><member name="F:Part.highlightColor"></member><member name="F:Part.highlighter"></member><member name="F:Part.highlightType"></member><member name="F:Part.initialVesselName"></member><member name="F:Part.inStageIndex"></member><member name="F:Part.internalModel"></member><member name="F:Part.InternalModelName"></member><member name="F:Part.inverseStage"><summary>The stage in which this part will activate, as shown in the staging display. (Possibly called inverseStage because the stages in KSP count down instead of up).</summary></member><member name="F:Part.isClone"></member><member name="F:Part.isControlSource"></member><member name="F:Part.isMirrored"></member><member name="F:Part.isPersistent"></member><member name="F:Part.lastFuelRequestId"></member><member name="F:Part.launchID"></member><member name="F:Part.machNumber"></member><member name="F:Part.manualStageOffset"></member><member name="F:Part.mass"><summary>The DRY mass of this part, not including the mass of any resources it contains</summary></member><member name="F:Part.maxDepth"></member><member name="F:Part.maximum_drag"><summary>The drag coefficient of this part is equal to (total mass) * (maximum_drag)</summary></member><member name="F:Part.maxTemp"><summary>The temperature at which this part will explode.</summary></member><member name="F:Part.minDepth"></member><member name="F:Part.minimum_drag"><summary>Unused.</summary></member><member name="F:Part.mirrorAxis"></member><member name="F:Part.mirrorRefAxis"></member><member name="F:Part.mirrorVector"></member><member name="F:Part.missionID"><summary>A unique identifier assigned to the part when the vessel it is a part of is created. All parts on the vessel get the same missionID and it does not change. Splitting a vessel with a decoupler will result with two vessels whose parts have the same missionID. When two vessels spawned seperately dock, each part keeps its original missionID, undocking does not change this field either.</summary></member><member name="F:Part.moduleSize"></member><member name="F:Part.needPrefabMass"></member><member name="F:Part.noAutoEVAAny"></member><member name="F:Part.noAutoEVAMulti"></member><member name="F:Part.NoCrossFeedNodeKey"><summary>Specifies the name of a node through which this part will NOT draw resources. See the part.cfg of the  stock tricoupler for an example of using this to prevent fuel from flowing backwards.</summary></member><member name="F:Part.OnEditorAttach"><summary>Add a function to this callback and it will be called when your part is attached to another part in the editor.</summary></member><member name="F:Part.OnEditorDestroy"><summary>Add a function to this callback and it will be called when your part is deleted in the editor.</summary></member><member name="F:Part.OnEditorDetach"><summary>Add a function to this callback and it will be called when your part is detached, or is part of a set of parts that are detached, in the editor.</summary></member><member name="F:Part.OnJustAboutToBeDestroyed"><summary>Add a function to this callback and it will be called when your part is about to be destroyed during flight.</summary></member><member name="F:Part.orgPos"></member><member name="F:Part.orgRot"></member><member name="F:Part.originalStage"></member><member name="F:Part.overrideSkillUpdate"></member><member name="F:Part.overrideSkillUpdateModules"></member><member name="F:Part.packed"></member><member name="F:Part.parent"><summary>The parent of this part in the part tree: the part to which this part was attached in the editor.</summary></member><member name="F:Part.partBuoyancy"></member><member name="F:Part.partInfo"><summary>Some of the part info that is displayed about this part in the editor.</summary></member><member name="F:Part.partName"></member><member name="F:Part.partTransform"></member><member name="F:Part.PermanentGroundContact"></member><member name="F:Part.physicalSignificance"><summary>If physicalSignificance == Part.PhysicalSignificance.NONE, then this part doesn't actually have any physics. In particular, it has no mass, regardless of what its "mass" field is set to, and no drag.</summary></member><member name="F:Part.PhysicsSignificance"><summary>Unused?</summary></member><member name="F:Part.potentialParent"></member><member name="F:Part.prefabMass"></member><member name="F:Part.prefabSize"></member><member name="F:Part.protoModuleCrew"></member><member name="F:Part.protoPartSnapshot"></member><member name="F:Part.ptd"></member><member name="F:Part.radiativeArea"></member><member name="F:Part.radiatorCritical"></member><member name="F:Part.radiatorHeadroom"></member><member name="F:Part.radiatorMax"></member><member name="F:Part.rb"></member><member name="F:Part.rescaleFactor"></member><member name="F:Part.resourceMass"></member><member name="F:Part.resourceRequestRemainingThreshold"></member><member name="F:Part.resourceTargets"></member><member name="F:Part.resourceThermalMass"></member><member name="F:Part.ResumeState"></member><member name="F:Part.scaleFactor"></member><member name="F:Part.separationIndex"></member><member name="F:Part.skinExposedArea"></member><member name="F:Part.skinExposedAreaFrac"></member><member name="F:Part.skinExposedMassMult"></member><member name="F:Part.skinInternalConductionMult"></member><member name="F:Part.skinMassPerArea"></member><member name="F:Part.skinMaxTemp"></member><member name="F:Part.skinSkinConductionMult"></member><member name="F:Part.skinTemperature"></member><member name="F:Part.skinThermalMass"></member><member name="F:Part.skinThermalMassModifier"></member><member name="F:Part.skinThermalMassRecip"></member><member name="F:Part.skinToInternalFlux"></member><member name="F:Part.skinUnexposedExternalTemp"></member><member name="F:Part.skinUnexposedMassMult"></member><member name="F:Part.skinUnexposedTemperature"></member><member name="F:Part.skipColliderIgnores"></member><member name="F:Part.srfAttachNode"><summary>IF this part is surface-attached to its parent, srfAttachNode is the attach node describing this connection.</summary></member><member name="F:Part.stackIcon"><summary>The sicon shown for this part in the staging display.</summary></member><member name="F:Part.stackIconGrouping"></member><member name="F:Part.stackPriThreshold"></member><member name="F:Part.stackSymmetry"></member><member name="F:Part.stageAfter"></member><member name="F:Part.stageBefore"></member><member name="F:Part.stageOffset"></member><member name="F:Part.stagingIcon"></member><member name="F:Part.stagingIconAlwaysShown"></member><member name="F:Part.stagingOn"></member><member name="F:Part.started"></member><member name="F:Part.state"></member><member name="F:Part.staticPressureAtm"></member><member name="F:Part.submergedDragScalar"></member><member name="F:Part.submergedDynamicPressurekPa"></member><member name="F:Part.submergedLiftScalar"></member><member name="F:Part.submergedPortion"></member><member name="F:Part.surfaceAreas"></member><member name="F:Part.symMethod"></member><member name="F:Part.symmetryCounterparts"></member><member name="F:Part.temperature"><summary>The temperature of this part, in some arbitrary units.</summary></member><member name="F:Part.terrainCollider"></member><member name="F:Part.thermalConductionFlux"></member><member name="F:Part.thermalConvectionFlux"></member><member name="F:Part.thermalExposedFlux"></member><member name="F:Part.thermalExposedFluxPrevious"></member><member name="F:Part.thermalInternalFlux"></member><member name="F:Part.thermalInternalFluxPrevious"></member><member name="F:Part.thermalMass"></member><member name="F:Part.thermalMassModifier"></member><member name="F:Part.thermalMassReciprocal"></member><member name="F:Part.thermalRadiationFlux"></member><member name="F:Part.thermalSkinFlux"></member><member name="F:Part.thermalSkinFluxPrevious"></member><member name="F:Part.topNode"></member><member name="F:Part.vel"></member><member name="F:Part.vessel"><summary>The vessel to which this part belongs. Beware that vessel == null in the editor.</summary></member><member name="F:Part.vesselType"></member><member name="F:Part.waterAngularDragMultiplier"></member><member name="F:Part.WaterContact"></member><member name="F:Part.allParts"></member><member name="F:Part.defaultHighlightNone"></member><member name="F:Part.defaultHighlightPart"></member><member name="F:Part.fuelRequestID"></member><member name="F:Part.layerMask"></member><member name="P:Part.Actions"><summary>No longer used. Actions are now part of the PartModules system and all work with them is now done there.</summary></member><member name="P:Part.ClassID"></member><member name="P:Part.ClassName"></member><member name="P:Part.DragCubes"></member><member name="P:Part.Effects"></member><member name="P:Part.enabled"></member><member name="P:Part.Events"><summary>No longer used. Events are now part of the PartModules system and all work with them is now done there.</summary></member><member name="P:Part.Fields"><summary>No longer used. Fields are now part of the PartModules system and all work with them is now done there.</summary></member><member name="P:Part.gameObject"></member><member name="P:Part.hasStagingIcon"></member><member name="P:Part.hideFlags"></member><member name="P:Part.HighlightActive"></member><member name="P:Part.HighlightRendererCount"></member><member name="P:Part.HighlightRenderers"></member><member name="P:Part.isActiveAndEnabled"></member><member name="P:Part.isAttachable"></member><member name="P:Part.isAttached"></member><member name="P:Part.isConnected"><summary>Obsolete since 0.14 and no longer working</summary></member><member name="P:Part.isControllable"></member><member name="P:Part.Landed"></member><member name="P:Part.localRoot"></member><member name="P:Part.Modules"><summary>List of PartModules on this part.</summary></member><member name="P:Part.MouseOver"></member><member name="P:Part.name"></member><member name="P:Part.NoAutoEVA"></member><member name="P:Part.orbit"><summary>Don't use this; use Vessel.orbit instead.</summary></member><member name="P:Part.PartValues"></member><member name="P:Part.RecurseHighlight"></member><member name="P:Part.Resources"><summary>A list of the resources contained by this part. You can loop over them with</summary><code>foreach(PartResource resource in part.Resources) { ... }</code></member><member name="P:Part.Rigidbody"><summary>The rigidbody of this part. See the Unity documentation on rigidbodies for more information.</summary></member><member name="P:Part.ShieldedFromAirstream"></member><member name="P:Part.Splashed"></member><member name="P:Part.State"></member><member name="P:Part.tag"></member><member name="P:Part.transform"></member><member name="P:Part.useGUILayout"></member><member name="P:Part.WCoM"></member><member name="M:Part.activate(System.Int32,Vessel)"></member><member name="M:Part.AddAttachNode(ConfigNode)"></member><member name="M:Part.addChild(Part)"></member><member name="M:Part.AddCrewmember(ProtoCrewMember)"></member><member name="M:Part.AddCrewmemberAt(ProtoCrewMember,System.Int32)"></member><member name="M:Part.AddExposedThermalFlux(System.Double)"></member><member name="M:Part.AddInternalPart(ConfigNode)"></member><member name="M:Part.AddModule(string)"><summary>Add a PartModule to this part. PartModules that are dynamically added to parts and don't exist in the original part.cfg will not be properly restored from persistence.</summary><param name="moduleName">The class name of the PartModule to add, as a string</param><returns>The added PartModule</returns></member><member name="M:Part.AddModule(ConfigNode)"></member><member name="M:Part.AddOnMouseDown(Part+OnActionDelegate)"></member><member name="M:Part.AddOnMouseEnter(Part+OnActionDelegate)"></member><member name="M:Part.AddOnMouseExit(Part+OnActionDelegate)"></member><member name="M:Part.AddResource(ConfigNode)"></member><member name="M:Part.AddShield(IAirstreamShield)"></member><member name="M:Part.AddSkinThermalFlux(System.Double)"></member><member name="M:Part.AddThermalFlux(System.Double)"></member><member name="M:Part.AlreadyProcessedRequest(System.Int32)"></member><member name="M:Part.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:Part.BroadcastMessage(string,object)"></member><member name="M:Part.BroadcastMessage(string)"></member><member name="M:Part.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:Part.CancelInvoke"></member><member name="M:Part.CancelInvoke(string)"></member><member name="M:Part.CheckCollision(UnityEngine.Collision)"></member><member name="M:Part.checkLanded"></member><member name="M:Part.checkPermanentLandedAt"></member><member name="M:Part.checkSplashed"></member><member name="M:Part.CheckTransferDialog"></member><member name="M:Part.cleanReferencesFromOtherParts"></member><member name="M:Part.CompareTag(string)"></member><member name="M:Part.Couple(Part)"></member><member name="M:Part.CreateInternalModel"></member><member name="M:Part.deactivate"></member><member name="M:Part.decouple(System.Single)"></member><member name="M:Part.DespawnIVA"></member><member name="M:Part.Die"></member><member name="M:Part.disconnect(System.Boolean)"></member><member name="M:Part.DrainFuel(System.Single)"><summary>Deprecated. Use Part.TransferResource instead.</summary><param name="amount"/><returns/></member><member name="M:Part.drawStats"></member><member name="M:Part.Effect(string)"></member><member name="M:Part.Effect(string,System.Single)"></member><member name="M:Part.Equals(object)"></member><member name="M:Part.explode"><summary>Calling this causes the part to explode. But you guessed that, didn't you?</summary></member><member name="M:Part.Finalize"></member><member name="M:Part.findAttachNode(string)"><summary>Find an AttachNode by its name, as a string.</summary><param name="nodeId">The name of the node to search for. The names of nodes are found in the part.cfg. For instance, node_stack_top describes a node with name "stack_top."</param><returns>The AttachNode of the given name.</returns></member><member name="M:Part.findAttachNodeByPart(Part)"><summary>Given a child part of this part, find the AttachNode representing the connection between this part and that child.</summary><param name="connectedPart">A child part of this part.</param><returns>The AttachNode connecting this part to the given child.</returns></member><member name="M:Part.findAttachNodes(string)"></member><member name="M:Part.FindChildPart(string)"></member><member name="M:Part.FindChildPart(string,System.Boolean)"></member><member name="M:Part.FindChildPart"></member><member name="M:Part.FindChildPart(System.Boolean)"></member><member name="M:Part.FindChildParts"></member><member name="M:Part.FindChildParts(System.Boolean)"></member><member name="M:Part.FindFuel(Part,System.Collections.Generic.List,System.UInt32)"></member><member name="M:Part.FindFuel(Part,List&lt;Part&gt;,System.UInt32)"><summary>Obsolete - Use Part.GetConnectedResources instead.</summary></member><member name="M:Part.findFxGroup(string)"></member><member name="M:Part.FindModelAnimator(string,string)"></member><member name="M:Part.FindModelAnimators(string)"></member><member name="M:Part.FindModelAnimators"></member><member name="M:Part.FindModelComponent"></member><member name="M:Part.FindModelComponent(string)"></member><member name="M:Part.FindModelComponents"></member><member name="M:Part.FindModelComponents(string)"></member><member name="M:Part.FindModelTransform(string)"></member><member name="M:Part.FindModelTransforms(string)"></member><member name="M:Part.FindModuleImplementing"></member><member name="M:Part.FindModulesImplementing"></member><member name="M:Part.FindNonPhysicslessChildren(System.Collections.Generic.List)"></member><member name="M:Part.FindNonPhysicslessParent"></member><member name="M:Part.FindPartThroughNodes(Part,Part)"></member><member name="M:Part.FindResource_StackPriority(Part,System.Collections.Generic.List,System.Int32,System.Double,System.Int32,System.Boolean,double&amp;,double&amp;,System.Collections.Generic.List,System.Boolean)"></member><member name="M:Part.force_activate"><summary>Activates the part now, regardless of when it was scheduled to be activated in the staging order.</summary></member><member name="M:Part.freeze"></member><member name="M:Part.GetComponent(System.Type)"></member><member name="M:Part.GetComponent"></member><member name="M:Part.GetComponent(string)"></member><member name="M:Part.GetComponentInChildren(System.Type)"></member><member name="M:Part.GetComponentInChildren"></member><member name="M:Part.GetComponentInParent(System.Type)"></member><member name="M:Part.GetComponentInParent"></member><member name="M:Part.GetComponents(System.Type)"></member><member name="M:Part.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:Part.GetComponents(List)"></member><member name="M:Part.GetComponents"></member><member name="M:Part.GetComponentsInChildren(System.Type)"></member><member name="M:Part.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:Part.GetComponentsInChildren(System.Boolean)"></member><member name="M:Part.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:Part.GetComponentsInChildren"></member><member name="M:Part.GetComponentsInChildren(List)"></member><member name="M:Part.GetComponentsInParent(System.Type)"></member><member name="M:Part.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:Part.GetComponentsInParent(System.Boolean)"></member><member name="M:Part.GetComponentsInParent(System.Boolean,List)"></member><member name="M:Part.GetComponentsInParent"></member><member name="M:Part.GetConnectedResources(System.Int32,ResourceFlowMode,System.Collections.Generic.List)"></member><member name="M:Part.GetConnectedResources(System.Int32,ResourceFlowMode,System.Collections.Generic.List,double&amp;,double&amp;)"></member><member name="M:Part.GetHashCode"></member><member name="M:Part.GetInstanceID"></member><member name="M:Part.GetModuleCosts(System.Single)"></member><member name="M:Part.GetModuleMass(System.Single)"></member><member name="M:Part.GetModuleSize(UnityEngine.Vector3)"></member><member name="M:Part.GetPhysicslessChildMass"></member><member name="M:Part.GetReferenceTransform"></member><member name="M:Part.GetResourceMass"><summary>The total mass of the resources held by the part. The total mass of the part is</summary><code>mass + GetResourceMass()</code><returns>Total resource mass, in tonnes</returns></member><member name="M:Part.GetResourceMass(float&amp;)"></member><member name="M:Part.GetResourceMass(double&amp;)"></member><member name="M:Part.getSymmetryCounterPart(System.Int32)"></member><member name="M:Part.GetType"></member><member name="M:Part.HandleCollision(UnityEngine.Collision)"></member><member name="M:Part.hasIndirectChild(Part)"></member><member name="M:Part.hasIndirectParent(Part)"></member><member name="M:Part.highlight(UnityEngine.Color)"></member><member name="M:Part.highlightRecursive(UnityEngine.Color)"></member><member name="M:Part.InitializeEffects"></member><member name="M:Part.InitializeModules"></member><member name="M:Part.Invoke(string,System.Single)"></member><member name="M:Part.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:Part.IsInvoking(string)"></member><member name="M:Part.IsInvoking"></member><member name="M:Part.isSymmetryCounterPart(Part)"></member><member name="M:Part.LateUpdate"></member><member name="M:Part.LoadEffects(ConfigNode)"></member><member name="M:Part.LoadModule(ConfigNode,int&amp;)"></member><member name="M:Part.MemberwiseClone"></member><member name="M:Part.onActiveFixedUpdate"></member><member name="M:Part.onActiveUpdate"></member><member name="M:Part.onAttach(Part,System.Boolean)"></member><member name="M:Part.onBackup"></member><member name="M:Part.OnCollisionEnter(UnityEngine.Collision)"></member><member name="M:Part.OnCollisionExit(UnityEngine.Collision)"></member><member name="M:Part.OnCollisionStay(UnityEngine.Collision)"></member><member name="M:Part.OnCopy(Part,System.Boolean)"></member><member name="M:Part.onCopy(Part,System.Boolean)"></member><member name="M:Part.onCtrlUpd(FlightCtrlState)"></member><member name="M:Part.onDecouple(System.Single)"></member><member name="M:Part.OnDelete"></member><member name="M:Part.onDetach(System.Boolean)"></member><member name="M:Part.onDisconnect"></member><member name="M:Part.OnDrawStats"><summary>Obsolete("Functional behaviour should really be happening in PartModules now. In any case, this method's been replaced with OnGetStats, where you just return the string."</summary></member><member name="M:Part.onEditorUpdate"></member><member name="M:Part.onFlightStart"></member><member name="M:Part.onFlightStartAtLaunchPad"></member><member name="M:Part.onFlightStateLoad(System.Collections.Generic.Dictionary)"></member><member name="M:Part.onFlightStateSave(System.Collections.Generic.Dictionary)"></member><member name="M:Part.onGamePause"></member><member name="M:Part.onGameResume"></member><member name="M:Part.OnGetStats"></member><member name="M:Part.onJointDisable"></member><member name="M:Part.onJointReset"></member><member name="M:Part.OnLiftOff"></member><member name="M:Part.OnLoad"></member><member name="M:Part.OnLoad(ConfigNode)"></member><member name="M:Part.onPack"></member><member name="M:Part.onPartActivate"></member><member name="M:Part.onPartAttach(Part)"></member><member name="M:Part.onPartAwake"></member><member name="M:Part.onPartDeactivate"></member><member name="M:Part.onPartDelete"></member><member name="M:Part.onPartDestroy"></member><member name="M:Part.onPartDetach"></member><member name="M:Part.onPartExplode"></member><member name="M:Part.onPartFixedUpdate"></member><member name="M:Part.OnPartJointBreak(System.Single)"></member><member name="M:Part.onPartLiftOff"></member><member name="M:Part.onPartLoad"></member><member name="M:Part.onPartSplashdown"></member><member name="M:Part.onPartStart"></member><member name="M:Part.onPartTouchdown"></member><member name="M:Part.onPartUpdate"></member><member name="M:Part.OnPointerClick(UnityEngine.EventSystems.PointerEventData)"></member><member name="M:Part.OnSave(ConfigNode)"></member><member name="M:Part.OnSplashDown"></member><member name="M:Part.onStartComplete"></member><member name="M:Part.OnTouchDown"></member><member name="M:Part.onUnpack"></member><member name="M:Part.Pack"></member><member name="M:Part.PromoteToPhysicalPart"></member><member name="M:Part.propagateControlUpdate(FlightCtrlState)"></member><member name="M:Part.RegisterCrew"></member><member name="M:Part.removeChild(Part)"></member><member name="M:Part.RemoveCrewmember(ProtoCrewMember)"></member><member name="M:Part.RemoveModule(PartModule)"></member><member name="M:Part.RemoveModules"></member><member name="M:Part.RemoveOnMouseDown(Part+OnActionDelegate)"></member><member name="M:Part.RemoveOnMouseEnter(Part+OnActionDelegate)"></member><member name="M:Part.RemoveOnMouseExit(Part+OnActionDelegate)"></member><member name="M:Part.RemoveShield(IAirstreamShield)"></member><member name="M:Part.RequestFuel(Part,System.Single,System.UInt32)"></member><member name="M:Part.RequestFuel(Part,System.Single,System.UInt32)"><summary>Deprecated - Use Part.RequestResource instead.</summary><param name="source"/><param name="amount"/><param name="reqId"/><returns/></member><member name="M:Part.RequestRCS(System.Single,System.Int32)"><summary>Deprecated - Use Part.RequestResource instead.</summary><param name="amount"/><param name="earliestStage"/><returns/></member><member name="M:Part.RequestResource(System.Int32,System.Single)"></member><member name="M:Part.RequestResource(string,System.Single)"><summary>Takes amount of "demand" from resource "resourceName" in the upper-right resource window.  A positive value of "demand" will decrease the resource, while a negative value for "demand" will increase the resource in the upper-right resource window.</summary></member><member name="M:Part.RequestResource(System.Int32,System.Double)"></member><member name="M:Part.RequestResource(string,System.Double)"></member><member name="M:Part.RequestResource(System.Int32,System.Double,ResourceFlowMode)"></member><member name="M:Part.RequestResource(string,System.Double,ResourceFlowMode)"></member><member name="M:Part.ResetCollisionIgnores"></member><member name="M:Part.ResetJoints"></member><member name="M:Part.ResumeVelocity"></member><member name="M:Part.SaveEffects(ConfigNode)"></member><member name="M:Part.ScheduleSetCollisionIgnores"></member><member name="M:Part.SendEvent(string)"></member><member name="M:Part.SendEvent(string,BaseEventData)"></member><member name="M:Part.SendEvent(string,BaseEventData,System.Int32)"></member><member name="M:Part.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:Part.SendMessage(string,object)"></member><member name="M:Part.SendMessage(string)"></member><member name="M:Part.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:Part.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:Part.SendMessageUpwards(string,object)"></member><member name="M:Part.SendMessageUpwards(string)"></member><member name="M:Part.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:Part.SetCollisionIgnores"></member><member name="M:Part.SetDetectCollisions(System.Boolean)"></member><member name="M:Part.SetHierarchyRoot(Part)"></member><member name="M:Part.SetHighlight(System.Boolean,System.Boolean)"></member><member name="M:Part.SetHighlightColor(UnityEngine.Color)"></member><member name="M:Part.SetHighlightColor"></member><member name="M:Part.SetHighlightDefault"></member><member name="M:Part.SetHighlightType(Part+HighlightType)"></member><member name="M:Part.SetLayer(UnityEngine.GameObject,System.Int32)"></member><member name="M:Part.SetMirror(UnityEngine.Vector3)"></member><member name="M:Part.setOpacity(System.Single)"></member><member name="M:Part.setParent(Part)"></member><member name="M:Part.SetReferenceTransform(UnityEngine.Transform)"></member><member name="M:Part.SetResource(ConfigNode)"></member><member name="M:Part.SpawnIVA"></member><member name="M:Part.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:Part.StartCoroutine(string,object)"></member><member name="M:Part.StartCoroutine(string)"></member><member name="M:Part.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:Part.StopAllCoroutines"></member><member name="M:Part.StopCoroutine(string)"></member><member name="M:Part.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:Part.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:Part.ToString"></member><member name="M:Part.TransferResource(System.Int32,System.Double)"></member><member name="M:Part.TransferResource(PartResource,System.Double,Part)"></member><member name="M:Part.Undock(DockedVesselInfo)"></member><member name="M:Part.unfreeze"></member><member name="M:Part.Unpack"></member><member name="M:Part.UnregisterCrew"></member><member name="M:Part.UpdateOrgPosAndRot(Part)"></member><member name="M:Part.UpdateStageability(System.Boolean,System.Boolean)"></member><member name="M:Part.FindModelAnimator(UnityEngine.Transform,string,string)"></member><member name="M:Part.FindTransformInChildrenExplicit(UnityEngine.Transform,UnityEngine.Transform)"></member><member name="M:Part.FromGO(UnityEngine.GameObject)"></member><member name="M:Part.GetComponentUpwards(string,UnityEngine.GameObject)"></member><member name="M:Part.GetComponentUpwards(UnityEngine.GameObject)"></member><member name="M:Part.getFuelReqId"></member><member name="M:Part.GetPartsOutTo(Part,System.Collections.Generic.HashSet,System.Int32)"></member><member name="M:Part.NewRequestID"></member><member name="M:Part.PartToVesselSpaceDir(UnityEngine.Vector3,Part,Vessel,PartSpaceMode)"></member><member name="M:Part.PartToVesselSpacePos(UnityEngine.Vector3,Part,Vessel,PartSpaceMode)"></member><member name="M:Part.PartToVesselSpaceRot(UnityEngine.Quaternion,Part,Vessel,PartSpaceMode)"></member><member name="M:Part.VesselToPartSpaceDir(UnityEngine.Vector3,Part,Vessel,PartSpaceMode)"></member><member name="M:Part.VesselToPartSpacePos(UnityEngine.Vector3,Part,Vessel,PartSpaceMode)"></member><member name="M:Part.VesselToPartSpaceRot(UnityEngine.Quaternion,Part,Vessel,PartSpaceMode)"></member><member name="M:Part.#ctor"></member><member name="T:PartModule"><summary>Extending PartModule lets you add new functionality to parts. The main class of many plugins will be a subclass of PartModule. See this forum thread for the official instructions on using PartModule:</summary><para>http://forum.kerbalspaceprogram.com/showthread.php/10296-0-15-code-update-PartModule-KSPField-KSPEvent-ConfigNode-and-PartResource</para></member><member name="F:PartModule.isEnabled"></member><member name="F:PartModule.moduleName"><summary>The name of the partModule as per the Class name in code. Should never be edited.</summary></member><member name="F:PartModule.overrideStagingIconIfBlank"></member><member name="F:PartModule.snapshot"></member><member name="F:PartModule.stagingDisableText"></member><member name="F:PartModule.stagingEnabled"></member><member name="F:PartModule.stagingEnableText"></member><member name="F:PartModule.stagingToggleEnabledEditor"></member><member name="F:PartModule.stagingToggleEnabledFlight"></member><member name="P:PartModule.Actions"><summary>A list of KSPActions which can be added to action groups. Generated by KSP from all methods tagged [KSPAction] within the class in code.</summary></member><member name="P:PartModule.ClassID"><summary>A hash of</summary><c>ClassName</c><remarks>?</remarks></member><member name="P:PartModule.ClassName"><summary>In any subclass of PartModule,</summary><c>ClassName</c><remarks>will be the name of the subclass. It gets set by the PartModule loading process.</remarks></member><member name="P:PartModule.enabled"></member><member name="P:PartModule.Events"><summary>A list of KSPEvents, which can be triggered by code or by the user through the part's right-click menu. Generated by KSP from all methods tagged [KSPEvent] within the class in code.</summary></member><member name="P:PartModule.Fields"><summary>A list of the KSPFields which the module loads from the part.cfg file. Generated by KSP from all methods tagged [KSPField] within the class in code.</summary></member><member name="P:PartModule.gameObject"></member><member name="P:PartModule.GUIName"></member><member name="P:PartModule.hideFlags"></member><member name="P:PartModule.isActiveAndEnabled"></member><member name="P:PartModule.name"></member><member name="P:PartModule.part"><summary>The Part to which this PartModule is attached. Use this to reference the part from your module code.</summary></member><member name="P:PartModule.tag"></member><member name="P:PartModule.transform"></member><member name="P:PartModule.useGUILayout"></member><member name="P:PartModule.vessel"><summary>The Vessel of the Part to which this PartModule is attached.</summary></member><member name="M:PartModule.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:PartModule.BroadcastMessage(string,object)"></member><member name="M:PartModule.BroadcastMessage(string)"></member><member name="M:PartModule.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:PartModule.CancelInvoke"></member><member name="M:PartModule.CancelInvoke(string)"></member><member name="M:PartModule.CompareTag(string)"></member><member name="M:PartModule.Equals(object)"></member><member name="M:PartModule.Finalize"></member><member name="M:PartModule.GetComponent(System.Type)"></member><member name="M:PartModule.GetComponent"></member><member name="M:PartModule.GetComponent(string)"></member><member name="M:PartModule.GetComponentInChildren(System.Type)"></member><member name="M:PartModule.GetComponentInChildren"></member><member name="M:PartModule.GetComponentInParent(System.Type)"></member><member name="M:PartModule.GetComponentInParent"></member><member name="M:PartModule.GetComponents(System.Type)"></member><member name="M:PartModule.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:PartModule.GetComponents(List)"></member><member name="M:PartModule.GetComponents"></member><member name="M:PartModule.GetComponentsInChildren(System.Type)"></member><member name="M:PartModule.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:PartModule.GetComponentsInChildren(System.Boolean)"></member><member name="M:PartModule.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:PartModule.GetComponentsInChildren"></member><member name="M:PartModule.GetComponentsInChildren(List)"></member><member name="M:PartModule.GetComponentsInParent(System.Type)"></member><member name="M:PartModule.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:PartModule.GetComponentsInParent(System.Boolean)"></member><member name="M:PartModule.GetComponentsInParent(System.Boolean,List)"></member><member name="M:PartModule.GetComponentsInParent"></member><member name="M:PartModule.GetHashCode"></member><member name="M:PartModule.GetInfo"><summary>The return value of this function appears in the part's description in the editor.</summary><returns>Editor info for the part</returns></member><member name="M:PartModule.GetInstanceID"></member><member name="M:PartModule.GetStagingDisableText"></member><member name="M:PartModule.GetStagingEnableText"></member><member name="M:PartModule.GetType"></member><member name="M:PartModule.Invoke(string,System.Single)"></member><member name="M:PartModule.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:PartModule.IsInvoking(string)"></member><member name="M:PartModule.IsInvoking"></member><member name="M:PartModule.IsStageable"></member><member name="M:PartModule.Load(ConfigNode)"><summary>Where data is loaded from the persistence file. This is the same config node that the Save method passes for retrieving data. Differences between this an OnLoad are unknown.</summary></member><member name="M:PartModule.MemberwiseClone"></member><member name="M:PartModule.OnActive"><summary>This function is called once when the part gets activated.</summary></member><member name="M:PartModule.OnAwake"><summary>This function gets called only once, during the KSP loading screen. See the Unity documentation on Awake for more information.</summary></member><member name="M:PartModule.OnFixedUpdate"><summary>This function gets called once every Unity FixedUpdate cycle (once per physics frame) once the part has been activated (staged).  If you want to be called even if the part has not been activated, define a function called</summary><c>void FixedUpdate()</c><remarks>instead of overriding OnFixedUpdate   See the Unity documentation on FixedUpdate for more information. You can get the time between FixedUpdates from  TimeWarp.fixedDeltaTime. Do any physics stuff in OnFixedUpdate, not OnUpdate.</remarks></member><member name="M:PartModule.OnInactive"><summary>When does this get called?</summary></member><member name="M:PartModule.OnInitialize"></member><member name="M:PartModule.OnLoad(ConfigNode)"><summary>This function is called to initialize the part. The ConfigNode contains the parameters of the module as specified in the part.cfg file, or as you last saved them in OnSave.</summary><param name="node">A ConfigNode containing the module's parameters from part.cfg or persistent.sfs</param></member><member name="M:PartModule.OnSave(ConfigNode)"><summary>This function is called when the game is saved to let the part save persistent data. Add any data you want to persist to the ConfigNode. The ConfigNode will then be saved as part of persistent.sfs. When the game is resumed, you can then read this data back out in OnLoad.</summary><param name="node"/></member><member name="M:PartModule.OnStart(PartModule+StartState)"><summary>Called when the flight starts, or when the part is created in the editor. OnStart will be called before OnUpdate or OnFixedUpdate are ever called.  

Caution: Depending on which scene you are moving to/from, this method may be called before or after OnLoad, be careful of your data handling.</summary><param name="state">Some information about what situation the vessel is starting in.</param></member><member name="M:PartModule.OnUpdate"><summary>Called once per Unity Update cycle once the part has been activated (staged).  If you want to be called even if the part has not been activated, define a function called</summary><c>void Update()</c><remarks>instead of overriding OnFixedUpdate.   See the Unity documentation on Update for more information. Poll for user input in OnUpdate, not OnFixedUpdate.</remarks></member><member name="M:PartModule.Save(ConfigNode)"><summary>Save data to persistence file. Difference between this method and OnSave is unknown.</summary></member><member name="M:PartModule.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:PartModule.SendMessage(string,object)"></member><member name="M:PartModule.SendMessage(string)"></member><member name="M:PartModule.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:PartModule.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:PartModule.SendMessageUpwards(string,object)"></member><member name="M:PartModule.SendMessageUpwards(string)"></member><member name="M:PartModule.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:PartModule.SetStaging(System.Boolean)"></member><member name="M:PartModule.StagingEnabled"></member><member name="M:PartModule.StagingToggleEnabledEditor"></member><member name="M:PartModule.StagingToggleEnabledFlight"></member><member name="M:PartModule.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:PartModule.StartCoroutine(string,object)"></member><member name="M:PartModule.StartCoroutine(string)"></member><member name="M:PartModule.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:PartModule.StopAllCoroutines"></member><member name="M:PartModule.StopCoroutine(string)"></member><member name="M:PartModule.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:PartModule.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:PartModule.ToggleStaging"></member><member name="M:PartModule.ToString"></member><member name="M:PartModule.UpdateStagingToggle"></member><member name="M:PartModule.#ctor"></member><member name="T:PartResource"><summary>A PartResource object represents the store of a single type of resource within a Part.</summary></member><member name="F:PartResource._flowMode"></member><member name="F:PartResource._flowState"></member><member name="F:PartResource.amount"><summary>How much of the resource is in this part, in whatever units the resource uses.</summary></member><member name="F:PartResource.flowMode"></member><member name="F:PartResource.flowState"></member><member name="F:PartResource.hideFlow"></member><member name="F:PartResource.info"><summary>The definition of this type of resource, which contains all information about this resource type.</summary></member><member name="F:PartResource.isTweakable"></member><member name="F:PartResource.isVisible"></member><member name="F:PartResource.maxAmount"><summary>The maximum amount of this resource that this part can hold.</summary></member><member name="F:PartResource.part"><summary>The part whose stored resource this object represents</summary></member><member name="F:PartResource.resourceName"><summary>The name of this resource, as a string, e.g. "ElectricCharge"</summary></member><member name="P:PartResource.enabled"></member><member name="P:PartResource.flowMode"></member><member name="P:PartResource.flowState"></member><member name="P:PartResource.gameObject"></member><member name="P:PartResource.hideFlags"></member><member name="P:PartResource.isActiveAndEnabled"></member><member name="P:PartResource.name"></member><member name="P:PartResource.tag"></member><member name="P:PartResource.transform"></member><member name="P:PartResource.useGUILayout"></member><member name="M:PartResource.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:PartResource.BroadcastMessage(string,object)"></member><member name="M:PartResource.BroadcastMessage(string)"></member><member name="M:PartResource.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:PartResource.CancelInvoke"></member><member name="M:PartResource.CancelInvoke(string)"></member><member name="M:PartResource.CanProvide(System.Double)"></member><member name="M:PartResource.CompareTag(string)"></member><member name="M:PartResource.Equals(object)"></member><member name="M:PartResource.Finalize"></member><member name="M:PartResource.GetComponent(System.Type)"></member><member name="M:PartResource.GetComponent"></member><member name="M:PartResource.GetComponent(string)"></member><member name="M:PartResource.GetComponentInChildren(System.Type)"></member><member name="M:PartResource.GetComponentInChildren"></member><member name="M:PartResource.GetComponentInParent(System.Type)"></member><member name="M:PartResource.GetComponentInParent"></member><member name="M:PartResource.GetComponents(System.Type)"></member><member name="M:PartResource.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:PartResource.GetComponents(List)"></member><member name="M:PartResource.GetComponents"></member><member name="M:PartResource.GetComponentsInChildren(System.Type)"></member><member name="M:PartResource.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:PartResource.GetComponentsInChildren(System.Boolean)"></member><member name="M:PartResource.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:PartResource.GetComponentsInChildren"></member><member name="M:PartResource.GetComponentsInChildren(List)"></member><member name="M:PartResource.GetComponentsInParent(System.Type)"></member><member name="M:PartResource.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:PartResource.GetComponentsInParent(System.Boolean)"></member><member name="M:PartResource.GetComponentsInParent(System.Boolean,List)"></member><member name="M:PartResource.GetComponentsInParent"></member><member name="M:PartResource.GetHashCode"></member><member name="M:PartResource.GetInfo"></member><member name="M:PartResource.GetInstanceID"></member><member name="M:PartResource.GetType"></member><member name="M:PartResource.Invoke(string,System.Single)"></member><member name="M:PartResource.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:PartResource.IsInvoking(string)"></member><member name="M:PartResource.IsInvoking"></member><member name="M:PartResource.Load(ConfigNode)"></member><member name="M:PartResource.MemberwiseClone"></member><member name="M:PartResource.Save(ConfigNode)"></member><member name="M:PartResource.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:PartResource.SendMessage(string,object)"></member><member name="M:PartResource.SendMessage(string)"></member><member name="M:PartResource.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:PartResource.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:PartResource.SendMessageUpwards(string,object)"></member><member name="M:PartResource.SendMessageUpwards(string)"></member><member name="M:PartResource.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:PartResource.SetInfo(PartResourceDefinition)"></member><member name="M:PartResource.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:PartResource.StartCoroutine(string,object)"></member><member name="M:PartResource.StartCoroutine(string)"></member><member name="M:PartResource.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:PartResource.StopAllCoroutines"></member><member name="M:PartResource.StopCoroutine(string)"></member><member name="M:PartResource.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:PartResource.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:PartResource.ToString"></member><member name="M:PartResource.#ctor"></member><member name="T:PartResourceDefinition"><summary>A PartResourceDefinition contains the basic information defining a type of resource.</summary></member><member name="P:PartResourceDefinition.color"></member><member name="P:PartResourceDefinition.Config"></member><member name="P:PartResourceDefinition.density"><summary>The mass of this resource, per unit. This is not necessarily per unit volume, as resources don't have defined volumes. Instead resource "density" is the mass of one units of the resourc.e</summary></member><member name="P:PartResourceDefinition.id"><summary>The integer ID of this resource type.</summary></member><member name="P:PartResourceDefinition.isTweakable"></member><member name="P:PartResourceDefinition.isVisible"></member><member name="P:PartResourceDefinition.name"><summary>The string ID of this resource type

Possible values:
&lt;ul&gt;
&lt;li&gt;Ablator&lt;/li&gt;
&lt;li&gt;ElectricCharge&lt;/li&gt;
&lt;li&gt;LiquidFuel&lt;/li&gt;
&lt;li&gt;MonoPropellant&lt;/li&gt;
&lt;li&gt;Oxidizer&lt;/li&gt;
&lt;li&gt;SolidFuel&lt;/li&gt;
&lt;li&gt;XenonGas&lt;/li&gt;
&lt;li&gt;Unconfirmed: EVAFuel&lt;/li&gt;
&lt;/ul&gt;</summary></member><member name="P:PartResourceDefinition.resourceFlowMode"><summary>How this resource does or does not flow between parts on a ship in response to resource requests by engines and the like.</summary></member><member name="P:PartResourceDefinition.resourceTransferMode"><summary>How this resource does or does not flow when using the resource transfer function?</summary></member><member name="P:PartResourceDefinition.specificHeatCapacity"></member><member name="P:PartResourceDefinition.unitCost"></member><member name="P:PartResourceDefinition.volume"></member><member name="M:PartResourceDefinition.Equals(object)"></member><member name="M:PartResourceDefinition.Finalize"></member><member name="M:PartResourceDefinition.GetHashCode"></member><member name="M:PartResourceDefinition.GetType"></member><member name="M:PartResourceDefinition.Load(ConfigNode)"></member><member name="M:PartResourceDefinition.MemberwiseClone"></member><member name="M:PartResourceDefinition.Save(ConfigNode)"></member><member name="M:PartResourceDefinition.ToString"></member><member name="M:PartResourceDefinition.#ctor"></member><member name="M:PartResourceDefinition.#ctor(string)"></member><member name="M:PartResourceDefinition.#ctor(string,UnityEngine.Color)"></member><member name="T:PartResourceLibrary"><summary>The PartResourceLibrary lets you retrieve information about a resource type, given its name or integer id.</summary></member><member name="F:PartResourceLibrary.resourceDefinitions"></member><member name="F:PartResourceLibrary.resourceExtension"></member><member name="F:PartResourceLibrary.resourcePath"></member><member name="F:PartResourceLibrary.ElementalResources"></member><member name="P:PartResourceLibrary.enabled"></member><member name="P:PartResourceLibrary.gameObject"></member><member name="P:PartResourceLibrary.hideFlags"></member><member name="P:PartResourceLibrary.isActiveAndEnabled"></member><member name="P:PartResourceLibrary.name"></member><member name="P:PartResourceLibrary.tag"></member><member name="P:PartResourceLibrary.transform"></member><member name="P:PartResourceLibrary.useGUILayout"></member><member name="P:PartResourceLibrary.Instance"><summary>Use this instance to access the methods of this class</summary></member><member name="M:PartResourceLibrary.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:PartResourceLibrary.BroadcastMessage(string,object)"></member><member name="M:PartResourceLibrary.BroadcastMessage(string)"></member><member name="M:PartResourceLibrary.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:PartResourceLibrary.CancelInvoke"></member><member name="M:PartResourceLibrary.CancelInvoke(string)"></member><member name="M:PartResourceLibrary.CompareTag(string)"></member><member name="M:PartResourceLibrary.Equals(object)"></member><member name="M:PartResourceLibrary.Finalize"></member><member name="M:PartResourceLibrary.GetComponent(System.Type)"></member><member name="M:PartResourceLibrary.GetComponent"></member><member name="M:PartResourceLibrary.GetComponent(string)"></member><member name="M:PartResourceLibrary.GetComponentInChildren(System.Type)"></member><member name="M:PartResourceLibrary.GetComponentInChildren"></member><member name="M:PartResourceLibrary.GetComponentInParent(System.Type)"></member><member name="M:PartResourceLibrary.GetComponentInParent"></member><member name="M:PartResourceLibrary.GetComponents(System.Type)"></member><member name="M:PartResourceLibrary.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:PartResourceLibrary.GetComponents(List)"></member><member name="M:PartResourceLibrary.GetComponents"></member><member name="M:PartResourceLibrary.GetComponentsInChildren(System.Type)"></member><member name="M:PartResourceLibrary.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:PartResourceLibrary.GetComponentsInChildren(System.Boolean)"></member><member name="M:PartResourceLibrary.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:PartResourceLibrary.GetComponentsInChildren"></member><member name="M:PartResourceLibrary.GetComponentsInChildren(List)"></member><member name="M:PartResourceLibrary.GetComponentsInParent(System.Type)"></member><member name="M:PartResourceLibrary.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:PartResourceLibrary.GetComponentsInParent(System.Boolean)"></member><member name="M:PartResourceLibrary.GetComponentsInParent(System.Boolean,List)"></member><member name="M:PartResourceLibrary.GetComponentsInParent"></member><member name="M:PartResourceLibrary.GetDefinition(string)"><summary>Gets information about a resource, specified by its name as a string.</summary><param name="name">The name of the resource, e.g. "ElectricCharge"</param><returns>A PartResourceDefinition, which contains all the information about the resource</returns></member><member name="M:PartResourceLibrary.GetDefinition(System.Int32)"><summary>Gets information about a resource, specified by its integer ID.</summary><param name="id">The integer ID of the resource</param><returns>A PartResourceDefinition, which contains all the information about the resource</returns></member><member name="M:PartResourceLibrary.GetHashCode"></member><member name="M:PartResourceLibrary.GetInstanceID"></member><member name="M:PartResourceLibrary.GetType"></member><member name="M:PartResourceLibrary.Invoke(string,System.Single)"></member><member name="M:PartResourceLibrary.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:PartResourceLibrary.IsInvoking(string)"></member><member name="M:PartResourceLibrary.IsInvoking"></member><member name="M:PartResourceLibrary.LoadDefinitions"></member><member name="M:PartResourceLibrary.MemberwiseClone"></member><member name="M:PartResourceLibrary.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:PartResourceLibrary.SendMessage(string,object)"></member><member name="M:PartResourceLibrary.SendMessage(string)"></member><member name="M:PartResourceLibrary.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:PartResourceLibrary.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:PartResourceLibrary.SendMessageUpwards(string,object)"></member><member name="M:PartResourceLibrary.SendMessageUpwards(string)"></member><member name="M:PartResourceLibrary.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:PartResourceLibrary.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:PartResourceLibrary.StartCoroutine(string,object)"></member><member name="M:PartResourceLibrary.StartCoroutine(string)"></member><member name="M:PartResourceLibrary.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:PartResourceLibrary.StopAllCoroutines"></member><member name="M:PartResourceLibrary.StopCoroutine(string)"></member><member name="M:PartResourceLibrary.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:PartResourceLibrary.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:PartResourceLibrary.ToString"></member><member name="M:PartResourceLibrary.GetDefaultFlowMode(string)"></member><member name="M:PartResourceLibrary.GetDefaultFlowMode(System.Int32)"></member><member name="M:PartResourceLibrary.#ctor"></member><member name="T:PatchedConicSolver"><summary>Each vessel has a PatchedConicSolver, which stores the predicted patched conics trajectory and any maneuver nodes that currently exist.</summary></member><member name="F:PatchedConicSolver.debug_disableEscapeCheck"></member><member name="F:PatchedConicSolver.flightPlan"></member><member name="F:PatchedConicSolver.GeoSolverIterations"></member><member name="F:PatchedConicSolver.maneuverNodes"><summary>A list of the maneuver nodes that are currently planned for this vessel.</summary></member><member name="F:PatchedConicSolver.maxGeometrySolverIterations"></member><member name="F:PatchedConicSolver.maxTimeSolverIterations"></member><member name="F:PatchedConicSolver.maxTotalPatches"></member><member name="F:PatchedConicSolver.MorePatchesAhead"></member><member name="F:PatchedConicSolver.obtDriver"></member><member name="F:PatchedConicSolver.outerReaches"></member><member name="F:PatchedConicSolver.patches"></member><member name="F:PatchedConicSolver.patchesAhead"></member><member name="F:PatchedConicSolver.targetBody"></member><member name="F:PatchedConicSolver.TimeSolverIterations1"></member><member name="F:PatchedConicSolver.TimeSolverIterations2"></member><member name="P:PatchedConicSolver.enabled"></member><member name="P:PatchedConicSolver.gameObject"></member><member name="P:PatchedConicSolver.hideFlags"></member><member name="P:PatchedConicSolver.isActiveAndEnabled"></member><member name="P:PatchedConicSolver.LastActivePatch"></member><member name="P:PatchedConicSolver.name"></member><member name="P:PatchedConicSolver.orbit"></member><member name="P:PatchedConicSolver.tag"></member><member name="P:PatchedConicSolver.transform"></member><member name="P:PatchedConicSolver.useGUILayout"></member><member name="M:PatchedConicSolver.AddManeuverNode(System.Double)"><summary>Add a maneuver node to the flight plan.</summary><param name="UT">The universal time of the maneuver node.</param><returns>A reference to the maneuver node</returns></member><member name="M:PatchedConicSolver.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:PatchedConicSolver.BroadcastMessage(string,object)"></member><member name="M:PatchedConicSolver.BroadcastMessage(string)"></member><member name="M:PatchedConicSolver.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:PatchedConicSolver.CancelInvoke"></member><member name="M:PatchedConicSolver.CancelInvoke(string)"></member><member name="M:PatchedConicSolver.CompareTag(string)"></member><member name="M:PatchedConicSolver.DecreasePatchLimit"></member><member name="M:PatchedConicSolver.Equals(object)"></member><member name="M:PatchedConicSolver.Finalize"></member><member name="M:PatchedConicSolver.FindFirstPatch(System.Double)"></member><member name="M:PatchedConicSolver.GetComponent(System.Type)"></member><member name="M:PatchedConicSolver.GetComponent"></member><member name="M:PatchedConicSolver.GetComponent(string)"></member><member name="M:PatchedConicSolver.GetComponentInChildren(System.Type)"></member><member name="M:PatchedConicSolver.GetComponentInChildren"></member><member name="M:PatchedConicSolver.GetComponentInParent(System.Type)"></member><member name="M:PatchedConicSolver.GetComponentInParent"></member><member name="M:PatchedConicSolver.GetComponents(System.Type)"></member><member name="M:PatchedConicSolver.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:PatchedConicSolver.GetComponents(List)"></member><member name="M:PatchedConicSolver.GetComponents"></member><member name="M:PatchedConicSolver.GetComponentsInChildren(System.Type)"></member><member name="M:PatchedConicSolver.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:PatchedConicSolver.GetComponentsInChildren(System.Boolean)"></member><member name="M:PatchedConicSolver.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:PatchedConicSolver.GetComponentsInChildren"></member><member name="M:PatchedConicSolver.GetComponentsInChildren(List)"></member><member name="M:PatchedConicSolver.GetComponentsInParent(System.Type)"></member><member name="M:PatchedConicSolver.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:PatchedConicSolver.GetComponentsInParent(System.Boolean)"></member><member name="M:PatchedConicSolver.GetComponentsInParent(System.Boolean,List)"></member><member name="M:PatchedConicSolver.GetComponentsInParent"></member><member name="M:PatchedConicSolver.GetHashCode"></member><member name="M:PatchedConicSolver.GetInstanceID"></member><member name="M:PatchedConicSolver.GetType"></member><member name="M:PatchedConicSolver.IncreasePatchLimit"></member><member name="M:PatchedConicSolver.Invoke(string,System.Single)"></member><member name="M:PatchedConicSolver.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:PatchedConicSolver.IsInvoking(string)"></member><member name="M:PatchedConicSolver.IsInvoking"></member><member name="M:PatchedConicSolver.Load(ConfigNode)"></member><member name="M:PatchedConicSolver.MemberwiseClone"></member><member name="M:PatchedConicSolver.RemoveManeuverNode(ManeuverNode)"><summary>Remove a maneuver node from the flight plane.</summary><param name="node">The maneuver node to be removed.</param><remarks>As of 1.1 thios causes graphics glitches - use</remarks><see cref="ManeuverNode.RemoveSelf()"/></member><member name="M:PatchedConicSolver.Save(ConfigNode)"></member><member name="M:PatchedConicSolver.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:PatchedConicSolver.SendMessage(string,object)"></member><member name="M:PatchedConicSolver.SendMessage(string)"></member><member name="M:PatchedConicSolver.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:PatchedConicSolver.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:PatchedConicSolver.SendMessageUpwards(string,object)"></member><member name="M:PatchedConicSolver.SendMessageUpwards(string)"></member><member name="M:PatchedConicSolver.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:PatchedConicSolver.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:PatchedConicSolver.StartCoroutine(string,object)"></member><member name="M:PatchedConicSolver.StartCoroutine(string)"></member><member name="M:PatchedConicSolver.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:PatchedConicSolver.StopAllCoroutines"></member><member name="M:PatchedConicSolver.StopCoroutine(string)"></member><member name="M:PatchedConicSolver.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:PatchedConicSolver.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:PatchedConicSolver.ToString"></member><member name="M:PatchedConicSolver.Update"></member><member name="M:PatchedConicSolver.UpdateFlightPlan"></member><member name="M:PatchedConicSolver.#ctor"></member><member name="T:PatchedConics"></member><member name="M:PatchedConics.Equals(object)"></member><member name="M:PatchedConics.Finalize"></member><member name="M:PatchedConics.GetHashCode"></member><member name="M:PatchedConics.GetType"></member><member name="M:PatchedConics.MemberwiseClone"></member><member name="M:PatchedConics.ToString"></member><member name="M:PatchedConics.CalculatePatch(Orbit,Orbit,System.Double,PatchedConics+SolverParameters,CelestialBody)"></member><member name="M:PatchedConics.CompareAnomalies(System.Double,System.Double)"></member><member name="M:PatchedConics.ScreenCast(UnityEngine.Vector3,System.Collections.Generic.List,PatchedConics+PatchCastHit&amp;,System.Single,System.Double,System.Boolean)"></member><member name="M:PatchedConics.ScreenCast(UnityEngine.Vector3,PatchRendering,PatchedConics+PatchCastHit&amp;,System.Single,System.Double,System.Boolean)"></member><member name="M:PatchedConics.ScreenCast(Vector3,List&lt;PatchRendering&gt;,PatchedConics.PatchCastHit,System.Single,System.Double,System.Boolean)"></member><member name="M:PatchedConics.ScreenCast(Vector3,PatchRendering,PatchedConics.PatchCastHit,System.Single,System.Double,System.Boolean)"></member><member name="M:PatchedConics.TAIsWithinPatchBounds(System.Double,Orbit)"></member><member name="M:PatchedConics.#ctor"></member><member name="T:Planetarium"><summary>Probably the most useful function here is Planetarium.GetUniversalTime().</summary></member><member name="F:Planetarium.CurrentMainBody"><summary>Presumably, the main body of the active vessel?</summary></member><member name="F:Planetarium.fixedDeltaTime"></member><member name="F:Planetarium.Home"></member><member name="F:Planetarium.inverseRotAngle"></member><member name="F:Planetarium.orbits"></member><member name="F:Planetarium.pause"></member><member name="F:Planetarium.rotation"></member><member name="F:Planetarium.Sun"><summary>The CelestialBody representing the Sun.</summary></member><member name="F:Planetarium.time"></member><member name="F:Planetarium.timeScale"></member><member name="F:Planetarium.zUpRotation"></member><member name="F:Planetarium.fetch"><summary>Use this instance to access non-static fields.</summary></member><member name="F:Planetarium.Zup"></member><member name="P:Planetarium.enabled"></member><member name="P:Planetarium.gameObject"></member><member name="P:Planetarium.hideFlags"></member><member name="P:Planetarium.isActiveAndEnabled"></member><member name="P:Planetarium.name"></member><member name="P:Planetarium.tag"></member><member name="P:Planetarium.transform"></member><member name="P:Planetarium.useGUILayout"></member><member name="P:Planetarium.forward"><summary>Along with "up" and "right," one of the three vectors defining the fixed celestial reference frame.</summary></member><member name="P:Planetarium.InverseRotAngle"></member><member name="P:Planetarium.Orbits"></member><member name="P:Planetarium.Pause"></member><member name="P:Planetarium.right"><summary>Along with "up" and "forward," one of the three vectors defining the fixed celestial reference frame. The LAN (longitude of the ascending node) of every orbit is defined in reference to Planetarium.right. Specifically, the LAN is the angle between Planetarium.right and the orbit's ascending node, as viewed along Planetarium.up.</summary></member><member name="P:Planetarium.Rotation"></member><member name="P:Planetarium.TimeScale"></member><member name="P:Planetarium.up"><summary>Along with "right" and "forward," one of the three vectors defining the fixed celestial reference frame. As of 0.23.5, all planet rotation axes are aligned with Planetarium.up.</summary></member><member name="P:Planetarium.ZupRotation"></member><member name="M:Planetarium.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:Planetarium.BroadcastMessage(string,object)"></member><member name="M:Planetarium.BroadcastMessage(string)"></member><member name="M:Planetarium.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:Planetarium.CancelInvoke"></member><member name="M:Planetarium.CancelInvoke(string)"></member><member name="M:Planetarium.CompareTag(string)"></member><member name="M:Planetarium.Equals(object)"></member><member name="M:Planetarium.Finalize"></member><member name="M:Planetarium.GetComponent(System.Type)"></member><member name="M:Planetarium.GetComponent"></member><member name="M:Planetarium.GetComponent(string)"></member><member name="M:Planetarium.GetComponentInChildren(System.Type)"></member><member name="M:Planetarium.GetComponentInChildren"></member><member name="M:Planetarium.GetComponentInParent(System.Type)"></member><member name="M:Planetarium.GetComponentInParent"></member><member name="M:Planetarium.GetComponents(System.Type)"></member><member name="M:Planetarium.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:Planetarium.GetComponents(List)"></member><member name="M:Planetarium.GetComponents"></member><member name="M:Planetarium.GetComponentsInChildren(System.Type)"></member><member name="M:Planetarium.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:Planetarium.GetComponentsInChildren(System.Boolean)"></member><member name="M:Planetarium.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:Planetarium.GetComponentsInChildren"></member><member name="M:Planetarium.GetComponentsInChildren(List)"></member><member name="M:Planetarium.GetComponentsInParent(System.Type)"></member><member name="M:Planetarium.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:Planetarium.GetComponentsInParent(System.Boolean)"></member><member name="M:Planetarium.GetComponentsInParent(System.Boolean,List)"></member><member name="M:Planetarium.GetComponentsInParent"></member><member name="M:Planetarium.GetHashCode"></member><member name="M:Planetarium.GetInstanceID"></member><member name="M:Planetarium.GetType"></member><member name="M:Planetarium.Invoke(string,System.Single)"></member><member name="M:Planetarium.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:Planetarium.IsInvoking(string)"></member><member name="M:Planetarium.IsInvoking"></member><member name="M:Planetarium.MemberwiseClone"></member><member name="M:Planetarium.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:Planetarium.SendMessage(string,object)"></member><member name="M:Planetarium.SendMessage(string)"></member><member name="M:Planetarium.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:Planetarium.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:Planetarium.SendMessageUpwards(string,object)"></member><member name="M:Planetarium.SendMessageUpwards(string)"></member><member name="M:Planetarium.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:Planetarium.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:Planetarium.StartCoroutine(string,object)"></member><member name="M:Planetarium.StartCoroutine(string)"></member><member name="M:Planetarium.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:Planetarium.StopAllCoroutines"></member><member name="M:Planetarium.StopCoroutine(string)"></member><member name="M:Planetarium.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:Planetarium.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:Planetarium.ToString"></member><member name="M:Planetarium.UpdateCBs"></member><member name="M:Planetarium.FrameIsRotating"><summary>Presumably, whether the game is currently using a rotating frame for physics (as opposed to an unrotating inertial frame).  Below a certain altitude (CelestialBody.inverseRot</summary><returns/></member><member name="M:Planetarium.GetUniversalTime"><summary>The simulation time, in seconds, since this save was started.</summary><returns>Universal time, in seconds</returns></member><member name="M:Planetarium.SetUniversalTime(System.Double)"></member><member name="M:Planetarium.#ctor"></member><member name="T:PlanetariumCamera"><summary>A class related to the map view camera.</summary></member><member name="F:PlanetariumCamera.AbortExternalControl"></member><member name="F:PlanetariumCamera.cameraWobbleSensitivity"></member><member name="F:PlanetariumCamera.camHdg"></member><member name="F:PlanetariumCamera.camPitch"></member><member name="F:PlanetariumCamera.endHeading"></member><member name="F:PlanetariumCamera.initialTarget"></member><member name="F:PlanetariumCamera.maxDistance"></member><member name="F:PlanetariumCamera.maxPitch"></member><member name="F:PlanetariumCamera.minDistance"></member><member name="F:PlanetariumCamera.minHeight"></member><member name="F:PlanetariumCamera.minHeightAtMaxDist"></member><member name="F:PlanetariumCamera.minHeightAtMinDist"></member><member name="F:PlanetariumCamera.minPitch"></member><member name="F:PlanetariumCamera.mode"></member><member name="F:PlanetariumCamera.orbitSensitivity"></member><member name="F:PlanetariumCamera.pivotTranslateSharpness"></member><member name="F:PlanetariumCamera.sharpness"></member><member name="F:PlanetariumCamera.startDistance"></member><member name="F:PlanetariumCamera.style"></member><member name="F:PlanetariumCamera.TabSwitchTargets"></member><member name="F:PlanetariumCamera.target"></member><member name="F:PlanetariumCamera.targetHeading"></member><member name="F:PlanetariumCamera.targets"></member><member name="F:PlanetariumCamera.zoomScaleFactor"></member><member name="F:PlanetariumCamera.fetch"><summary>Use this instance to access non-static members of this class.</summary></member><member name="P:PlanetariumCamera.Distance"></member><member name="P:PlanetariumCamera.enabled"></member><member name="P:PlanetariumCamera.gameObject"></member><member name="P:PlanetariumCamera.hideFlags"></member><member name="P:PlanetariumCamera.isActiveAndEnabled"></member><member name="P:PlanetariumCamera.name"></member><member name="P:PlanetariumCamera.pivotRotation"></member><member name="P:PlanetariumCamera.tag"></member><member name="P:PlanetariumCamera.transform"></member><member name="P:PlanetariumCamera.useGUILayout"></member><member name="P:PlanetariumCamera.Camera"><summary>This is the Camera that looks at the planetarium scene. See the Unity documentation on Camera to see what you can do with this object.</summary></member><member name="P:PlanetariumCamera.fetch"></member><member name="M:PlanetariumCamera.Activate"></member><member name="M:PlanetariumCamera.AddTarget(MapObject)"></member><member name="M:PlanetariumCamera.AddTarget(Transform)"></member><member name="M:PlanetariumCamera.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:PlanetariumCamera.BroadcastMessage(string,object)"></member><member name="M:PlanetariumCamera.BroadcastMessage(string)"></member><member name="M:PlanetariumCamera.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:PlanetariumCamera.CancelInvoke"></member><member name="M:PlanetariumCamera.CancelInvoke(string)"></member><member name="M:PlanetariumCamera.CompareTag(string)"></member><member name="M:PlanetariumCamera.Deactivate"></member><member name="M:PlanetariumCamera.Equals(object)"></member><member name="M:PlanetariumCamera.Finalize"></member><member name="M:PlanetariumCamera.FindNearestTarget"></member><member name="M:PlanetariumCamera.findNearestTarget"></member><member name="M:PlanetariumCamera.GetCameraTransform"></member><member name="M:PlanetariumCamera.GetComponent(System.Type)"></member><member name="M:PlanetariumCamera.GetComponent"></member><member name="M:PlanetariumCamera.GetComponent(string)"></member><member name="M:PlanetariumCamera.GetComponentInChildren(System.Type)"></member><member name="M:PlanetariumCamera.GetComponentInChildren"></member><member name="M:PlanetariumCamera.GetComponentInParent(System.Type)"></member><member name="M:PlanetariumCamera.GetComponentInParent"></member><member name="M:PlanetariumCamera.GetComponents(System.Type)"></member><member name="M:PlanetariumCamera.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:PlanetariumCamera.GetComponents(List)"></member><member name="M:PlanetariumCamera.GetComponents"></member><member name="M:PlanetariumCamera.GetComponentsInChildren(System.Type)"></member><member name="M:PlanetariumCamera.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:PlanetariumCamera.GetComponentsInChildren(System.Boolean)"></member><member name="M:PlanetariumCamera.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:PlanetariumCamera.GetComponentsInChildren"></member><member name="M:PlanetariumCamera.GetComponentsInChildren(List)"></member><member name="M:PlanetariumCamera.GetComponentsInParent(System.Type)"></member><member name="M:PlanetariumCamera.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:PlanetariumCamera.GetComponentsInParent(System.Boolean)"></member><member name="M:PlanetariumCamera.GetComponentsInParent(System.Boolean,List)"></member><member name="M:PlanetariumCamera.GetComponentsInParent"></member><member name="M:PlanetariumCamera.GetHashCode"></member><member name="M:PlanetariumCamera.GetInstanceID"></member><member name="M:PlanetariumCamera.getPitch"></member><member name="M:PlanetariumCamera.GetPivot"></member><member name="M:PlanetariumCamera.getReferenceFrame"></member><member name="M:PlanetariumCamera.GetTarget(System.Int32)"></member><member name="M:PlanetariumCamera.GetTargetIndex(string)"></member><member name="M:PlanetariumCamera.GetType"></member><member name="M:PlanetariumCamera.getYaw"></member><member name="M:PlanetariumCamera.IKSPCamera.get_enabled"></member><member name="M:PlanetariumCamera.Invoke(string,System.Single)"></member><member name="M:PlanetariumCamera.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:PlanetariumCamera.IsInvoking(string)"></member><member name="M:PlanetariumCamera.IsInvoking"></member><member name="M:PlanetariumCamera.MemberwiseClone"></member><member name="M:PlanetariumCamera.OnNavigatorHandoff"></member><member name="M:PlanetariumCamera.OnNavigatorRequestControl"></member><member name="M:PlanetariumCamera.OnNavigatorTakeOver(Callback)"></member><member name="M:PlanetariumCamera.onVesselSwitching(Vessel,Vessel)"></member><member name="M:PlanetariumCamera.RemoveTarget(MapObject)"></member><member name="M:PlanetariumCamera.RemoveTarget(Transform)"></member><member name="M:PlanetariumCamera.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:PlanetariumCamera.SendMessage(string,object)"></member><member name="M:PlanetariumCamera.SendMessage(string)"></member><member name="M:PlanetariumCamera.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:PlanetariumCamera.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:PlanetariumCamera.SendMessageUpwards(string,object)"></member><member name="M:PlanetariumCamera.SendMessageUpwards(string)"></member><member name="M:PlanetariumCamera.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:PlanetariumCamera.SetCamCoordsFromPosition(UnityEngine.Vector3)"></member><member name="M:PlanetariumCamera.SetDistance(System.Single)"></member><member name="M:PlanetariumCamera.SetTarget(CelestialBody)"></member><member name="M:PlanetariumCamera.SetTarget(string)"></member><member name="M:PlanetariumCamera.SetTarget(System.Int32)"></member><member name="M:PlanetariumCamera.SetTarget(MapObject)"></member><member name="M:PlanetariumCamera.setTarget(System.Int32)"></member><member name="M:PlanetariumCamera.setTarget(Transform)"></member><member name="M:PlanetariumCamera.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:PlanetariumCamera.StartCoroutine(string,object)"></member><member name="M:PlanetariumCamera.StartCoroutine(string)"></member><member name="M:PlanetariumCamera.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:PlanetariumCamera.StopAllCoroutines"></member><member name="M:PlanetariumCamera.StopCoroutine(string)"></member><member name="M:PlanetariumCamera.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:PlanetariumCamera.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:PlanetariumCamera.ToString"></member><member name="M:PlanetariumCamera.#ctor"></member><member name="T:ProceduralAsteroid"><summary>Generates an asteroid shape</summary></member><member name="F:ProceduralAsteroid.radius"><summary>The desired reference surface of the asteroid mesh</summary></member><member name="P:ProceduralAsteroid.enabled"></member><member name="P:ProceduralAsteroid.gameObject"></member><member name="P:ProceduralAsteroid.hideFlags"></member><member name="P:ProceduralAsteroid.isActiveAndEnabled"></member><member name="P:ProceduralAsteroid.name"></member><member name="P:ProceduralAsteroid.tag"></member><member name="P:ProceduralAsteroid.transform"></member><member name="P:ProceduralAsteroid.useGUILayout"></member><member name="M:ProceduralAsteroid.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ProceduralAsteroid.BroadcastMessage(string,object)"></member><member name="M:ProceduralAsteroid.BroadcastMessage(string)"></member><member name="M:ProceduralAsteroid.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:ProceduralAsteroid.CancelInvoke"></member><member name="M:ProceduralAsteroid.CancelInvoke(string)"></member><member name="M:ProceduralAsteroid.CompareTag(string)"></member><member name="M:ProceduralAsteroid.Equals(object)"></member><member name="M:ProceduralAsteroid.Finalize"></member><member name="M:ProceduralAsteroid.Generate(System.Int32,System.Single,UnityEngine.Transform,System.Func,Callback)"></member><member name="M:ProceduralAsteroid.Generate(System.Int32,System.Single,Transform)"><summary>Initializes a randomly generated asteroid shape</summary><param name="'seed'">Used to randomize the mesh</param><param name="'radius'">The desired reference surface of the asteroid mesh</param><param name="'parent'">The reference frame in which the asteroid is to be oriented</param><remarks>Note:</remarks><paramref name="parent"/><remarks>may not be null, even though UnityEngine.Transforms 	are usually allowed to have null parents.</remarks><returns>An object containing all relevant meshes and key statistics</returns></member><member name="M:ProceduralAsteroid.GetComponent(System.Type)"></member><member name="M:ProceduralAsteroid.GetComponent"></member><member name="M:ProceduralAsteroid.GetComponent(string)"></member><member name="M:ProceduralAsteroid.GetComponentInChildren(System.Type)"></member><member name="M:ProceduralAsteroid.GetComponentInChildren"></member><member name="M:ProceduralAsteroid.GetComponentInParent(System.Type)"></member><member name="M:ProceduralAsteroid.GetComponentInParent"></member><member name="M:ProceduralAsteroid.GetComponents(System.Type)"></member><member name="M:ProceduralAsteroid.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:ProceduralAsteroid.GetComponents(List)"></member><member name="M:ProceduralAsteroid.GetComponents"></member><member name="M:ProceduralAsteroid.GetComponentsInChildren(System.Type)"></member><member name="M:ProceduralAsteroid.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:ProceduralAsteroid.GetComponentsInChildren(System.Boolean)"></member><member name="M:ProceduralAsteroid.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:ProceduralAsteroid.GetComponentsInChildren"></member><member name="M:ProceduralAsteroid.GetComponentsInChildren(List)"></member><member name="M:ProceduralAsteroid.GetComponentsInParent(System.Type)"></member><member name="M:ProceduralAsteroid.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:ProceduralAsteroid.GetComponentsInParent(System.Boolean)"></member><member name="M:ProceduralAsteroid.GetComponentsInParent(System.Boolean,List)"></member><member name="M:ProceduralAsteroid.GetComponentsInParent"></member><member name="M:ProceduralAsteroid.GetHashCode"></member><member name="M:ProceduralAsteroid.GetInstanceID"></member><member name="M:ProceduralAsteroid.GetType"></member><member name="M:ProceduralAsteroid.Invoke(string,System.Single)"></member><member name="M:ProceduralAsteroid.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:ProceduralAsteroid.IsInvoking(string)"></member><member name="M:ProceduralAsteroid.IsInvoking"></member><member name="M:ProceduralAsteroid.MemberwiseClone"></member><member name="M:ProceduralAsteroid.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ProceduralAsteroid.SendMessage(string,object)"></member><member name="M:ProceduralAsteroid.SendMessage(string)"></member><member name="M:ProceduralAsteroid.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:ProceduralAsteroid.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ProceduralAsteroid.SendMessageUpwards(string,object)"></member><member name="M:ProceduralAsteroid.SendMessageUpwards(string)"></member><member name="M:ProceduralAsteroid.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:ProceduralAsteroid.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:ProceduralAsteroid.StartCoroutine(string,object)"></member><member name="M:ProceduralAsteroid.StartCoroutine(string)"></member><member name="M:ProceduralAsteroid.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:ProceduralAsteroid.StopAllCoroutines"></member><member name="M:ProceduralAsteroid.StopCoroutine(string)"></member><member name="M:ProceduralAsteroid.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:ProceduralAsteroid.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:ProceduralAsteroid.ToString"></member><member name="M:ProceduralAsteroid.#ctor"></member><member name="T:ProtoCrewMember"></member><member name="F:ProtoCrewMember.careerLog"></member><member name="F:ProtoCrewMember.courage"></member><member name="F:ProtoCrewMember.experience"></member><member name="F:ProtoCrewMember.experienceLevel"></member><member name="F:ProtoCrewMember.experienceTrait"></member><member name="F:ProtoCrewMember.flightLog"></member><member name="F:ProtoCrewMember.hasToured"></member><member name="F:ProtoCrewMember.isBadass"></member><member name="F:ProtoCrewMember.KerbalRef"></member><member name="F:ProtoCrewMember.name"></member><member name="F:ProtoCrewMember.seat"></member><member name="F:ProtoCrewMember.seatIdx"></member><member name="F:ProtoCrewMember.stupidity"></member><member name="F:ProtoCrewMember.trait"><summary>This appears to return the type of Kerbal that is in question.  It will return "Pilot", "Engineer", or "Scientist" pending the type of Kerbal.  This can be changed by using the KerbalRoster.SetExperienceTrait(Kerbal_Name, traitName) method.</summary></member><member name="F:ProtoCrewMember.UTaR"></member><member name="P:ProtoCrewMember.ExperienceLevelDelta"></member><member name="P:ProtoCrewMember.gender"></member><member name="P:ProtoCrewMember.rosterStatus"></member><member name="P:ProtoCrewMember.type"></member><member name="M:ProtoCrewMember.ArchiveFlightLog"></member><member name="M:ProtoCrewMember.CheckRespawnTimer(System.Double,GameParameters)"></member><member name="M:ProtoCrewMember.Die"></member><member name="M:ProtoCrewMember.Equals(object)"></member><member name="M:ProtoCrewMember.Finalize"></member><member name="M:ProtoCrewMember.GetHashCode"></member><member name="M:ProtoCrewMember.GetType"></member><member name="M:ProtoCrewMember.MemberwiseClone"></member><member name="M:ProtoCrewMember.RegisterExperienceTraits(Part)"></member><member name="M:ProtoCrewMember.Save(ConfigNode)"></member><member name="M:ProtoCrewMember.SetTimeForRespawn(System.Double)"></member><member name="M:ProtoCrewMember.Spawn"></member><member name="M:ProtoCrewMember.StartRespawnPeriod(System.Double)"></member><member name="M:ProtoCrewMember.ToString"></member><member name="M:ProtoCrewMember.UnregisterExperienceTraits(Part)"></member><member name="M:ProtoCrewMember.#ctor(ProtoCrewMember+KerbalType)"></member><member name="M:ProtoCrewMember.#ctor(Game+Modes,ProtoCrewMember)"></member><member name="M:ProtoCrewMember.#ctor(Game+Modes,ConfigNode,ProtoCrewMember+KerbalType)"></member><member name="T:RenderingManager"><summary>This class should &lt;em&gt;Not&lt;/em&gt; be used and could cause corruption. For details of an alternative see &lt;a href="http://forum.kerbalspaceprogram.com/index.php?/topic/135179-info-on-how-to-convert-your-plugin-to-ksp-11/"&gt;RenderingManager in this thread&lt;/a&gt;</summary></member><member name="F:RenderingManager.clearCamera"></member><member name="F:RenderingManager.mainUiCamera"></member><member name="F:RenderingManager.mainUItexture"></member><member name="F:RenderingManager.maskUiCamera"></member><member name="F:RenderingManager.postDrawQueue"></member><member name="F:RenderingManager.preDrawQueue"></member><member name="F:RenderingManager.uiColor"></member><member name="F:RenderingManager.uiElementsToDisable"></member><member name="F:RenderingManager.fetch"></member><member name="P:RenderingManager.enabled"></member><member name="P:RenderingManager.gameObject"></member><member name="P:RenderingManager.hideFlags"></member><member name="P:RenderingManager.isActiveAndEnabled"></member><member name="P:RenderingManager.name"></member><member name="P:RenderingManager.tag"></member><member name="P:RenderingManager.transform"></member><member name="P:RenderingManager.useGUILayout"></member><member name="M:RenderingManager.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:RenderingManager.BroadcastMessage(string,object)"></member><member name="M:RenderingManager.BroadcastMessage(string)"></member><member name="M:RenderingManager.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:RenderingManager.CancelInvoke"></member><member name="M:RenderingManager.CancelInvoke(string)"></member><member name="M:RenderingManager.CompareTag(string)"></member><member name="M:RenderingManager.Equals(object)"></member><member name="M:RenderingManager.Finalize"></member><member name="M:RenderingManager.GetComponent(System.Type)"></member><member name="M:RenderingManager.GetComponent"></member><member name="M:RenderingManager.GetComponent(string)"></member><member name="M:RenderingManager.GetComponentInChildren(System.Type)"></member><member name="M:RenderingManager.GetComponentInChildren"></member><member name="M:RenderingManager.GetComponentInParent(System.Type)"></member><member name="M:RenderingManager.GetComponentInParent"></member><member name="M:RenderingManager.GetComponents(System.Type)"></member><member name="M:RenderingManager.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:RenderingManager.GetComponents(List)"></member><member name="M:RenderingManager.GetComponents"></member><member name="M:RenderingManager.GetComponentsInChildren(System.Type)"></member><member name="M:RenderingManager.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:RenderingManager.GetComponentsInChildren(System.Boolean)"></member><member name="M:RenderingManager.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:RenderingManager.GetComponentsInChildren"></member><member name="M:RenderingManager.GetComponentsInChildren(List)"></member><member name="M:RenderingManager.GetComponentsInParent(System.Type)"></member><member name="M:RenderingManager.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:RenderingManager.GetComponentsInParent(System.Boolean)"></member><member name="M:RenderingManager.GetComponentsInParent(System.Boolean,List)"></member><member name="M:RenderingManager.GetComponentsInParent"></member><member name="M:RenderingManager.GetHashCode"></member><member name="M:RenderingManager.GetInstanceID"></member><member name="M:RenderingManager.GetType"></member><member name="M:RenderingManager.Invoke(string,System.Single)"></member><member name="M:RenderingManager.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:RenderingManager.IsInvoking(string)"></member><member name="M:RenderingManager.IsInvoking"></member><member name="M:RenderingManager.MemberwiseClone"></member><member name="M:RenderingManager.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:RenderingManager.SendMessage(string,object)"></member><member name="M:RenderingManager.SendMessage(string)"></member><member name="M:RenderingManager.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:RenderingManager.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:RenderingManager.SendMessageUpwards(string,object)"></member><member name="M:RenderingManager.SendMessageUpwards(string)"></member><member name="M:RenderingManager.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:RenderingManager.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:RenderingManager.StartCoroutine(string,object)"></member><member name="M:RenderingManager.StartCoroutine(string)"></member><member name="M:RenderingManager.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:RenderingManager.StopAllCoroutines"></member><member name="M:RenderingManager.StopCoroutine(string)"></member><member name="M:RenderingManager.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:RenderingManager.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:RenderingManager.ToString"></member><member name="M:RenderingManager.AddToPostDrawQueue(System.Int32,Callback)"></member><member name="M:RenderingManager.AddToPreDrawQueue(System.Int32,Callback)"></member><member name="M:RenderingManager.RemoveFromPostDrawQueue(System.Int32,Callback)"></member><member name="M:RenderingManager.RemoveFromPreDrawQueue(System.Int32,Callback)"></member><member name="M:RenderingManager.ShowUI(System.Boolean)"></member><member name="M:RenderingManager.#ctor"></member><member name="T:Reputation"></member><member name="F:Reputation.runner"></member><member name="F:Reputation.snapshot"></member><member name="F:Reputation.targetScenes"></member><member name="F:Reputation.Instance"></member><member name="F:Reputation.RepRange"></member><member name="P:Reputation.ClassID"></member><member name="P:Reputation.ClassName"></member><member name="P:Reputation.enabled"></member><member name="P:Reputation.Events"></member><member name="P:Reputation.Fields"></member><member name="P:Reputation.gameObject"></member><member name="P:Reputation.hideFlags"></member><member name="P:Reputation.isActiveAndEnabled"></member><member name="P:Reputation.name"></member><member name="P:Reputation.reputation"></member><member name="P:Reputation.tag"></member><member name="P:Reputation.transform"></member><member name="P:Reputation.useGUILayout"></member><member name="P:Reputation.CurrentRep"></member><member name="P:Reputation.UnitRep"></member><member name="M:Reputation.AddReputation(System.Single,TransactionReasons)"></member><member name="M:Reputation.addReputation_discrete(System.Single,TransactionReasons)"></member><member name="M:Reputation.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:Reputation.BroadcastMessage(string,object)"></member><member name="M:Reputation.BroadcastMessage(string)"></member><member name="M:Reputation.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:Reputation.CancelInvoke"></member><member name="M:Reputation.CancelInvoke(string)"></member><member name="M:Reputation.CompareTag(string)"></member><member name="M:Reputation.Equals(object)"></member><member name="M:Reputation.Finalize"></member><member name="M:Reputation.GetComponent(System.Type)"></member><member name="M:Reputation.GetComponent"></member><member name="M:Reputation.GetComponent(string)"></member><member name="M:Reputation.GetComponentInChildren(System.Type)"></member><member name="M:Reputation.GetComponentInChildren"></member><member name="M:Reputation.GetComponentInParent(System.Type)"></member><member name="M:Reputation.GetComponentInParent"></member><member name="M:Reputation.GetComponents(System.Type)"></member><member name="M:Reputation.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:Reputation.GetComponents(List)"></member><member name="M:Reputation.GetComponents"></member><member name="M:Reputation.GetComponentsInChildren(System.Type)"></member><member name="M:Reputation.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:Reputation.GetComponentsInChildren(System.Boolean)"></member><member name="M:Reputation.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:Reputation.GetComponentsInChildren"></member><member name="M:Reputation.GetComponentsInChildren(List)"></member><member name="M:Reputation.GetComponentsInParent(System.Type)"></member><member name="M:Reputation.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:Reputation.GetComponentsInParent(System.Boolean)"></member><member name="M:Reputation.GetComponentsInParent(System.Boolean,List)"></member><member name="M:Reputation.GetComponentsInParent"></member><member name="M:Reputation.GetHashCode"></member><member name="M:Reputation.GetInstanceID"></member><member name="M:Reputation.GetType"></member><member name="M:Reputation.Invoke(string,System.Single)"></member><member name="M:Reputation.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:Reputation.IsInvoking(string)"></member><member name="M:Reputation.IsInvoking"></member><member name="M:Reputation.Load(ConfigNode)"></member><member name="M:Reputation.MemberwiseClone"></member><member name="M:Reputation.OnAwake"></member><member name="M:Reputation.OnLoad(ConfigNode)"></member><member name="M:Reputation.OnSave(ConfigNode)"></member><member name="M:Reputation.Save(ConfigNode)"></member><member name="M:Reputation.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:Reputation.SendMessage(string,object)"></member><member name="M:Reputation.SendMessage(string)"></member><member name="M:Reputation.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:Reputation.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:Reputation.SendMessageUpwards(string,object)"></member><member name="M:Reputation.SendMessageUpwards(string)"></member><member name="M:Reputation.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:Reputation.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:Reputation.StartCoroutine(string,object)"></member><member name="M:Reputation.StartCoroutine(string)"></member><member name="M:Reputation.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:Reputation.StopAllCoroutines"></member><member name="M:Reputation.StopCoroutine(string)"></member><member name="M:Reputation.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:Reputation.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:Reputation.ToString"></member><member name="M:Reputation.#ctor"></member><member name="T:ResearchAndDevelopment"></member><member name="F:ResearchAndDevelopment.runner"></member><member name="F:ResearchAndDevelopment.snapshot"></member><member name="F:ResearchAndDevelopment.targetScenes"></member><member name="F:ResearchAndDevelopment.Instance"></member><member name="P:ResearchAndDevelopment.ClassID"></member><member name="P:ResearchAndDevelopment.ClassName"></member><member name="P:ResearchAndDevelopment.enabled"></member><member name="P:ResearchAndDevelopment.Events"></member><member name="P:ResearchAndDevelopment.Fields"></member><member name="P:ResearchAndDevelopment.gameObject"></member><member name="P:ResearchAndDevelopment.hideFlags"></member><member name="P:ResearchAndDevelopment.isActiveAndEnabled"></member><member name="P:ResearchAndDevelopment.name"></member><member name="P:ResearchAndDevelopment.Science"></member><member name="P:ResearchAndDevelopment.tag"></member><member name="P:ResearchAndDevelopment.transform"></member><member name="P:ResearchAndDevelopment.useGUILayout"></member><member name="M:ResearchAndDevelopment.AddScience(System.Single,TransactionReasons)"></member><member name="M:ResearchAndDevelopment.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ResearchAndDevelopment.BroadcastMessage(string,object)"></member><member name="M:ResearchAndDevelopment.BroadcastMessage(string)"></member><member name="M:ResearchAndDevelopment.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:ResearchAndDevelopment.CancelInvoke"></member><member name="M:ResearchAndDevelopment.CancelInvoke(string)"></member><member name="M:ResearchAndDevelopment.CheatAddScience(System.Single)"></member><member name="M:ResearchAndDevelopment.CheatTechnology"></member><member name="M:ResearchAndDevelopment.CompareTag(string)"></member><member name="M:ResearchAndDevelopment.Equals(object)"></member><member name="M:ResearchAndDevelopment.Finalize"></member><member name="M:ResearchAndDevelopment.GetComponent(System.Type)"></member><member name="M:ResearchAndDevelopment.GetComponent"></member><member name="M:ResearchAndDevelopment.GetComponent(string)"></member><member name="M:ResearchAndDevelopment.GetComponentInChildren(System.Type)"></member><member name="M:ResearchAndDevelopment.GetComponentInChildren"></member><member name="M:ResearchAndDevelopment.GetComponentInParent(System.Type)"></member><member name="M:ResearchAndDevelopment.GetComponentInParent"></member><member name="M:ResearchAndDevelopment.GetComponents(System.Type)"></member><member name="M:ResearchAndDevelopment.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:ResearchAndDevelopment.GetComponents(List)"></member><member name="M:ResearchAndDevelopment.GetComponents"></member><member name="M:ResearchAndDevelopment.GetComponentsInChildren(System.Type)"></member><member name="M:ResearchAndDevelopment.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:ResearchAndDevelopment.GetComponentsInChildren(System.Boolean)"></member><member name="M:ResearchAndDevelopment.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:ResearchAndDevelopment.GetComponentsInChildren"></member><member name="M:ResearchAndDevelopment.GetComponentsInChildren(List)"></member><member name="M:ResearchAndDevelopment.GetComponentsInParent(System.Type)"></member><member name="M:ResearchAndDevelopment.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:ResearchAndDevelopment.GetComponentsInParent(System.Boolean)"></member><member name="M:ResearchAndDevelopment.GetComponentsInParent(System.Boolean,List)"></member><member name="M:ResearchAndDevelopment.GetComponentsInParent"></member><member name="M:ResearchAndDevelopment.GetHashCode"></member><member name="M:ResearchAndDevelopment.GetInstanceID"></member><member name="M:ResearchAndDevelopment.GetTechState(string)"></member><member name="M:ResearchAndDevelopment.GetType"></member><member name="M:ResearchAndDevelopment.Invoke(string,System.Single)"></member><member name="M:ResearchAndDevelopment.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:ResearchAndDevelopment.IsInvoking(string)"></member><member name="M:ResearchAndDevelopment.IsInvoking"></member><member name="M:ResearchAndDevelopment.Load(ConfigNode)"></member><member name="M:ResearchAndDevelopment.MemberwiseClone"></member><member name="M:ResearchAndDevelopment.OnAwake"></member><member name="M:ResearchAndDevelopment.OnDestroy"></member><member name="M:ResearchAndDevelopment.OnLoad(ConfigNode)"></member><member name="M:ResearchAndDevelopment.OnSave(ConfigNode)"></member><member name="M:ResearchAndDevelopment.Save(ConfigNode)"></member><member name="M:ResearchAndDevelopment.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ResearchAndDevelopment.SendMessage(string,object)"></member><member name="M:ResearchAndDevelopment.SendMessage(string)"></member><member name="M:ResearchAndDevelopment.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:ResearchAndDevelopment.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ResearchAndDevelopment.SendMessageUpwards(string,object)"></member><member name="M:ResearchAndDevelopment.SendMessageUpwards(string)"></member><member name="M:ResearchAndDevelopment.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:ResearchAndDevelopment.SetTechState(string,ProtoTechNode)"></member><member name="M:ResearchAndDevelopment.Start"></member><member name="M:ResearchAndDevelopment.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:ResearchAndDevelopment.StartCoroutine(string,object)"></member><member name="M:ResearchAndDevelopment.StartCoroutine(string)"></member><member name="M:ResearchAndDevelopment.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:ResearchAndDevelopment.StopAllCoroutines"></member><member name="M:ResearchAndDevelopment.StopCoroutine(string)"></member><member name="M:ResearchAndDevelopment.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:ResearchAndDevelopment.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:ResearchAndDevelopment.SubmitScienceData(System.Single,ScienceSubject,System.Single,ProtoVessel,System.Boolean)"></member><member name="M:ResearchAndDevelopment.ToString"></member><member name="M:ResearchAndDevelopment.AddExperimentalPart(AvailablePart)"></member><member name="M:ResearchAndDevelopment.CanAfford(System.Single)"></member><member name="M:ResearchAndDevelopment.CheckForMissingParts"></member><member name="M:ResearchAndDevelopment.CountUniversalScience"></member><member name="M:ResearchAndDevelopment.GetBiomeTags(CelestialBody)"></member><member name="M:ResearchAndDevelopment.GetExperiment(string)"></member><member name="M:ResearchAndDevelopment.GetExperimentIDs"></member><member name="M:ResearchAndDevelopment.GetExperimentSubject(ScienceExperiment,ExperimentSituations,CelestialBody,string)"><summary>For the given combination of conditions, find the ScienceSubject that records the science that we've retrieved thus far.</summary></member><member name="M:ResearchAndDevelopment.GetExperimentSubject(ScienceExperiment,ExperimentSituations,string,string,CelestialBody,string)"></member><member name="M:ResearchAndDevelopment.GetNextScienceValue(System.Single,ScienceSubject,System.Single)"></member><member name="M:ResearchAndDevelopment.GetReferenceDataValue(System.Single,ScienceSubject)"></member><member name="M:ResearchAndDevelopment.GetResults(string)"></member><member name="M:ResearchAndDevelopment.GetScienceValue(System.Single,ScienceSubject,System.Single)"></member><member name="M:ResearchAndDevelopment.GetSituationTags"></member><member name="M:ResearchAndDevelopment.GetSubjectByID(string)"></member><member name="M:ResearchAndDevelopment.GetSubjects"></member><member name="M:ResearchAndDevelopment.GetSubjectValue(System.Single,ScienceSubject)"><summary>A value from 0 to 1, indicating the fraction of "undiscovered" science for that subject that remains to be discovered. For example, in a fresh career where no science has been gathered yet, all subjects will return 1.  A subject that has been completely "mined out" will return 0.  The subjectScience parameter indicates how much science has already been acquired for that subject.  The subject parameter provides the information about science cap (i.e. what's the max possible science obtainable for that subject).</summary></member><member name="M:ResearchAndDevelopment.GetTechnologyState(string)"></member><member name="M:ResearchAndDevelopment.IsExperimentalPart(AvailablePart)"></member><member name="M:ResearchAndDevelopment.PartAssignmentSummary"></member><member name="M:ResearchAndDevelopment.PartModelPurchased(AvailablePart)"></member><member name="M:ResearchAndDevelopment.PartTechAvailable(AvailablePart)"></member><member name="M:ResearchAndDevelopment.RemoveExperimentalPart(AvailablePart)"></member><member name="M:ResearchAndDevelopment.ScienceTransmissionRewardString(System.Single,TransactionReasons)"></member><member name="M:ResearchAndDevelopment.#ctor"></member><member name="T:ResourceFlowMode"><summary>An enumeration of the different behaviors resources can have with respect to fuel flow.</summary></member><member name="T:ScaledSpace"><summary>A class that handles the transformations between the scaled-down coordinate system used by the map view and the  regular coordinate system used by the main flight view and the physics.</summary></member><member name="F:ScaledSpace.originTarget"></member><member name="F:ScaledSpace.scaledSpaceTransforms"></member><member name="F:ScaledSpace.scaleFactor"></member><member name="P:ScaledSpace.enabled"></member><member name="P:ScaledSpace.gameObject"></member><member name="P:ScaledSpace.hideFlags"></member><member name="P:ScaledSpace.isActiveAndEnabled"></member><member name="P:ScaledSpace.name"></member><member name="P:ScaledSpace.tag"></member><member name="P:ScaledSpace.transform"></member><member name="P:ScaledSpace.useGUILayout"></member><member name="P:ScaledSpace.Instance"></member><member name="P:ScaledSpace.InverseScaleFactor"></member><member name="P:ScaledSpace.ScaleFactor"><summary>"Scaled space" is the coordinate system used by the planetarium view. It's the same coordinate system as the world coordinates used by the physics, except scaled down by this scale factor.</summary></member><member name="P:ScaledSpace.SceneTransform"></member><member name="M:ScaledSpace.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ScaledSpace.BroadcastMessage(string,object)"></member><member name="M:ScaledSpace.BroadcastMessage(string)"></member><member name="M:ScaledSpace.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:ScaledSpace.CancelInvoke"></member><member name="M:ScaledSpace.CancelInvoke(string)"></member><member name="M:ScaledSpace.CompareTag(string)"></member><member name="M:ScaledSpace.Equals(object)"></member><member name="M:ScaledSpace.Finalize"></member><member name="M:ScaledSpace.GetComponent(System.Type)"></member><member name="M:ScaledSpace.GetComponent"></member><member name="M:ScaledSpace.GetComponent(string)"></member><member name="M:ScaledSpace.GetComponentInChildren(System.Type)"></member><member name="M:ScaledSpace.GetComponentInChildren"></member><member name="M:ScaledSpace.GetComponentInParent(System.Type)"></member><member name="M:ScaledSpace.GetComponentInParent"></member><member name="M:ScaledSpace.GetComponents(System.Type)"></member><member name="M:ScaledSpace.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:ScaledSpace.GetComponents(List)"></member><member name="M:ScaledSpace.GetComponents"></member><member name="M:ScaledSpace.GetComponentsInChildren(System.Type)"></member><member name="M:ScaledSpace.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:ScaledSpace.GetComponentsInChildren(System.Boolean)"></member><member name="M:ScaledSpace.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:ScaledSpace.GetComponentsInChildren"></member><member name="M:ScaledSpace.GetComponentsInChildren(List)"></member><member name="M:ScaledSpace.GetComponentsInParent(System.Type)"></member><member name="M:ScaledSpace.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:ScaledSpace.GetComponentsInParent(System.Boolean)"></member><member name="M:ScaledSpace.GetComponentsInParent(System.Boolean,List)"></member><member name="M:ScaledSpace.GetComponentsInParent"></member><member name="M:ScaledSpace.GetHashCode"></member><member name="M:ScaledSpace.GetInstanceID"></member><member name="M:ScaledSpace.GetType"></member><member name="M:ScaledSpace.Invoke(string,System.Single)"></member><member name="M:ScaledSpace.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:ScaledSpace.IsInvoking(string)"></member><member name="M:ScaledSpace.IsInvoking"></member><member name="M:ScaledSpace.MemberwiseClone"></member><member name="M:ScaledSpace.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ScaledSpace.SendMessage(string,object)"></member><member name="M:ScaledSpace.SendMessage(string)"></member><member name="M:ScaledSpace.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:ScaledSpace.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ScaledSpace.SendMessageUpwards(string,object)"></member><member name="M:ScaledSpace.SendMessageUpwards(string)"></member><member name="M:ScaledSpace.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:ScaledSpace.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:ScaledSpace.StartCoroutine(string,object)"></member><member name="M:ScaledSpace.StartCoroutine(string)"></member><member name="M:ScaledSpace.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:ScaledSpace.StopAllCoroutines"></member><member name="M:ScaledSpace.StopCoroutine(string)"></member><member name="M:ScaledSpace.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:ScaledSpace.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:ScaledSpace.ToString"></member><member name="M:ScaledSpace.AddScaledSpaceObject(MapObject)"></member><member name="M:ScaledSpace.AddScaledSpaceTransform(Transform)"></member><member name="M:ScaledSpace.LocalToScaledSpace(Vector3d)"><summary>Convert a position in world coordinates into a position in planetarium coordinates.</summary><param name="localSpacePoint">A position in world coordinates</param><returns>The corresponding position in planetarium coordinates</returns></member><member name="M:ScaledSpace.RemoveScaledSpaceObject(MapObject)"></member><member name="M:ScaledSpace.RemoveScaledSpaceTransform(Transform)"></member><member name="M:ScaledSpace.ScaledToLocalSpace(Vector3d)"><summary>Convert a position in planetarium coordinates into a position in world coordinates.</summary><param name="scaledSpacePoint">A position in planetarium coordinates.</param><returns>The corresponding position in world coordinates.</returns></member><member name="M:ScaledSpace.#ctor"></member><member name="T:ScenarioCreationOptions"><summary>A list of options for use with the KSPScenario attribute.</summary></member><member name="T:ScenarioDiscoverableObjects"><summary>Stores information on asteroid spawning  Executed while in Flight, Tracking Station, and Space Center scenes The module schedules periodic "spawn checks" while the game clock is running, at an interval  set by spawnInterval. At each spawn check, any asteroids that have gone untracked for too long  are removed from the game.  To add an element of randomness, only a fraction of checks (controlled by spawnOddsAgainst)  have a chance to produce asteroids. No asteroids are produced if the number of untracked  asteroids already in the game exceeds spawnGroupMaxLimit. Because spawn checks happen  very frequently, the number of detected asteroids in a game where the player never  tracks an asteroid will almost always be close to spawnGroupMaxLimit.</summary></member><member name="F:ScenarioDiscoverableObjects.lastSeed"></member><member name="F:ScenarioDiscoverableObjects.maxUntrackedLifetime"><summary>Longest time an asteroid can go untracked before disappearing, in Earth days</summary><seealso cref="DiscoveryInfo.unobservedLifetime"/></member><member name="F:ScenarioDiscoverableObjects.minUntrackedLifetime"><summary>Shortest time an asteroid can go untracked before disappearing, in Earth days</summary><seealso cref="DiscoveryInfo.unobservedLifetime"/></member><member name="F:ScenarioDiscoverableObjects.runner"></member><member name="F:ScenarioDiscoverableObjects.sizeCurve"><summary>Sets size distribution for asteroids  The output range of [0, 1) is divided equally among the classes. So [0, 0.2) is class A,  [0.2, 0.4) is class B, ..., [0.8, 1) is class E. Default curve translates to 	12% class A, 13% class B, 49% class C, 13% class D, and 12% class E</summary></member><member name="F:ScenarioDiscoverableObjects.snapshot"></member><member name="F:ScenarioDiscoverableObjects.spawnGroupMaxLimit"><summary>Number of untracked asteroids at which spawn rate stops completely</summary></member><member name="F:ScenarioDiscoverableObjects.spawnGroupMinLimit"><summary>Number of untracked asteroids at which spawn rate begins to slow</summary></member><member name="F:ScenarioDiscoverableObjects.spawnInterval"><summary>Number of seconds between asteroid checks  These are approximately seconds of in-game time, but if you make sudden changes  in the time warp rate the spawner may need some time to catch up. Since asteroids are removed during spawn checks, spawnInterval also controls the  asteroid removal rate.</summary></member><member name="F:ScenarioDiscoverableObjects.spawnOddsAgainst"><summary>Controls the fraction of spawn checks in which new asteroids are generated  The probability of spawning an asteroid is 1 / (1 + spawnOddsAgainst)</summary></member><member name="F:ScenarioDiscoverableObjects.targetScenes"></member><member name="P:ScenarioDiscoverableObjects.ClassID"></member><member name="P:ScenarioDiscoverableObjects.ClassName"></member><member name="P:ScenarioDiscoverableObjects.enabled"></member><member name="P:ScenarioDiscoverableObjects.Events"></member><member name="P:ScenarioDiscoverableObjects.Fields"></member><member name="P:ScenarioDiscoverableObjects.gameObject"></member><member name="P:ScenarioDiscoverableObjects.hideFlags"></member><member name="P:ScenarioDiscoverableObjects.isActiveAndEnabled"></member><member name="P:ScenarioDiscoverableObjects.name"></member><member name="P:ScenarioDiscoverableObjects.tag"></member><member name="P:ScenarioDiscoverableObjects.transform"></member><member name="P:ScenarioDiscoverableObjects.useGUILayout"></member><member name="M:ScenarioDiscoverableObjects.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ScenarioDiscoverableObjects.BroadcastMessage(string,object)"></member><member name="M:ScenarioDiscoverableObjects.BroadcastMessage(string)"></member><member name="M:ScenarioDiscoverableObjects.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:ScenarioDiscoverableObjects.CancelInvoke"></member><member name="M:ScenarioDiscoverableObjects.CancelInvoke(string)"></member><member name="M:ScenarioDiscoverableObjects.CompareTag(string)"></member><member name="M:ScenarioDiscoverableObjects.DebugSpawnProbability"></member><member name="M:ScenarioDiscoverableObjects.debugSpawnProbability"><summary>Returns a description of the current spawn interval and spawn odds</summary><seealso cref="spawnOddsAgainst"/><seealso cref="spawnInterval"/></member><member name="M:ScenarioDiscoverableObjects.Equals(object)"></member><member name="M:ScenarioDiscoverableObjects.Finalize"></member><member name="M:ScenarioDiscoverableObjects.GetComponent(System.Type)"></member><member name="M:ScenarioDiscoverableObjects.GetComponent"></member><member name="M:ScenarioDiscoverableObjects.GetComponent(string)"></member><member name="M:ScenarioDiscoverableObjects.GetComponentInChildren(System.Type)"></member><member name="M:ScenarioDiscoverableObjects.GetComponentInChildren"></member><member name="M:ScenarioDiscoverableObjects.GetComponentInParent(System.Type)"></member><member name="M:ScenarioDiscoverableObjects.GetComponentInParent"></member><member name="M:ScenarioDiscoverableObjects.GetComponents(System.Type)"></member><member name="M:ScenarioDiscoverableObjects.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:ScenarioDiscoverableObjects.GetComponents(List)"></member><member name="M:ScenarioDiscoverableObjects.GetComponents"></member><member name="M:ScenarioDiscoverableObjects.GetComponentsInChildren(System.Type)"></member><member name="M:ScenarioDiscoverableObjects.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:ScenarioDiscoverableObjects.GetComponentsInChildren(System.Boolean)"></member><member name="M:ScenarioDiscoverableObjects.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:ScenarioDiscoverableObjects.GetComponentsInChildren"></member><member name="M:ScenarioDiscoverableObjects.GetComponentsInChildren(List)"></member><member name="M:ScenarioDiscoverableObjects.GetComponentsInParent(System.Type)"></member><member name="M:ScenarioDiscoverableObjects.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:ScenarioDiscoverableObjects.GetComponentsInParent(System.Boolean)"></member><member name="M:ScenarioDiscoverableObjects.GetComponentsInParent(System.Boolean,List)"></member><member name="M:ScenarioDiscoverableObjects.GetComponentsInParent"></member><member name="M:ScenarioDiscoverableObjects.GetHashCode"></member><member name="M:ScenarioDiscoverableObjects.GetInstanceID"></member><member name="M:ScenarioDiscoverableObjects.GetType"></member><member name="M:ScenarioDiscoverableObjects.Invoke(string,System.Single)"></member><member name="M:ScenarioDiscoverableObjects.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:ScenarioDiscoverableObjects.IsInvoking(string)"></member><member name="M:ScenarioDiscoverableObjects.IsInvoking"></member><member name="M:ScenarioDiscoverableObjects.Load(ConfigNode)"></member><member name="M:ScenarioDiscoverableObjects.MemberwiseClone"></member><member name="M:ScenarioDiscoverableObjects.OnAwake"></member><member name="M:ScenarioDiscoverableObjects.OnLoad(ConfigNode)"></member><member name="M:ScenarioDiscoverableObjects.OnSave(ConfigNode)"></member><member name="M:ScenarioDiscoverableObjects.Save(ConfigNode)"></member><member name="M:ScenarioDiscoverableObjects.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ScenarioDiscoverableObjects.SendMessage(string,object)"></member><member name="M:ScenarioDiscoverableObjects.SendMessage(string)"></member><member name="M:ScenarioDiscoverableObjects.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:ScenarioDiscoverableObjects.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ScenarioDiscoverableObjects.SendMessageUpwards(string,object)"></member><member name="M:ScenarioDiscoverableObjects.SendMessageUpwards(string)"></member><member name="M:ScenarioDiscoverableObjects.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:ScenarioDiscoverableObjects.SpawnAsteroid"><summary>Creates a random asteroid and Kerbin-intercepting orbit</summary></member><member name="M:ScenarioDiscoverableObjects.SpawnDresAsteroid(System.Int32)"></member><member name="M:ScenarioDiscoverableObjects.SpawnHomeAsteroid(System.Int32)"></member><member name="M:ScenarioDiscoverableObjects.SpawnLastAsteroid"><summary>Creates a random asteroid and Kerbin-intercepting orbit.</summary><seealso cref="SpawnAsteroid()"/><remarks>Asteroid is identical to the last 	call of SpawnAsteroid()&lt;/seealso&gt; Intended for debugging?</remarks></member><member name="M:ScenarioDiscoverableObjects.Start"></member><member name="M:ScenarioDiscoverableObjects.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:ScenarioDiscoverableObjects.StartCoroutine(string,object)"></member><member name="M:ScenarioDiscoverableObjects.StartCoroutine(string)"></member><member name="M:ScenarioDiscoverableObjects.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:ScenarioDiscoverableObjects.StopAllCoroutines"></member><member name="M:ScenarioDiscoverableObjects.StopCoroutine(string)"></member><member name="M:ScenarioDiscoverableObjects.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:ScenarioDiscoverableObjects.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:ScenarioDiscoverableObjects.ToString"></member><member name="M:ScenarioDiscoverableObjects.#ctor"></member><member name="T:ScenarioModule"></member><member name="F:ScenarioModule.runner"></member><member name="F:ScenarioModule.snapshot"></member><member name="F:ScenarioModule.targetScenes"></member><member name="P:ScenarioModule.ClassID"></member><member name="P:ScenarioModule.ClassName"></member><member name="P:ScenarioModule.enabled"></member><member name="P:ScenarioModule.Events"></member><member name="P:ScenarioModule.Fields"></member><member name="P:ScenarioModule.gameObject"></member><member name="P:ScenarioModule.hideFlags"></member><member name="P:ScenarioModule.isActiveAndEnabled"></member><member name="P:ScenarioModule.name"></member><member name="P:ScenarioModule.tag"></member><member name="P:ScenarioModule.transform"></member><member name="P:ScenarioModule.useGUILayout"></member><member name="M:ScenarioModule.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ScenarioModule.BroadcastMessage(string,object)"></member><member name="M:ScenarioModule.BroadcastMessage(string)"></member><member name="M:ScenarioModule.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:ScenarioModule.CancelInvoke"></member><member name="M:ScenarioModule.CancelInvoke(string)"></member><member name="M:ScenarioModule.CompareTag(string)"></member><member name="M:ScenarioModule.Equals(object)"></member><member name="M:ScenarioModule.Finalize"></member><member name="M:ScenarioModule.GetComponent(System.Type)"></member><member name="M:ScenarioModule.GetComponent"></member><member name="M:ScenarioModule.GetComponent(string)"></member><member name="M:ScenarioModule.GetComponentInChildren(System.Type)"></member><member name="M:ScenarioModule.GetComponentInChildren"></member><member name="M:ScenarioModule.GetComponentInParent(System.Type)"></member><member name="M:ScenarioModule.GetComponentInParent"></member><member name="M:ScenarioModule.GetComponents(System.Type)"></member><member name="M:ScenarioModule.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:ScenarioModule.GetComponents(List)"></member><member name="M:ScenarioModule.GetComponents"></member><member name="M:ScenarioModule.GetComponentsInChildren(System.Type)"></member><member name="M:ScenarioModule.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:ScenarioModule.GetComponentsInChildren(System.Boolean)"></member><member name="M:ScenarioModule.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:ScenarioModule.GetComponentsInChildren"></member><member name="M:ScenarioModule.GetComponentsInChildren(List)"></member><member name="M:ScenarioModule.GetComponentsInParent(System.Type)"></member><member name="M:ScenarioModule.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:ScenarioModule.GetComponentsInParent(System.Boolean)"></member><member name="M:ScenarioModule.GetComponentsInParent(System.Boolean,List)"></member><member name="M:ScenarioModule.GetComponentsInParent"></member><member name="M:ScenarioModule.GetHashCode"></member><member name="M:ScenarioModule.GetInstanceID"></member><member name="M:ScenarioModule.GetType"></member><member name="M:ScenarioModule.Invoke(string,System.Single)"></member><member name="M:ScenarioModule.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:ScenarioModule.IsInvoking(string)"></member><member name="M:ScenarioModule.IsInvoking"></member><member name="M:ScenarioModule.Load(ConfigNode)"></member><member name="M:ScenarioModule.MemberwiseClone"></member><member name="M:ScenarioModule.OnAwake"><summary>Called when the module is activated for the first time after a scene change, before OnLoad.</summary></member><member name="M:ScenarioModule.OnLoad(ConfigNode)"><summary>Called just after the savegame is loaded (including after every scene change [assuming, of course, that this class's KSPScenario attribute dictates that it's active in the target scene]), before MonoBehaviour.Start.</summary><param name="node">The ConfigNode containing this ScenarioModule's data, loaded from the persistence file.</param></member><member name="M:ScenarioModule.OnSave(ConfigNode)"><summary>Called just before the game is saved (including before scene changes).</summary><param name="node">The ConfigNode containing this ScenarioModule's data, that is about to be saved to the persistence file.</param></member><member name="M:ScenarioModule.Save(ConfigNode)"></member><member name="M:ScenarioModule.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ScenarioModule.SendMessage(string,object)"></member><member name="M:ScenarioModule.SendMessage(string)"></member><member name="M:ScenarioModule.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:ScenarioModule.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ScenarioModule.SendMessageUpwards(string,object)"></member><member name="M:ScenarioModule.SendMessageUpwards(string)"></member><member name="M:ScenarioModule.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:ScenarioModule.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:ScenarioModule.StartCoroutine(string,object)"></member><member name="M:ScenarioModule.StartCoroutine(string)"></member><member name="M:ScenarioModule.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:ScenarioModule.StopAllCoroutines"></member><member name="M:ScenarioModule.StopCoroutine(string)"></member><member name="M:ScenarioModule.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:ScenarioModule.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:ScenarioModule.ToString"></member><member name="M:ScenarioModule.#ctor"></member><member name="T:ScenarioUpgradeableFacilities"></member><member name="F:ScenarioUpgradeableFacilities.runner"></member><member name="F:ScenarioUpgradeableFacilities.snapshot"></member><member name="F:ScenarioUpgradeableFacilities.targetScenes"></member><member name="F:ScenarioUpgradeableFacilities.Instance"></member><member name="F:ScenarioUpgradeableFacilities.protoUpgradeables"></member><member name="P:ScenarioUpgradeableFacilities.ClassID"></member><member name="P:ScenarioUpgradeableFacilities.ClassName"></member><member name="P:ScenarioUpgradeableFacilities.enabled"></member><member name="P:ScenarioUpgradeableFacilities.Events"></member><member name="P:ScenarioUpgradeableFacilities.Fields"></member><member name="P:ScenarioUpgradeableFacilities.gameObject"></member><member name="P:ScenarioUpgradeableFacilities.hideFlags"></member><member name="P:ScenarioUpgradeableFacilities.isActiveAndEnabled"></member><member name="P:ScenarioUpgradeableFacilities.name"></member><member name="P:ScenarioUpgradeableFacilities.tag"></member><member name="P:ScenarioUpgradeableFacilities.transform"></member><member name="P:ScenarioUpgradeableFacilities.useGUILayout"></member><member name="M:ScenarioUpgradeableFacilities.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ScenarioUpgradeableFacilities.BroadcastMessage(string,object)"></member><member name="M:ScenarioUpgradeableFacilities.BroadcastMessage(string)"></member><member name="M:ScenarioUpgradeableFacilities.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:ScenarioUpgradeableFacilities.CancelInvoke"></member><member name="M:ScenarioUpgradeableFacilities.CancelInvoke(string)"></member><member name="M:ScenarioUpgradeableFacilities.CheatFacilities"></member><member name="M:ScenarioUpgradeableFacilities.CompareTag(string)"></member><member name="M:ScenarioUpgradeableFacilities.Equals(object)"></member><member name="M:ScenarioUpgradeableFacilities.Finalize"></member><member name="M:ScenarioUpgradeableFacilities.GetComponent(System.Type)"></member><member name="M:ScenarioUpgradeableFacilities.GetComponent"></member><member name="M:ScenarioUpgradeableFacilities.GetComponent(string)"></member><member name="M:ScenarioUpgradeableFacilities.GetComponentInChildren(System.Type)"></member><member name="M:ScenarioUpgradeableFacilities.GetComponentInChildren"></member><member name="M:ScenarioUpgradeableFacilities.GetComponentInParent(System.Type)"></member><member name="M:ScenarioUpgradeableFacilities.GetComponentInParent"></member><member name="M:ScenarioUpgradeableFacilities.GetComponents(System.Type)"></member><member name="M:ScenarioUpgradeableFacilities.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:ScenarioUpgradeableFacilities.GetComponents(List)"></member><member name="M:ScenarioUpgradeableFacilities.GetComponents"></member><member name="M:ScenarioUpgradeableFacilities.GetComponentsInChildren(System.Type)"></member><member name="M:ScenarioUpgradeableFacilities.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:ScenarioUpgradeableFacilities.GetComponentsInChildren(System.Boolean)"></member><member name="M:ScenarioUpgradeableFacilities.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:ScenarioUpgradeableFacilities.GetComponentsInChildren"></member><member name="M:ScenarioUpgradeableFacilities.GetComponentsInChildren(List)"></member><member name="M:ScenarioUpgradeableFacilities.GetComponentsInParent(System.Type)"></member><member name="M:ScenarioUpgradeableFacilities.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:ScenarioUpgradeableFacilities.GetComponentsInParent(System.Boolean)"></member><member name="M:ScenarioUpgradeableFacilities.GetComponentsInParent(System.Boolean,List)"></member><member name="M:ScenarioUpgradeableFacilities.GetComponentsInParent"></member><member name="M:ScenarioUpgradeableFacilities.GetHashCode"></member><member name="M:ScenarioUpgradeableFacilities.GetInstanceID"></member><member name="M:ScenarioUpgradeableFacilities.GetType"></member><member name="M:ScenarioUpgradeableFacilities.Invoke(string,System.Single)"></member><member name="M:ScenarioUpgradeableFacilities.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:ScenarioUpgradeableFacilities.IsInvoking(string)"></member><member name="M:ScenarioUpgradeableFacilities.IsInvoking"></member><member name="M:ScenarioUpgradeableFacilities.Load(ConfigNode)"></member><member name="M:ScenarioUpgradeableFacilities.MemberwiseClone"></member><member name="M:ScenarioUpgradeableFacilities.OnAwake"></member><member name="M:ScenarioUpgradeableFacilities.OnDestroy"></member><member name="M:ScenarioUpgradeableFacilities.OnLoad(ConfigNode)"></member><member name="M:ScenarioUpgradeableFacilities.OnSave(ConfigNode)"></member><member name="M:ScenarioUpgradeableFacilities.Save(ConfigNode)"></member><member name="M:ScenarioUpgradeableFacilities.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ScenarioUpgradeableFacilities.SendMessage(string,object)"></member><member name="M:ScenarioUpgradeableFacilities.SendMessage(string)"></member><member name="M:ScenarioUpgradeableFacilities.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:ScenarioUpgradeableFacilities.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ScenarioUpgradeableFacilities.SendMessageUpwards(string,object)"></member><member name="M:ScenarioUpgradeableFacilities.SendMessageUpwards(string)"></member><member name="M:ScenarioUpgradeableFacilities.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:ScenarioUpgradeableFacilities.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:ScenarioUpgradeableFacilities.StartCoroutine(string,object)"></member><member name="M:ScenarioUpgradeableFacilities.StartCoroutine(string)"></member><member name="M:ScenarioUpgradeableFacilities.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:ScenarioUpgradeableFacilities.StopAllCoroutines"></member><member name="M:ScenarioUpgradeableFacilities.StopCoroutine(string)"></member><member name="M:ScenarioUpgradeableFacilities.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:ScenarioUpgradeableFacilities.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:ScenarioUpgradeableFacilities.ToString"></member><member name="M:ScenarioUpgradeableFacilities.GetFacilityLevel(SpaceCenterFacility)"><summary>Returns a float representing the current level of a given facility. it varies between 0, the entry level and 1 the max level.</summary></member><member name="M:ScenarioUpgradeableFacilities.GetFacilityLevel(string)"></member><member name="M:ScenarioUpgradeableFacilities.GetFacilityLevelCount(SpaceCenterFacility)"><summary>Gets the count of levels for this facility. E.g. 3 for most facilities (as of 1.1)</summary></member><member name="M:ScenarioUpgradeableFacilities.GetFacilityLevelCount(string)"></member><member name="M:ScenarioUpgradeableFacilities.RegisterUpgradeable(Upgradeables.UpgradeableFacility,string)"></member><member name="M:ScenarioUpgradeableFacilities.UnregisterUpgradeable(Upgradeables.UpgradeableFacility,string)"></member><member name="M:ScenarioUpgradeableFacilities.#ctor"></member><member name="T:ScienceData"><summary>Class containing information on science reports, stored in the persistent file in modules using IScienceDataContainer.</summary></member><member name="F:ScienceData.container"></member><member name="F:ScienceData.dataAmount"><summary>Amount of data, in mits, to be transmitted or recovered. Affects transmission time and energy usage.</summary></member><member name="F:ScienceData.labBoost"><summary>Level of science lab boost, less than 1 is un-boosted, 1.5 is the standard lab boosted value, higher levels don't appear to be used.</summary></member><member name="F:ScienceData.labValue"></member><member name="F:ScienceData.subjectID"><summary>ID of science data in Experimentname@CelestialbodynameExperimentalsituationBiome format, matches Science Subject id.</summary></member><member name="F:ScienceData.title"><summary>Science data title, displayed on experimental results dialog page and recovery summary.</summary></member><member name="F:ScienceData.transmitValue"><summary>Percentage of science value that can be transmitted. 1 is equal to the amount gained by returning to Kerbin.</summary></member><member name="F:ScienceData.triggered"></member><member name="M:ScienceData.Equals(object)"></member><member name="M:ScienceData.Finalize"></member><member name="M:ScienceData.GetHashCode"></member><member name="M:ScienceData.GetType"></member><member name="M:ScienceData.Load(ConfigNode)"></member><member name="M:ScienceData.MemberwiseClone"></member><member name="M:ScienceData.Save(ConfigNode)"></member><member name="M:ScienceData.ToString"></member><member name="M:ScienceData.CopyOf(ScienceData)"></member><member name="M:ScienceData.#ctor(ConfigNode)"></member><member name="M:ScienceData.#ctor(System.Single,System.Single,System.Single,string,string,System.Boolean,System.UInt32)"></member><member name="M:ScienceData.#ctor(System.Single,System.Single,System.Single,string,string)"><summary>Generate Science Data based on Science Subject values.</summary><param name="amount">Amount of data, it mits.</param><param name="xmitValue">Transmission value</param><param name="labBoost">Current state of science lab boost</param><param name="id">Matches Science Subject ID</param><param name="dataName">Title of science data</param></member><member name="T:ScienceExperiment"><summary>Class containing information from the experiment stored in the ScienceDefs file.</summary></member><member name="F:ScienceExperiment.baseValue"><summary>Base science value from ScienceDefs file.</summary></member><member name="F:ScienceExperiment.biomeMask"><summary>Bitmask to determine when biomes are relevant.</summary></member><member name="F:ScienceExperiment.dataScale"><summary>Multiplier to increase data amount in mits.</summary></member><member name="F:ScienceExperiment.experimentTitle"><summary>Title to be displayed for experimental results dialog and science archives.</summary></member><member name="F:ScienceExperiment.id"><summary>Matches ID from ModuleScienceExperiment field.</summary></member><member name="F:ScienceExperiment.requireAtmosphere"><summary>Can the experiment only be performed on planets with an atmosphere?</summary></member><member name="F:ScienceExperiment.requiredExperimentLevel"></member><member name="F:ScienceExperiment.scienceCap"><summary>Maximum science value available for each experimental result.</summary></member><member name="F:ScienceExperiment.situationMask"><summary>Bitmask to determine which Experiment Situations the experiment can be performed in.</summary></member><member name="P:ScienceExperiment.Results"></member><member name="M:ScienceExperiment.BiomeIsRelevantWhile(ExperimentSituations)"><summary>Checks if the biome is relevent to the experiment given the biomeMask specified in the ScienceDefs file.</summary><param name="situation">Current Experiment Situation</param><returns/></member><member name="M:ScienceExperiment.Equals(object)"></member><member name="M:ScienceExperiment.Finalize"></member><member name="M:ScienceExperiment.GetHashCode"></member><member name="M:ScienceExperiment.GetType"></member><member name="M:ScienceExperiment.IsAvailableWhile(ExperimentSituations,CelestialBody)"><summary>Determines if the experiment is available given the situationMask and requireAtmosphere values specified in the ScienceDefs file.</summary><param name="situation">Current Experiment Situation</param><param name="body">Current Celestial Body</param><returns/></member><member name="M:ScienceExperiment.IsUnlocked"></member><member name="M:ScienceExperiment.Load(ConfigNode)"></member><member name="M:ScienceExperiment.MemberwiseClone"></member><member name="M:ScienceExperiment.Save(ConfigNode)"></member><member name="M:ScienceExperiment.ToString"></member><member name="M:ScienceExperiment.#ctor"></member><member name="T:ScienceSubject"><summary>Class containing information on a specific science result, data stored in the persistent file under the R&amp;amp;D node.</summary></member><member name="F:ScienceSubject.dataScale"><summary>Multiply science value by this dataScale value to determine data amount in mits.</summary></member><member name="F:ScienceSubject.id"><summary>Subject ID in Experimentname@CelestialbodyExperimentalsituationBiome format</summary></member><member name="F:ScienceSubject.science"><summary>Amount of science already earned from this subject, not updated until after transmission/recovery.</summary></member><member name="F:ScienceSubject.scienceCap"><summary>Total science allowable for this subject, based on subjectValue.</summary></member><member name="F:ScienceSubject.scientificValue"><summary>Diminishing value multiplier for decreasing the science value returned from repeated experiments.</summary></member><member name="F:ScienceSubject.subjectValue"><summary>Multiplier for specific Celestial Body/Experiment Situation combination.</summary></member><member name="F:ScienceSubject.title"><summary>Title of science subject, displayed in science archives.</summary></member><member name="M:ScienceSubject.Equals(object)"></member><member name="M:ScienceSubject.Finalize"></member><member name="M:ScienceSubject.GetHashCode"></member><member name="M:ScienceSubject.GetType"></member><member name="M:ScienceSubject.HasPartialIDstring(string)"></member><member name="M:ScienceSubject.IsFromBody(CelestialBody)"></member><member name="M:ScienceSubject.IsFromSituation(ExperimentSituations)"></member><member name="M:ScienceSubject.Load(ConfigNode)"></member><member name="M:ScienceSubject.MemberwiseClone"></member><member name="M:ScienceSubject.Save(ConfigNode)"></member><member name="M:ScienceSubject.ToString"></member><member name="M:ScienceSubject.#ctor(string,string,System.Single,System.Single,System.Single)"></member><member name="M:ScienceSubject.#ctor(ScienceExperiment,ExperimentSituations,CelestialBody,string)"><summary>Generate new Science Subject.</summary><param name="exp">Science Experiment from ScienceDefs file and ModuleScienceExperiment</param><param name="sit">Current experimantal situation, based on VesselSituation</param><param name="body">Current Celestial Body</param><param name="biome">Current biome if applicable, empty string if not</param></member><member name="M:ScienceSubject.#ctor(ScienceExperiment,ExperimentSituations,string,string,CelestialBody,string)"></member><member name="M:ScienceSubject.#ctor(ConfigNode)"><summary>Return a Science Subject from Research and Development node in the persistent file.</summary><param name="node"/></member><member name="T:ScreenMessage"><summary>A class representing temporary messages posted to the screen. Don't use this class, use the static methods in ScreenMessages instead.</summary></member><member name="F:ScreenMessage.color"></member><member name="F:ScreenMessage.duration"></member><member name="F:ScreenMessage.guiStyleOverride"></member><member name="F:ScreenMessage.message"></member><member name="F:ScreenMessage.persistAcrossScenes"></member><member name="F:ScreenMessage.startTime"></member><member name="F:ScreenMessage.style"></member><member name="F:ScreenMessage.textInstance"></member><member name="M:ScreenMessage.Equals(object)"></member><member name="M:ScreenMessage.Finalize"></member><member name="M:ScreenMessage.GetHashCode"></member><member name="M:ScreenMessage.GetType"></member><member name="M:ScreenMessage.MemberwiseClone"></member><member name="M:ScreenMessage.ToString"></member><member name="M:ScreenMessage.#ctor(string,System.Single,ScreenMessageStyle)"></member><member name="M:ScreenMessage.#ctor(string,System.Single,System.Boolean,ScreenMessageStyle)"></member><member name="M:ScreenMessage.#ctor(string,System.Single,ScreenMessageStyle,GUIStyle)"></member><member name="M:ScreenMessage.#ctor(string,System.Single,System.Boolean,ScreenMessageStyle,GUIStyle)"></member><member name="T:ScreenMessages"><summary>A class that lets you post temporary messages to the screen. If you use this class your messages will automatically have the same style as regular in-game messages.</summary></member><member name="F:ScreenMessages.activeMessages"><summary>The set of currently active screen messages. This is a non-static member, but you can get a reference to the ScreenMessages instance via</summary><code>ScreenMessages sm = (ScreenMessages)GameObject.FindObjectOfType(typeof(ScreenMessages));</code></member><member name="F:ScreenMessages.defaultColor"></member><member name="F:ScreenMessages.lifetimeGradient"></member><member name="F:ScreenMessages.lowerCenter"></member><member name="F:ScreenMessages.textPrefab"></member><member name="F:ScreenMessages.textStyles"></member><member name="F:ScreenMessages.upperCenter"></member><member name="F:ScreenMessages.upperLeft"></member><member name="F:ScreenMessages.upperRight"></member><member name="F:ScreenMessages.useLifetimeGradient"></member><member name="F:ScreenMessages.useRenderQueue"></member><member name="P:ScreenMessages.ActiveMessages"></member><member name="P:ScreenMessages.enabled"></member><member name="P:ScreenMessages.gameObject"></member><member name="P:ScreenMessages.hideFlags"></member><member name="P:ScreenMessages.isActiveAndEnabled"></member><member name="P:ScreenMessages.name"></member><member name="P:ScreenMessages.tag"></member><member name="P:ScreenMessages.transform"></member><member name="P:ScreenMessages.useGUILayout"></member><member name="P:ScreenMessages.Instance"></member><member name="M:ScreenMessages.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ScreenMessages.BroadcastMessage(string,object)"></member><member name="M:ScreenMessages.BroadcastMessage(string)"></member><member name="M:ScreenMessages.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:ScreenMessages.CancelInvoke"></member><member name="M:ScreenMessages.CancelInvoke(string)"></member><member name="M:ScreenMessages.CompareTag(string)"></member><member name="M:ScreenMessages.Equals(object)"></member><member name="M:ScreenMessages.Finalize"></member><member name="M:ScreenMessages.GetComponent(System.Type)"></member><member name="M:ScreenMessages.GetComponent"></member><member name="M:ScreenMessages.GetComponent(string)"></member><member name="M:ScreenMessages.GetComponentInChildren(System.Type)"></member><member name="M:ScreenMessages.GetComponentInChildren"></member><member name="M:ScreenMessages.GetComponentInParent(System.Type)"></member><member name="M:ScreenMessages.GetComponentInParent"></member><member name="M:ScreenMessages.GetComponents(System.Type)"></member><member name="M:ScreenMessages.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:ScreenMessages.GetComponents(List)"></member><member name="M:ScreenMessages.GetComponents"></member><member name="M:ScreenMessages.GetComponentsInChildren(System.Type)"></member><member name="M:ScreenMessages.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:ScreenMessages.GetComponentsInChildren(System.Boolean)"></member><member name="M:ScreenMessages.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:ScreenMessages.GetComponentsInChildren"></member><member name="M:ScreenMessages.GetComponentsInChildren(List)"></member><member name="M:ScreenMessages.GetComponentsInParent(System.Type)"></member><member name="M:ScreenMessages.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:ScreenMessages.GetComponentsInParent(System.Boolean)"></member><member name="M:ScreenMessages.GetComponentsInParent(System.Boolean,List)"></member><member name="M:ScreenMessages.GetComponentsInParent"></member><member name="M:ScreenMessages.GetHashCode"></member><member name="M:ScreenMessages.GetInstanceID"></member><member name="M:ScreenMessages.GetType"></member><member name="M:ScreenMessages.Invoke(string,System.Single)"></member><member name="M:ScreenMessages.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:ScreenMessages.IsInvoking(string)"></member><member name="M:ScreenMessages.IsInvoking"></member><member name="M:ScreenMessages.MemberwiseClone"></member><member name="M:ScreenMessages.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ScreenMessages.SendMessage(string,object)"></member><member name="M:ScreenMessages.SendMessage(string)"></member><member name="M:ScreenMessages.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:ScreenMessages.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ScreenMessages.SendMessageUpwards(string,object)"></member><member name="M:ScreenMessages.SendMessageUpwards(string)"></member><member name="M:ScreenMessages.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:ScreenMessages.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:ScreenMessages.StartCoroutine(string,object)"></member><member name="M:ScreenMessages.StartCoroutine(string)"></member><member name="M:ScreenMessages.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:ScreenMessages.StopAllCoroutines"></member><member name="M:ScreenMessages.StopCoroutine(string)"></member><member name="M:ScreenMessages.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:ScreenMessages.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:ScreenMessages.ToString"></member><member name="M:ScreenMessages.PostScreenMessage(string,System.Single,ScreenMessageStyle)"><summary>Post a temporary message to the screen. Examples of screen messages are the "Warp = {number}x" message and the "Quicksaving..." message.</summary><param name="message">The message to post</param><param name="duration">How long the message should remain on the screen, in seconds.</param><param name="style">Which style of screen message to post--for instance, should it by like the warp message, the quicksaving message, etc.</param><returns>A reference to the posted message</returns></member><member name="M:ScreenMessages.PostScreenMessage(string,System.Single)"><summary>Post a temporary message to the screen. Examples of screen messages are the "Warp = {number}x" message and the "Quicksaving..." message.</summary><param name="message">The message to post</param><param name="duration">How long the message should remain on the screen, in seconds.</param><returns>A reference to the posted message</returns></member><member name="M:ScreenMessages.PostScreenMessage(string)"><summary>Post a temporary message to the screen. Examples of screen messages are the "Warp = {number}x" message and the "Quicksaving..." message.</summary><param name="message">The message to post.</param><returns>A reference to the posted message</returns></member><member name="M:ScreenMessages.PostScreenMessage(string,ScreenMessage)"></member><member name="M:ScreenMessages.PostScreenMessage(ScreenMessage)"><summary>Post a temporary message to the screen. Examples of screen messages are the "Warp = {number}x" message and the "Quicksaving..." message.</summary><param name="msg">The message to post</param></member><member name="M:ScreenMessages.RemoveMessage(ScreenMessage)"><summary>Remove a currently active message from the screen.</summary><param name="msg">The message to remove</param></member><member name="M:ScreenMessages.#ctor"></member><member name="T:ShipConstruct"></member><member name="F:ShipConstruct.parts"><summary>A list of all the parts in the ShipConstruct. The parts are listed in the same order in which they were added to the ship in the editor.</summary></member><member name="F:ShipConstruct.shipDescription"></member><member name="F:ShipConstruct.shipFacility"></member><member name="F:ShipConstruct.shipName"></member><member name="F:ShipConstruct.shipPartsUnlocked"></member><member name="F:ShipConstruct.shipSize"></member><member name="F:ShipConstruct.shipType"></member><member name="F:ShipConstruct.lastCompatibleMajor"></member><member name="F:ShipConstruct.lastCompatibleMinor"></member><member name="F:ShipConstruct.lastCompatibleRev"></member><member name="P:ShipConstruct.Count"></member><member name="P:ShipConstruct.Item"></member><member name="P:ShipConstruct.Parts"></member><member name="M:ShipConstruct.Add(Part)"></member><member name="M:ShipConstruct.AreAllPartsConnected"></member><member name="M:ShipConstruct.Clear"></member><member name="M:ShipConstruct.Contains(Part)"></member><member name="M:ShipConstruct.Equals(object)"></member><member name="M:ShipConstruct.Finalize"></member><member name="M:ShipConstruct.GetEnumerator"></member><member name="M:ShipConstruct.GetHashCode"></member><member name="M:ShipConstruct.GetShipCosts(float&amp;,float&amp;)"></member><member name="M:ShipConstruct.GetShipCosts(System.Single,System.Single)"></member><member name="M:ShipConstruct.GetShipMass(float&amp;,float&amp;)"></member><member name="M:ShipConstruct.GetTotalMass"></member><member name="M:ShipConstruct.GetType"></member><member name="M:ShipConstruct.isControllable"></member><member name="M:ShipConstruct.LoadShip(ConfigNode)"></member><member name="M:ShipConstruct.MemberwiseClone"></member><member name="M:ShipConstruct.Remove(Part)"></member><member name="M:ShipConstruct.SaveShip"></member><member name="M:ShipConstruct.ToString"></member><member name="M:ShipConstruct.#ctor"></member><member name="M:ShipConstruct.#ctor(EditorFacility)"></member><member name="M:ShipConstruct.#ctor(string,EditorFacility,System.Collections.Generic.List)"></member><member name="M:ShipConstruct.#ctor(string,string,Part)"></member><member name="M:ShipConstruct.#ctor(string,string,System.Collections.Generic.List)"></member><member name="M:ShipConstruct.#ctor(System.Int32)"></member><member name="M:ShipConstruct.#ctor(string,System.Int32,List&lt;Part&gt;)"></member><member name="T:SpaceCenter"></member><member name="F:SpaceCenter.AreaRadius"></member><member name="F:SpaceCenter.cb"></member><member name="F:SpaceCenter.spaceCenterAreaTrigger"></member><member name="F:SpaceCenter.Instance"></member><member name="P:SpaceCenter.enabled"></member><member name="P:SpaceCenter.gameObject"></member><member name="P:SpaceCenter.hideFlags"></member><member name="P:SpaceCenter.isActiveAndEnabled"></member><member name="P:SpaceCenter.Latitude"></member><member name="P:SpaceCenter.Longitude"></member><member name="P:SpaceCenter.name"></member><member name="P:SpaceCenter.SpaceCenterTransform"></member><member name="P:SpaceCenter.SrfNVector"></member><member name="P:SpaceCenter.tag"></member><member name="P:SpaceCenter.transform"></member><member name="P:SpaceCenter.useGUILayout"></member><member name="M:SpaceCenter.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:SpaceCenter.BroadcastMessage(string,object)"></member><member name="M:SpaceCenter.BroadcastMessage(string)"></member><member name="M:SpaceCenter.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:SpaceCenter.CancelInvoke"></member><member name="M:SpaceCenter.CancelInvoke(string)"></member><member name="M:SpaceCenter.CompareTag(string)"></member><member name="M:SpaceCenter.Equals(object)"></member><member name="M:SpaceCenter.Finalize"></member><member name="M:SpaceCenter.GetComponent(System.Type)"></member><member name="M:SpaceCenter.GetComponent"></member><member name="M:SpaceCenter.GetComponent(string)"></member><member name="M:SpaceCenter.GetComponentInChildren(System.Type)"></member><member name="M:SpaceCenter.GetComponentInChildren"></member><member name="M:SpaceCenter.GetComponentInParent(System.Type)"></member><member name="M:SpaceCenter.GetComponentInParent"></member><member name="M:SpaceCenter.GetComponents(System.Type)"></member><member name="M:SpaceCenter.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:SpaceCenter.GetComponents(List)"></member><member name="M:SpaceCenter.GetComponents"></member><member name="M:SpaceCenter.GetComponentsInChildren(System.Type)"></member><member name="M:SpaceCenter.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:SpaceCenter.GetComponentsInChildren(System.Boolean)"></member><member name="M:SpaceCenter.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:SpaceCenter.GetComponentsInChildren"></member><member name="M:SpaceCenter.GetComponentsInChildren(List)"></member><member name="M:SpaceCenter.GetComponentsInParent(System.Type)"></member><member name="M:SpaceCenter.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:SpaceCenter.GetComponentsInParent(System.Boolean)"></member><member name="M:SpaceCenter.GetComponentsInParent(System.Boolean,List)"></member><member name="M:SpaceCenter.GetComponentsInParent"></member><member name="M:SpaceCenter.GetHashCode"></member><member name="M:SpaceCenter.GetInstanceID"></member><member name="M:SpaceCenter.GetType"></member><member name="M:SpaceCenter.GreatCircleDistance(Vector3d)"></member><member name="M:SpaceCenter.Invoke(string,System.Single)"></member><member name="M:SpaceCenter.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:SpaceCenter.IsInvoking(string)"></member><member name="M:SpaceCenter.IsInvoking"></member><member name="M:SpaceCenter.MemberwiseClone"></member><member name="M:SpaceCenter.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:SpaceCenter.SendMessage(string,object)"></member><member name="M:SpaceCenter.SendMessage(string)"></member><member name="M:SpaceCenter.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:SpaceCenter.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:SpaceCenter.SendMessageUpwards(string,object)"></member><member name="M:SpaceCenter.SendMessageUpwards(string)"></member><member name="M:SpaceCenter.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:SpaceCenter.Start"></member><member name="M:SpaceCenter.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:SpaceCenter.StartCoroutine(string,object)"></member><member name="M:SpaceCenter.StartCoroutine(string)"></member><member name="M:SpaceCenter.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:SpaceCenter.StopAllCoroutines"></member><member name="M:SpaceCenter.StopCoroutine(string)"></member><member name="M:SpaceCenter.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:SpaceCenter.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:SpaceCenter.ToString"></member><member name="M:SpaceCenter.#ctor"></member><member name="T:Staging"><summary>This class is now obsolete see &lt;a href="#/classes/KSP.UI.Screens.StageManager"&gt;StageManager&lt;/a&gt;</summary></member><member name="F:Staging.advancedStagingControls"></member><member name="F:Staging.cannotSeparateClip"></member><member name="F:Staging.defaultIconMapTexture"></member><member name="F:Staging.frozenIcons"></member><member name="F:Staging.hoverArea"></member><member name="F:Staging.iconFrozenArea"></member><member name="F:Staging.iconHoldingArea"></member><member name="F:Staging.iconOffset"></member><member name="F:Staging.iconsInHold"></member><member name="F:Staging.iconSpacing"></member><member name="F:Staging.indicatorPrefab"></member><member name="F:Staging.nextStageClip"></member><member name="F:Staging.resetButton"></member><member name="F:Staging.scrollSharpness"></member><member name="F:Staging.scrollTop"></member><member name="F:Staging.selection"></member><member name="F:Staging.stages"></member><member name="F:Staging.stageSpacing"></member><member name="F:Staging.fetch"></member><member name="F:Staging.hover"></member><member name="F:Staging.stackMoving"></member><member name="P:Staging.enabled"></member><member name="P:Staging.gameObject"></member><member name="P:Staging.hideFlags"></member><member name="P:Staging.isActiveAndEnabled"></member><member name="P:Staging.name"></member><member name="P:Staging.tag"></member><member name="P:Staging.transform"></member><member name="P:Staging.useGUILayout"></member><member name="P:Staging.AdvancedStagingControls"></member><member name="P:Staging.CurrentStage"></member><member name="P:Staging.DefaultIconMapTexture"></member><member name="P:Staging.IconOffset"></member><member name="P:Staging.IconSpacing"></member><member name="P:Staging.lastStage"></member><member name="P:Staging.Selection"></member><member name="P:Staging.separate_ready"></member><member name="P:Staging.stackLocked"></member><member name="P:Staging.StackTransform"></member><member name="P:Staging.StageCount"></member><member name="M:Staging.activateNextStage"></member><member name="M:Staging.activateStage(System.Int32)"></member><member name="M:Staging.addStageAt(System.Int32)"></member><member name="M:Staging.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:Staging.BroadcastMessage(string,object)"></member><member name="M:Staging.BroadcastMessage(string)"></member><member name="M:Staging.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:Staging.CancelInvoke"></member><member name="M:Staging.CancelInvoke(string)"></member><member name="M:Staging.CompareTag(string)"></member><member name="M:Staging.deleteStage(StageGroup)"></member><member name="M:Staging.deselectAll"></member><member name="M:Staging.disableStage(StageGroup)"></member><member name="M:Staging.Equals(object)"></member><member name="M:Staging.Finalize"></member><member name="M:Staging.GetComponent(System.Type)"></member><member name="M:Staging.GetComponent"></member><member name="M:Staging.GetComponent(string)"></member><member name="M:Staging.GetComponentInChildren(System.Type)"></member><member name="M:Staging.GetComponentInChildren"></member><member name="M:Staging.GetComponentInParent(System.Type)"></member><member name="M:Staging.GetComponentInParent"></member><member name="M:Staging.GetComponents(System.Type)"></member><member name="M:Staging.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:Staging.GetComponents(List)"></member><member name="M:Staging.GetComponents"></member><member name="M:Staging.GetComponentsInChildren(System.Type)"></member><member name="M:Staging.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:Staging.GetComponentsInChildren(System.Boolean)"></member><member name="M:Staging.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:Staging.GetComponentsInChildren"></member><member name="M:Staging.GetComponentsInChildren(List)"></member><member name="M:Staging.GetComponentsInParent(System.Type)"></member><member name="M:Staging.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:Staging.GetComponentsInParent(System.Boolean)"></member><member name="M:Staging.GetComponentsInParent(System.Boolean,List)"></member><member name="M:Staging.GetComponentsInParent"></member><member name="M:Staging.GetHashCode"></member><member name="M:Staging.GetInstanceID"></member><member name="M:Staging.GetType"></member><member name="M:Staging.Invoke(string,System.Single)"></member><member name="M:Staging.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:Staging.IsInvoking(string)"></member><member name="M:Staging.IsInvoking"></member><member name="M:Staging.MemberwiseClone"></member><member name="M:Staging.OnDestroy"></member><member name="M:Staging.selectTo(StackIcon,StackIcon)"></member><member name="M:Staging.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:Staging.SendMessage(string,object)"></member><member name="M:Staging.SendMessage(string)"></member><member name="M:Staging.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:Staging.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:Staging.SendMessageUpwards(string,object)"></member><member name="M:Staging.SendMessageUpwards(string)"></member><member name="M:Staging.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:Staging.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:Staging.StartCoroutine(string,object)"></member><member name="M:Staging.StartCoroutine(string)"></member><member name="M:Staging.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:Staging.StopAllCoroutines"></member><member name="M:Staging.StopCoroutine(string)"></member><member name="M:Staging.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:Staging.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:Staging.ToString"></member><member name="M:Staging.ActivateNextStage"></member><member name="M:Staging.ActivateStage(System.Int32)"></member><member name="M:Staging.AddStageAt(System.Int32)"></member><member name="M:Staging.AddToSelection(StackIcon,System.Boolean)"></member><member name="M:Staging.beginFlight"></member><member name="M:Staging.CreateIcon(Part)"></member><member name="M:Staging.DeleteStage(StageGroup)"></member><member name="M:Staging.deselect(StackIcon)"></member><member name="M:Staging.DisableIcon(StackIcon)"></member><member name="M:Staging.FindIcon(Part)"></member><member name="M:Staging.findStageIndices(Part,System.Int32)"></member><member name="M:Staging.GenerateStagingSequence(Part)"></member><member name="M:Staging.GetStageCount(System.Collections.Generic.List)"></member><member name="M:Staging.OnIconDrag(StackIcon)"></member><member name="M:Staging.OnIconDragEnd(StackIcon)"></member><member name="M:Staging.OnIconDragStart(StackIcon)"></member><member name="M:Staging.OnStageDrag(StageGroup)"></member><member name="M:Staging.OnStageDragEnd(StageGroup)"></member><member name="M:Staging.OnStageDragStart(StageGroup)"></member><member name="M:Staging.RecalculateVesselStaging(Vessel)"></member><member name="M:Staging.RemoveIcon(StackIcon)"></member><member name="M:Staging.ResumeFlight(System.Int32)"></member><member name="M:Staging.ScheduleSort"></member><member name="M:Staging.ScrollToIcon(StackIcon)"></member><member name="M:Staging.ScrollToStage(System.Int32)"></member><member name="M:Staging.SetSeparationIndices(Part,System.Int32)"></member><member name="M:Staging.SetStageCount(System.Collections.Generic.List)"></member><member name="M:Staging.SetStageCount(System.Collections.Generic.List)"></member><member name="M:Staging.SetStageCount(System.Int32)"></member><member name="M:Staging.SortIcons"></member><member name="M:Staging.SortNow"></member><member name="M:Staging.StepBackCurrentStage"></member><member name="M:Staging.#ctor"></member><member name="T:Sun"></member><member name="F:Sun.AU"></member><member name="F:Sun.brightnessCurve"></member><member name="F:Sun.brightnessMultiplier"></member><member name="F:Sun.fadeEnd"></member><member name="F:Sun.fadeStart"></member><member name="F:Sun.localTime"></member><member name="F:Sun.scaledSunLight"></member><member name="F:Sun.sun"></member><member name="F:Sun.sunDirection"></member><member name="F:Sun.sunFlare"></member><member name="F:Sun.target"></member><member name="F:Sun.useLocalSpaceSunLight"></member><member name="F:Sun.Instance"></member><member name="P:Sun.enabled"></member><member name="P:Sun.gameObject"></member><member name="P:Sun.hideFlags"></member><member name="P:Sun.isActiveAndEnabled"></member><member name="P:Sun.name"></member><member name="P:Sun.tag"></member><member name="P:Sun.transform"></member><member name="P:Sun.useGUILayout"></member><member name="M:Sun.Awake"></member><member name="M:Sun.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:Sun.BroadcastMessage(string,object)"></member><member name="M:Sun.BroadcastMessage(string)"></member><member name="M:Sun.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:Sun.CancelInvoke"></member><member name="M:Sun.CancelInvoke(string)"></member><member name="M:Sun.CompareTag(string)"></member><member name="M:Sun.Equals(object)"></member><member name="M:Sun.Finalize"></member><member name="M:Sun.GameSceneLoadRequested(GameScenes)"></member><member name="M:Sun.GetComponent(System.Type)"></member><member name="M:Sun.GetComponent"></member><member name="M:Sun.GetComponent(string)"></member><member name="M:Sun.GetComponentInChildren(System.Type)"></member><member name="M:Sun.GetComponentInChildren"></member><member name="M:Sun.GetComponentInParent(System.Type)"></member><member name="M:Sun.GetComponentInParent"></member><member name="M:Sun.GetComponents(System.Type)"></member><member name="M:Sun.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:Sun.GetComponents(List)"></member><member name="M:Sun.GetComponents"></member><member name="M:Sun.GetComponentsInChildren(System.Type)"></member><member name="M:Sun.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:Sun.GetComponentsInChildren(System.Boolean)"></member><member name="M:Sun.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:Sun.GetComponentsInChildren"></member><member name="M:Sun.GetComponentsInChildren(List)"></member><member name="M:Sun.GetComponentsInParent(System.Type)"></member><member name="M:Sun.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:Sun.GetComponentsInParent(System.Boolean)"></member><member name="M:Sun.GetComponentsInParent(System.Boolean,List)"></member><member name="M:Sun.GetComponentsInParent"></member><member name="M:Sun.GetHashCode"></member><member name="M:Sun.GetInstanceID"></member><member name="M:Sun.GetLocalTimeAtPosition(Vector3d,CelestialBody)"></member><member name="M:Sun.GetLocalTimeAtPosition(System.Double,System.Double,CelestialBody)"></member><member name="M:Sun.GetLocalTimeAtPosition(System.Double,System.Double,System.Double,CelestialBody)"></member><member name="M:Sun.GetType"></member><member name="M:Sun.Invoke(string,System.Single)"></member><member name="M:Sun.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:Sun.IsInvoking(string)"></member><member name="M:Sun.IsInvoking"></member><member name="M:Sun.MemberwiseClone"></member><member name="M:Sun.OnDestroy"></member><member name="M:Sun.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:Sun.SendMessage(string,object)"></member><member name="M:Sun.SendMessage(string)"></member><member name="M:Sun.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:Sun.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:Sun.SendMessageUpwards(string,object)"></member><member name="M:Sun.SendMessageUpwards(string)"></member><member name="M:Sun.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:Sun.Start"></member><member name="M:Sun.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:Sun.StartCoroutine(string,object)"></member><member name="M:Sun.StartCoroutine(string)"></member><member name="M:Sun.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:Sun.StopAllCoroutines"></member><member name="M:Sun.StopCoroutine(string)"></member><member name="M:Sun.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:Sun.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:Sun.SunlightEnabled(System.Boolean)"></member><member name="M:Sun.ToString"></member><member name="M:Sun.#ctor"></member><member name="T:TimeWarp"><summary>The class that handles time warp.</summary></member><member name="F:TimeWarp.altitudeLimits"><summary>Unused? CelestialBodies have their own sets of altitude limits.</summary></member><member name="F:TimeWarp.current_rate_index"></member><member name="F:TimeWarp.maxModeSwitchRate_index"></member><member name="F:TimeWarp.maxPhysicsRate_index"></member><member name="F:TimeWarp.Mode"></member><member name="F:TimeWarp.physicsWarpRates"><summary>The available physics warp rates. In 0.18.2 these are {1, 2, 3, 4} by default. You can modify the available rates by modifying this array.</summary></member><member name="F:TimeWarp.screenTextStyle"></member><member name="F:TimeWarp.textDuration"></member><member name="F:TimeWarp.timeQuadrantTab"></member><member name="F:TimeWarp.warpHighButton"></member><member name="F:TimeWarp.warpLowButton"></member><member name="F:TimeWarp.warpRates"><summary>The available regular warp rates. In 0.18.2 these are {1, 5, 10, 50, 100, 1000, 10000, 100000} by default. You can modify the available rates by modifying this array.</summary></member><member name="F:TimeWarp.fetch"><summary>Use this TimeWarp instance to access non-static members.</summary></member><member name="P:TimeWarp.enabled"></member><member name="P:TimeWarp.gameObject"></member><member name="P:TimeWarp.hideFlags"></member><member name="P:TimeWarp.isActiveAndEnabled"></member><member name="P:TimeWarp.name"></member><member name="P:TimeWarp.tag"></member><member name="P:TimeWarp.transform"></member><member name="P:TimeWarp.useGUILayout"></member><member name="P:TimeWarp.CurrentRate"><summary>The current warp rate, e.g. 50 if the current warp rate is 50x. This number may not be equal to one of the entries in warpRates, because KSP will smoothly interpolate between two warp rates over a period of time when you increase or decrease the warp.</summary></member><member name="P:TimeWarp.CurrentRateIndex"><summary>The index of the current current warp rate in either warpRates or physicsWarpRates, depending on whether WarpMode is HIGH or LOW. Note that CurrentRate may not equal the warp rate indexed by CurrentRateIndex if KSP has not finished interpolating the last warp change.</summary></member><member name="P:TimeWarp.deltaTime"></member><member name="P:TimeWarp.fixedDeltaTime"><summary>The time between FixedUpdate cycles (i.e., the time between physics steps). See the Unity FixedUpdate documentation for more details.</summary></member><member name="P:TimeWarp.MaxPhysicsRate"></member><member name="P:TimeWarp.WarpMode"><summary>Whether we are in regular warp mode or physics warp mode</summary></member><member name="M:TimeWarp.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:TimeWarp.BroadcastMessage(string,object)"></member><member name="M:TimeWarp.BroadcastMessage(string)"></member><member name="M:TimeWarp.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:TimeWarp.CancelAutoWarp(System.Int32,System.Boolean)"></member><member name="M:TimeWarp.CancelInvoke"></member><member name="M:TimeWarp.CancelInvoke(string)"></member><member name="M:TimeWarp.CompareTag(string)"></member><member name="M:TimeWarp.Equals(object)"></member><member name="M:TimeWarp.Finalize"></member><member name="M:TimeWarp.GetAltitudeLimit(System.Int32,CelestialBody)"><summary>Presumably, gets the minimum altitude in meters above the sea level of the given body at which the given warp rate index is allowed.</summary><param name="i">A warp rate index</param><param name="body">The body in question</param><returns>The minimum altitude in meters at which that warp rate index is allowed</returns></member><member name="M:TimeWarp.GetComponent(System.Type)"></member><member name="M:TimeWarp.GetComponent"></member><member name="M:TimeWarp.GetComponent(string)"></member><member name="M:TimeWarp.GetComponentInChildren(System.Type)"></member><member name="M:TimeWarp.GetComponentInChildren"></member><member name="M:TimeWarp.GetComponentInParent(System.Type)"></member><member name="M:TimeWarp.GetComponentInParent"></member><member name="M:TimeWarp.GetComponents(System.Type)"></member><member name="M:TimeWarp.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:TimeWarp.GetComponents(List)"></member><member name="M:TimeWarp.GetComponents"></member><member name="M:TimeWarp.GetComponentsInChildren(System.Type)"></member><member name="M:TimeWarp.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:TimeWarp.GetComponentsInChildren(System.Boolean)"></member><member name="M:TimeWarp.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:TimeWarp.GetComponentsInChildren"></member><member name="M:TimeWarp.GetComponentsInChildren(List)"></member><member name="M:TimeWarp.GetComponentsInParent(System.Type)"></member><member name="M:TimeWarp.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:TimeWarp.GetComponentsInParent(System.Boolean)"></member><member name="M:TimeWarp.GetComponentsInParent(System.Boolean,List)"></member><member name="M:TimeWarp.GetComponentsInParent"></member><member name="M:TimeWarp.GetHashCode"></member><member name="M:TimeWarp.GetInstanceID"></member><member name="M:TimeWarp.GetMaxRateForAltitude(System.Double,CelestialBody)"></member><member name="M:TimeWarp.GetType"></member><member name="M:TimeWarp.Invoke(string,System.Single)"></member><member name="M:TimeWarp.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:TimeWarp.IsInvoking(string)"></member><member name="M:TimeWarp.IsInvoking"></member><member name="M:TimeWarp.MemberwiseClone"></member><member name="M:TimeWarp.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:TimeWarp.SendMessage(string,object)"></member><member name="M:TimeWarp.SendMessage(string)"></member><member name="M:TimeWarp.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:TimeWarp.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:TimeWarp.SendMessageUpwards(string,object)"></member><member name="M:TimeWarp.SendMessageUpwards(string)"></member><member name="M:TimeWarp.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:TimeWarp.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:TimeWarp.StartCoroutine(string,object)"></member><member name="M:TimeWarp.StartCoroutine(string)"></member><member name="M:TimeWarp.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:TimeWarp.StopAllCoroutines"></member><member name="M:TimeWarp.StopCoroutine(string)"></member><member name="M:TimeWarp.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:TimeWarp.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:TimeWarp.ToString"></member><member name="M:TimeWarp.WarpTo(System.Double,System.Double,System.Double)"></member><member name="M:TimeWarp.SetRate(System.Int32,System.Boolean)"><summary>Changes the warp rate to either warpRates[rateIndex] or physicsWarpRates[rate_index], depending on whether WarpMode is HIGH or LOW.</summary><param name="rate_index">The index of the desired new warp rate</param><param name="instant">If false, KSP will gradually smoothly adjust the warp rate up or down until it reaches the target. If true, the warp rate will change instantly.</param></member><member name="M:TimeWarp.#ctor"></member><member name="T:TransactionReasons"></member><member name="T:TutorialScenario"><summary>A TutorialScenario is a ScenarioModule with some added features that are useful for building tutorials or similar kinds of scenarios. A TutorialScenario comes with a builtin in finite state machine for running the scenario and displays "tutorial pages" in a GUI window alongside a picture of a friendly Kerbal instructor. You can take advantage of all these features by making your ScenarioModule a subclass of TutorialScenario.  See HarvesteR's example code in his forum article:   http://forum.kerbalspaceprogram.com/content.php/121-Writing-Tutorials-A-Demo-%28and-some-source-code%29</summary></member><member name="F:TutorialScenario.arrowPrefab"></member><member name="F:TutorialScenario.arrows"></member><member name="F:TutorialScenario.avatarRect"></member><member name="F:TutorialScenario.currentPage"></member><member name="F:TutorialScenario.dialogDisplay"></member><member name="F:TutorialScenario.dRect"></member><member name="F:TutorialScenario.guiSkinName"></member><member name="F:TutorialScenario.instructor"><summary>Controls the animated image of the kerbal instructor. This object lets you make the instructor run various animations .</summary></member><member name="F:TutorialScenario.instructorPortraitSize"></member><member name="F:TutorialScenario.instructorPrefabName"><summary>Set this string in OnAssetSetup to specify which instructor kerbal will appear in the tutorial window. The value "Instructor_Gene" gives Gene Kerman as the instructor. The default if you do not specify anything is Werner von Kerman.</summary></member><member name="F:TutorialScenario.instructorTexture"></member><member name="F:TutorialScenario.rect"></member><member name="F:TutorialScenario.runner"></member><member name="F:TutorialScenario.skin"></member><member name="F:TutorialScenario.snapshot"></member><member name="F:TutorialScenario.targetScenes"></member><member name="F:TutorialScenario.textureBorderRadius"></member><member name="F:TutorialScenario.Tutorial"><summary>The finite state machine that controls the progression of the tutorial.</summary></member><member name="F:TutorialScenario.tutorialArrowPrefabName"></member><member name="F:TutorialScenario.tutorialControlColorString"></member><member name="F:TutorialScenario.TutorialDialogEnabled"></member><member name="F:TutorialScenario.tutorialHighlightColorString"></member><member name="P:TutorialScenario.ClassID"></member><member name="P:TutorialScenario.ClassName"></member><member name="P:TutorialScenario.enabled"></member><member name="P:TutorialScenario.Events"></member><member name="P:TutorialScenario.Fields"></member><member name="P:TutorialScenario.gameObject"></member><member name="P:TutorialScenario.hideFlags"></member><member name="P:TutorialScenario.isActiveAndEnabled"></member><member name="P:TutorialScenario.name"></member><member name="P:TutorialScenario.tag"></member><member name="P:TutorialScenario.transform"></member><member name="P:TutorialScenario.useGUILayout"></member><member name="M:TutorialScenario.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:TutorialScenario.BroadcastMessage(string,object)"></member><member name="M:TutorialScenario.BroadcastMessage(string)"></member><member name="M:TutorialScenario.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:TutorialScenario.CancelInvoke"></member><member name="M:TutorialScenario.CancelInvoke(string)"></member><member name="M:TutorialScenario.ClearArrows"></member><member name="M:TutorialScenario.CloseTutorialWindow(System.Boolean)"></member><member name="M:TutorialScenario.CompareTag(string)"></member><member name="M:TutorialScenario.CreateArrow"></member><member name="M:TutorialScenario.DeleteArrow(TutorialArrow)"></member><member name="M:TutorialScenario.Destroy(UnityEngine.Object)"></member><member name="M:TutorialScenario.Equals(object)"></member><member name="M:TutorialScenario.Finalize"></member><member name="M:TutorialScenario.GetComponent(System.Type)"></member><member name="M:TutorialScenario.GetComponent"></member><member name="M:TutorialScenario.GetComponent(string)"></member><member name="M:TutorialScenario.GetComponentInChildren(System.Type)"></member><member name="M:TutorialScenario.GetComponentInChildren"></member><member name="M:TutorialScenario.GetComponentInParent(System.Type)"></member><member name="M:TutorialScenario.GetComponentInParent"></member><member name="M:TutorialScenario.GetComponents(System.Type)"></member><member name="M:TutorialScenario.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:TutorialScenario.GetComponents(List)"></member><member name="M:TutorialScenario.GetComponents"></member><member name="M:TutorialScenario.GetComponentsInChildren(System.Type)"></member><member name="M:TutorialScenario.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:TutorialScenario.GetComponentsInChildren(System.Boolean)"></member><member name="M:TutorialScenario.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:TutorialScenario.GetComponentsInChildren"></member><member name="M:TutorialScenario.GetComponentsInChildren(List)"></member><member name="M:TutorialScenario.GetComponentsInParent(System.Type)"></member><member name="M:TutorialScenario.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:TutorialScenario.GetComponentsInParent(System.Boolean)"></member><member name="M:TutorialScenario.GetComponentsInParent(System.Boolean,List)"></member><member name="M:TutorialScenario.GetComponentsInParent"></member><member name="M:TutorialScenario.GetHashCode"></member><member name="M:TutorialScenario.GetInstanceID"></member><member name="M:TutorialScenario.GetType"></member><member name="M:TutorialScenario.Invoke(string,System.Single)"></member><member name="M:TutorialScenario.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:TutorialScenario.IsInvoking(string)"></member><member name="M:TutorialScenario.IsInvoking"></member><member name="M:TutorialScenario.Load(ConfigNode)"></member><member name="M:TutorialScenario.MemberwiseClone"></member><member name="M:TutorialScenario.OnAssetSetup"><summary>Override this function to run some initialization code?</summary></member><member name="M:TutorialScenario.OnAwake"></member><member name="M:TutorialScenario.OnLoad(ConfigNode)"></member><member name="M:TutorialScenario.OnOnDestroy"></member><member name="M:TutorialScenario.OnSave(ConfigNode)"></member><member name="M:TutorialScenario.OnTutorialSetup"><summary>Override this function to run some code as the tutorial is being set up.</summary></member><member name="M:TutorialScenario.Save(ConfigNode)"></member><member name="M:TutorialScenario.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:TutorialScenario.SendMessage(string,object)"></member><member name="M:TutorialScenario.SendMessage(string)"></member><member name="M:TutorialScenario.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:TutorialScenario.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:TutorialScenario.SendMessageUpwards(string,object)"></member><member name="M:TutorialScenario.SendMessageUpwards(string)"></member><member name="M:TutorialScenario.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:TutorialScenario.SetDialogRect(UnityEngine.Rect)"><summary>Sets the location of the GUI window of the tutorial.</summary><param name="r"/></member><member name="M:TutorialScenario.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:TutorialScenario.StartCoroutine(string,object)"></member><member name="M:TutorialScenario.StartCoroutine(string)"></member><member name="M:TutorialScenario.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:TutorialScenario.StopAllCoroutines"></member><member name="M:TutorialScenario.StopCoroutine(string)"></member><member name="M:TutorialScenario.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:TutorialScenario.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:TutorialScenario.ToString"></member><member name="M:TutorialScenario.#ctor"></member><member name="T:UntrackedObjectClass"><summary>Describes an asteroid's size</summary></member><member name="T:Vessel"><summary>A Vessel object represents a single vessel. Parts that break off from a vessel become their own Vessels. Vessels that merge via docking become one Vessel.</summary></member><member name="F:Vessel.acceleration"><summary>Presumably, this is the current acceleration vector of the vessel, in m/s^2?</summary></member><member name="F:Vessel.altitude"><summary>Presumably, this is the current altitude above sea of the vessel, in meters? Is equal to pqsAltitude + heightFromTerrain (where heightFromTerrain is not -1).</summary></member><member name="F:Vessel.angularMomentum"><summary>Presumably, this is the current angular momentum of the vessel?</summary></member><member name="F:Vessel.angularVelocity"><summary>The current angular velocity vector of the vessel.</summary></member><member name="F:Vessel.atmDensity"><summary>Presumably, this is the current density of the atmosphere at the vessel's position?</summary></member><member name="F:Vessel.atmosphericTemperature"></member><member name="F:Vessel.CentrifugalAcc"></member><member name="F:Vessel.CoM"><summary>Presumably, this is the position of the center of mass of the vessel?</summary></member><member name="F:Vessel.convectiveCoefficient"></member><member name="F:Vessel.convectiveMachFlux"></member><member name="F:Vessel.CoriolisAcc"></member><member name="F:Vessel.ctrlState"><summary>The set of flight inputs currently being fed to the vessel. For example the current throttle being applied to the vesesl is vessel.ctrlState.mainThrottle.</summary></member><member name="F:Vessel.currentStage"></member><member name="F:Vessel.directSunlight"></member><member name="F:Vessel.distanceToSun"></member><member name="F:Vessel.dynamicPressurekPa"></member><member name="F:Vessel.east"></member><member name="F:Vessel.evaController"><summary>If the vessel is a Kerbal on EVA, this object contains most EVA related information</summary></member><member name="F:Vessel.externalTemperature"></member><member name="F:Vessel.flightPlanNode"></member><member name="F:Vessel.geeForce"></member><member name="F:Vessel.geeForce_immediate"></member><member name="F:Vessel.gForce"></member><member name="F:Vessel.handlePhysicsStats"></member><member name="F:Vessel.heightFromSurface"><summary>Appears to always be -1?</summary></member><member name="F:Vessel.heightFromTerrain"><summary>The vertical distance in meters between the vessel and the nearest terrain (including buildings),  or -1 when sea depth is greater than 600m (terrainAltitude &amp;lt;= -600). Once you are above roughly 42km above ground it turns to -1 again (only confirmed on Kerbin so far)</summary></member><member name="F:Vessel.horizontalSrfSpeed"><summary>Presumably, the horizontal component of srf_velocity, in m/s.</summary></member><member name="F:Vessel.id"><summary>A unique identifier assigned to a vessel. When two vessels dock, the combined vessel has the id of the vessel docked to. On undock, the vessel undocked from keeps its id, the vessel that undocks gets a new id.  Note that this id is always fresh, a vessel gets a different id when it undocks then it had before docking. This is the pid value in the persistent.sfs at the VESSEL level.</summary></member><member name="F:Vessel.indicatedAirSpeed"></member><member name="F:Vessel.Landed"><summary>Whether the vessel is currently sitting on the ground.</summary></member><member name="F:Vessel.landedAt"></member><member name="F:Vessel.landedAtLast"></member><member name="F:Vessel.lastUT"></member><member name="F:Vessel.latitude"><summary>The current latitude of the vessel over the current mainBody, in degrees.</summary></member><member name="F:Vessel.launchTime"><summary>The universal time at which the vessel was launched, in seconds?</summary></member><member name="F:Vessel.loaded"><summary>Whether the vessel is currently loaded. Vessels are only loaded when they come within about 2.5km of the active vessel.</summary></member><member name="F:Vessel.localCoM"></member><member name="F:Vessel.longitude"><summary>The current longitude of the vessel over the current mainBody, in degrees</summary></member><member name="F:Vessel.mach"></member><member name="F:Vessel.mapObject"></member><member name="F:Vessel.missionTime"><summary>Mission elapsed time, in seconds, maybe?</summary></member><member name="F:Vessel.MOI"></member><member name="F:Vessel.north"></member><member name="F:Vessel.objectUnderVessel"></member><member name="F:Vessel.obt_speed"></member><member name="F:Vessel.obt_velocity"><summary>The current velocity of the vessel, in world coordinates, in the nonrotating inertial reference frame.</summary></member><member name="F:Vessel.OnAutopilotUpdate"></member><member name="F:Vessel.OnFlyByWire"><summary>You can add your own function to this callback to register a function that can provide flight control input to the vessel. Once you've registered this callback, it will be called once per FixedUpdate. Provide flight control input by modifying the FlightCtrlState passed to your function. This FlightCtrlState will already contain the player's input, which you can modify or override as desired.</summary><example><code>void MyAutopilotFunction(FlightCtrlState s) {   s.yaw = 1; } ... vessel.OnFlyByWire += MyAutopilotFunction</code>This will create an autopilot that always yaws hard to the right. You can probably devise something more useful, though...</example></member><member name="F:Vessel.OnJustAboutToBeDestroyed"><summary>You can add a function to this callback, and the function will be called when the vessel is "just about to be destroyed."</summary></member><member name="F:Vessel.OnPostAutopilotUpdate"></member><member name="F:Vessel.OnPreAutopilotUpdate"></member><member name="F:Vessel.orbitDriver"><summary>This is the 'parent' container for everything to do with the vessels orbit, use OrbitDriver.orbit to find and set information about the vessel orbit.</summary></member><member name="F:Vessel.orbitRenderer"></member><member name="F:Vessel.orbitTargeter"></member><member name="F:Vessel.packed"><summary>Whether the vessel is currently packed. Vessels are only packed when the come within about 300m of the active vessel.</summary></member><member name="F:Vessel.parts"><summary>A list of the parts in the vessel. Note that when the vessel is not loaded, this list will be empty.</summary></member><member name="F:Vessel.patchedConicRenderer"></member><member name="F:Vessel.patchedConicSolver"><summary>Among other things, the patchedConicSolver stores information about the player's current set of maneuver nodes.</summary></member><member name="F:Vessel.perturbation"></member><member name="F:Vessel.pqsAltitude"><summary>Presumably, the height in meters of the planet's terrain QuadSphere directly under the vessel, compared to sea level. This does not take the height of buildings into account. It is generally within +/- 1m of terrainAltitude,  except when over buildings (terrainAltitude does account for buildings) or sea with a depth of greater than 600m (terrainAltitude &amp;lt;= -600, heightFromTerrain == -1).</summary></member><member name="F:Vessel.protoVessel"><summary>The protoVessel can be used to get some saved information about unloaded vessels.</summary></member><member name="F:Vessel.rb_velocity"></member><member name="F:Vessel.referenceTransformId"><summary>This is the flightID of the part that is the current 'Control from Here' part. This is the root part until changed by the player. The vessel transform is set to the transform of this part. This is the 'ref' value in the persistent.sfs at the VESSEL level.</summary></member><member name="F:Vessel.referenceTransformIdRecall"></member><member name="F:Vessel.rootPart"><summary>The root of the tree of parts that comprises the vessel. Usually this is the original command pod placed when constructing the vessel.</summary></member><member name="F:Vessel.situation"><summary>Some coarse information about the current state of the vessel.</summary></member><member name="F:Vessel.solarFlux"></member><member name="F:Vessel.specificAcceleration"></member><member name="F:Vessel.speed"></member><member name="F:Vessel.speedOfSound"></member><member name="F:Vessel.Splashed"><summary>Whether the vessel is currently splashed down.</summary></member><member name="F:Vessel.srf_velocity"><summary>The velocity of the vessel in the "surface" reference frame, the reference frame that rotates with the planet.</summary></member><member name="F:Vessel.srfRelRotation"></member><member name="F:Vessel.srfSpeed"></member><member name="F:Vessel.state"></member><member name="F:Vessel.staticPressurekPa"><summary>Presumably, the atmospheric pressure at the vessel's current location.</summary></member><member name="F:Vessel.targetObject"></member><member name="F:Vessel.terrainAltitude"><summary>The height in meters of the nearest terrain (including buildings) directly under the vessel, compared to sea level. Ground which is underwater will have a negative terrainAltitude.</summary></member><member name="F:Vessel.terrainNormal"></member><member name="F:Vessel.totalMass"></member><member name="F:Vessel.up"></member><member name="F:Vessel.upAxis"></member><member name="F:Vessel.verticalSpeed"><summary>Presumably, the vertical speed of the vessel in m/s.</summary></member><member name="F:Vessel.vesselModules"></member><member name="F:Vessel.vesselName"><summary>The name of the vessel as it appears in e.g. the tracking station.</summary></member><member name="F:Vessel.vesselRanges"></member><member name="F:Vessel.vesselTransform"></member><member name="F:Vessel.vesselType"><summary>The type of the vessel, as shown by the type of icon on the map view.</summary></member><member name="F:Vessel.waterOffset"></member><member name="P:Vessel.ActionGroups"></member><member name="P:Vessel.AutoClean"></member><member name="P:Vessel.AutoCleanReason"></member><member name="P:Vessel.Autopilot"></member><member name="P:Vessel.CurrentCoM"></member><member name="P:Vessel.DiscoveryInfo"><summary>Describes to what extent this object has been explored</summary></member><member name="P:Vessel.distanceLandedPackThreshold"></member><member name="P:Vessel.distanceLandedUnpackThreshold"></member><member name="P:Vessel.distancePackThreshold"></member><member name="P:Vessel.distanceUnpackThreshold"></member><member name="P:Vessel.enabled"></member><member name="P:Vessel.gameObject"></member><member name="P:Vessel.hideFlags"></member><member name="P:Vessel.HoldPhysics"></member><member name="P:Vessel.isActiveAndEnabled"></member><member name="P:Vessel.isActiveVessel"><summary>Whether the player is currently controlling this vessel.</summary></member><member name="P:Vessel.isCommandable"></member><member name="P:Vessel.IsControllable"></member><member name="P:Vessel.isEVA"></member><member name="P:Vessel.isPersistent"></member><member name="P:Vessel.IsRecoverable"></member><member name="P:Vessel.Item"></member><member name="P:Vessel.Item"></member><member name="P:Vessel.LandedInKSC"></member><member name="P:Vessel.LandedOrSplashed"><summary>Landed || Splashed; use this to determined whether the vessel is on the ground somewhere, whether on land or water.</summary></member><member name="P:Vessel.mainBody"><summary>The body whose sphere of influence the vessel is currently in.</summary></member><member name="P:Vessel.name"></member><member name="P:Vessel.orbit"><summary>The current orbit of the vessel.</summary></member><member name="P:Vessel.Parts"><summary>A list of the parts this vessel is composed of.</summary></member><member name="P:Vessel.PatchedConicsAttached"></member><member name="P:Vessel.ReferenceTransform"></member><member name="P:Vessel.tag"></member><member name="P:Vessel.transform"></member><member name="P:Vessel.useGUILayout"></member><member name="P:Vessel.VesselValues"></member><member name="P:Vessel.loadDistance"></member><member name="P:Vessel.unloadDistance"></member><member name="M:Vessel.AttachPatchedConicsSolver"></member><member name="M:Vessel.BackupVessel"></member><member name="M:Vessel.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:Vessel.BroadcastMessage(string,object)"></member><member name="M:Vessel.BroadcastMessage(string)"></member><member name="M:Vessel.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:Vessel.CalculatePhysicsStats"></member><member name="M:Vessel.CancelInvoke"></member><member name="M:Vessel.CancelInvoke(string)"></member><member name="M:Vessel.ChangeWorldVelocity(Vector3d)"><summary>Add a given velocity offset to the vessels current velocity, instantaneously (may only work for loaded vessels?)</summary><param name="velOffset"/></member><member name="M:Vessel.checkLanded"></member><member name="M:Vessel.checkSplashed"></member><member name="M:Vessel.checkVisibility"></member><member name="M:Vessel.Clean(string)"></member><member name="M:Vessel.ClearActiveInternalSpace"></member><member name="M:Vessel.ClearStaging"></member><member name="M:Vessel.CompareTag(string)"></member><member name="M:Vessel.ContainsCollider(UnityEngine.Collider)"></member><member name="M:Vessel.DespawnCrew"></member><member name="M:Vessel.DestroyVesselComponents"></member><member name="M:Vessel.DetachPatchedConicsSolver"></member><member name="M:Vessel.Die"></member><member name="M:Vessel.Equals(object)"></member><member name="M:Vessel.FallBackReferenceTransform"></member><member name="M:Vessel.FeedInputFeed"></member><member name="M:Vessel.Finalize"></member><member name="M:Vessel.FindDefaultVesselType"></member><member name="M:Vessel.findLocalCenterOfMass"></member><member name="M:Vessel.findLocalCenterOfPressure"><summary>Broken Function with expensive runtime. Do not use. (If it worked it'd do as the name says but it doesn't as of 0.23.5)</summary><returns/></member><member name="M:Vessel.findLocalMOI"></member><member name="M:Vessel.findLocalMOI(UnityEngine.Vector3)"><summary>Returns the vessel's moment of inertia around its center of mass. &lt;warning&gt;Returns nonsense answers; DO NOT USE&lt;/warning&gt;</summary></member><member name="M:Vessel.FindPartModulesImplementing"><summary>Returns a list of part modules on the vessel that implement module T, useful for finding modules on an unloaded craft.  Returns List&lt;T&gt; where T is the module being searched for.</summary></member><member name="M:Vessel.findWorldCenterOfMass"><summary>Computes and returns the position of the center of mass of the vessel, in world coordinates.</summary><returns/></member><member name="M:Vessel.GetActiveParts"></member><member name="M:Vessel.GetActiveResource(PartResourceDefinition)"></member><member name="M:Vessel.GetActiveResources"></member><member name="M:Vessel.GetComponent(System.Type)"></member><member name="M:Vessel.GetComponent"></member><member name="M:Vessel.GetComponent(string)"></member><member name="M:Vessel.GetComponentInChildren(System.Type)"></member><member name="M:Vessel.GetComponentInChildren"></member><member name="M:Vessel.GetComponentInParent(System.Type)"></member><member name="M:Vessel.GetComponentInParent"></member><member name="M:Vessel.GetComponents(System.Type)"></member><member name="M:Vessel.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:Vessel.GetComponents(List)"></member><member name="M:Vessel.GetComponents"></member><member name="M:Vessel.GetComponentsInChildren(System.Type)"></member><member name="M:Vessel.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:Vessel.GetComponentsInChildren(System.Boolean)"></member><member name="M:Vessel.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:Vessel.GetComponentsInChildren"></member><member name="M:Vessel.GetComponentsInChildren(List)"></member><member name="M:Vessel.GetComponentsInParent(System.Type)"></member><member name="M:Vessel.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:Vessel.GetComponentsInParent(System.Boolean)"></member><member name="M:Vessel.GetComponentsInParent(System.Boolean,List)"></member><member name="M:Vessel.GetComponentsInParent"></member><member name="M:Vessel.GetCrewCapacity"></member><member name="M:Vessel.GetCrewCount"><summary>The number of kerbals inside the vessel. This is ONLY reliable when the vessel is loaded (vessel.loaded == true).  When the vessel is unloaded you can compute the crew count as</summary><code>vessel.protoVessel.protoPartSnapshots.Sum(pps =&gt; pps.protoModuleCrew.Count))</code><returns/></member><member name="M:Vessel.GetFwdVector"></member><member name="M:Vessel.GetHashCode"></member><member name="M:Vessel.GetHeightFromSurface"></member><member name="M:Vessel.GetHeightFromTerrain"></member><member name="M:Vessel.GetInstanceID"></member><member name="M:Vessel.GetMassivePart(Part[])"></member><member name="M:Vessel.GetName"></member><member name="M:Vessel.GetObtVelocity"></member><member name="M:Vessel.GetOrbit"></member><member name="M:Vessel.GetOrbitDriver"></member><member name="M:Vessel.GetReferenceTransformPart"></member><member name="M:Vessel.GetSrfVelocity"></member><member name="M:Vessel.GetTargetingMode"></member><member name="M:Vessel.GetTotalMass"></member><member name="M:Vessel.GetTransform"><summary>Gets the transform of the part the vessel is being controlled from (i.e., the part set by the "control from here" right click option).</summary><returns/></member><member name="M:Vessel.GetType"></member><member name="M:Vessel.GetVessel"></member><member name="M:Vessel.GetVesselCrew"></member><member name="M:Vessel.GetWorldPos3D"></member><member name="M:Vessel.GoOffRails"><summary>Pulls the vessel off rails?</summary></member><member name="M:Vessel.GoOnRails"><summary>Puts the vessel on rails?</summary></member><member name="M:Vessel.HasControlSources"></member><member name="M:Vessel.Initialize(System.Boolean)"></member><member name="M:Vessel.Invoke(string,System.Single)"></member><member name="M:Vessel.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:Vessel.IsClearToSave"></member><member name="M:Vessel.IsInvoking(string)"></member><member name="M:Vessel.IsInvoking"></member><member name="M:Vessel.Load"></member><member name="M:Vessel.MakeActive"></member><member name="M:Vessel.MakeInactive"></member><member name="M:Vessel.MemberwiseClone"></member><member name="M:Vessel.MurderCrew"></member><member name="M:Vessel.OnDestroy"></member><member name="M:Vessel.OnLoadFlightState(System.Collections.Generic.Dictionary)"></member><member name="M:Vessel.OnSaveFlightState(System.Collections.Generic.Dictionary)"></member><member name="M:Vessel.PQSAltitude"></member><member name="M:Vessel.printCollisions"></member><member name="M:Vessel.printGroundContacts"></member><member name="M:Vessel.RecallReferenceTransform"></member><member name="M:Vessel.RenameVessel"></member><member name="M:Vessel.ResetCollisionIgnores"></member><member name="M:Vessel.ResumeStaging"></member><member name="M:Vessel.ResumeTarget"></member><member name="M:Vessel.RevealAltitude"><summary>Returns the vessel's altitude above the reference sphere of the CelestialBody it orbits.  Implements IDiscoverable</summary></member><member name="M:Vessel.RevealMass"><summary>Returns the vessel's mass, in tons  Implements IDiscoverable</summary></member><member name="M:Vessel.RevealName"><summary>Returns the vessel's tracking station name  Implements IDiscoverable</summary></member><member name="M:Vessel.RevealSituationString"><summary>Describes the state of the vessel</summary><returns>A string containing the sphere of influence and trajectory of the object</returns><example>"Orbiting the Sun"</example><remarks>Implements IDiscoverable</remarks></member><member name="M:Vessel.RevealSpeed"><summary>Returns the vessel's speed  Implements IDiscoverable</summary></member><member name="M:Vessel.RevealType"><summary>Returns the type of the vessel</summary><returns>A string representation of vesselType</returns><remarks>Implements IDiscoverable</remarks></member><member name="M:Vessel.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:Vessel.SendMessage(string,object)"></member><member name="M:Vessel.SendMessage(string)"></member><member name="M:Vessel.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:Vessel.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:Vessel.SendMessageUpwards(string,object)"></member><member name="M:Vessel.SendMessageUpwards(string)"></member><member name="M:Vessel.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:Vessel.SetActiveInternalSpace(Part)"></member><member name="M:Vessel.SetActiveInternalSpaces(System.Collections.Generic.IEnumerable)"></member><member name="M:Vessel.SetAutoClean(string)"></member><member name="M:Vessel.SetLandedAt(string)"></member><member name="M:Vessel.SetPosition(UnityEngine.Vector3)"></member><member name="M:Vessel.SetPosition(UnityEngine.Vector3,System.Boolean)"></member><member name="M:Vessel.SetReferenceTransform(Part,System.Boolean)"></member><member name="M:Vessel.SetRotation(UnityEngine.Quaternion)"></member><member name="M:Vessel.SetWorldVelocity(Vector3d)"><summary>Sets the velocity of the vessel to a new value, instantaneously. May only work for loaded vessels?</summary><param name="vel"/></member><member name="M:Vessel.SpawnCrew"></member><member name="M:Vessel.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:Vessel.StartCoroutine(string,object)"></member><member name="M:Vessel.StartCoroutine(string)"></member><member name="M:Vessel.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:Vessel.StartFromBackup(ProtoVessel)"></member><member name="M:Vessel.StopAllCoroutines"></member><member name="M:Vessel.StopCoroutine(string)"></member><member name="M:Vessel.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:Vessel.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:Vessel.ToString"></member><member name="M:Vessel.Translate(UnityEngine.Vector3)"></member><member name="M:Vessel.Unload"></member><member name="M:Vessel.AutoRename(Vessel,string)"></member><member name="M:Vessel.GetDominantVessel(Vessel,Vessel)"></member><member name="M:Vessel.GetLandedAtString(string)"></member><member name="M:Vessel.GetMETString(Vessel)"></member><member name="M:Vessel.GetNextManeuverTime(Vessel,bool&amp;)"></member><member name="M:Vessel.GetSituationString(Vessel)"></member><member name="M:Vessel.IsValidVesselName(string)"></member><member name="M:Vessel.#ctor"></member><member name="T:VesselModule"><summary>Like "PartModule for vessels."  If you have a VesselModule subclass, an instance of your module will be added to every vessel in the game at vessel creation time, and destroyed when the vessel is destroyed.</summary></member><member name="P:VesselModule.enabled"></member><member name="P:VesselModule.Fields"></member><member name="P:VesselModule.gameObject"></member><member name="P:VesselModule.hideFlags"></member><member name="P:VesselModule.isActiveAndEnabled"></member><member name="P:VesselModule.name"></member><member name="P:VesselModule.tag"></member><member name="P:VesselModule.transform"></member><member name="P:VesselModule.useGUILayout"></member><member name="M:VesselModule.Awake"></member><member name="M:VesselModule.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:VesselModule.BroadcastMessage(string,object)"></member><member name="M:VesselModule.BroadcastMessage(string)"></member><member name="M:VesselModule.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:VesselModule.CancelInvoke"></member><member name="M:VesselModule.CancelInvoke(string)"></member><member name="M:VesselModule.CompareTag(string)"></member><member name="M:VesselModule.Equals(object)"></member><member name="M:VesselModule.Finalize"></member><member name="M:VesselModule.GetComponent(System.Type)"></member><member name="M:VesselModule.GetComponent"></member><member name="M:VesselModule.GetComponent(string)"></member><member name="M:VesselModule.GetComponentInChildren(System.Type)"></member><member name="M:VesselModule.GetComponentInChildren"></member><member name="M:VesselModule.GetComponentInParent(System.Type)"></member><member name="M:VesselModule.GetComponentInParent"></member><member name="M:VesselModule.GetComponents(System.Type)"></member><member name="M:VesselModule.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:VesselModule.GetComponents(List)"></member><member name="M:VesselModule.GetComponents"></member><member name="M:VesselModule.GetComponentsInChildren(System.Type)"></member><member name="M:VesselModule.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:VesselModule.GetComponentsInChildren(System.Boolean)"></member><member name="M:VesselModule.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:VesselModule.GetComponentsInChildren"></member><member name="M:VesselModule.GetComponentsInChildren(List)"></member><member name="M:VesselModule.GetComponentsInParent(System.Type)"></member><member name="M:VesselModule.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:VesselModule.GetComponentsInParent(System.Boolean)"></member><member name="M:VesselModule.GetComponentsInParent(System.Boolean,List)"></member><member name="M:VesselModule.GetComponentsInParent"></member><member name="M:VesselModule.GetHashCode"></member><member name="M:VesselModule.GetInstanceID"></member><member name="M:VesselModule.GetOrder"></member><member name="M:VesselModule.GetType"></member><member name="M:VesselModule.Invoke(string,System.Single)"></member><member name="M:VesselModule.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:VesselModule.IsInvoking(string)"></member><member name="M:VesselModule.IsInvoking"></member><member name="M:VesselModule.Load(ConfigNode)"></member><member name="M:VesselModule.MemberwiseClone"></member><member name="M:VesselModule.OnAwake"></member><member name="M:VesselModule.OnLoad(ConfigNode)"></member><member name="M:VesselModule.OnSave(ConfigNode)"></member><member name="M:VesselModule.Save(ConfigNode)"></member><member name="M:VesselModule.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:VesselModule.SendMessage(string,object)"></member><member name="M:VesselModule.SendMessage(string)"></member><member name="M:VesselModule.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:VesselModule.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:VesselModule.SendMessageUpwards(string,object)"></member><member name="M:VesselModule.SendMessageUpwards(string)"></member><member name="M:VesselModule.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:VesselModule.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:VesselModule.StartCoroutine(string,object)"></member><member name="M:VesselModule.StartCoroutine(string)"></member><member name="M:VesselModule.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:VesselModule.StopAllCoroutines"></member><member name="M:VesselModule.StopCoroutine(string)"></member><member name="M:VesselModule.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:VesselModule.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:VesselModule.ToString"></member><member name="M:VesselModule.#ctor"></member><member name="T:VesselTargetModes"></member></members></doc>