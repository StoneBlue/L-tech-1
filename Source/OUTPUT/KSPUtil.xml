<?xml version="1.0" encoding="UTF-8"?><doc><assembly><name>XMLDocumentation</name></assembly><members><member name="T:ConfigNode"><summary>A ConfigNode represents a collection of data that can be serialized to or deserialized from a file. A ConfigNode contains a set of values, and optionally one or more ConfigNodes, so they can be used recursively.</summary></member><member name="F:ConfigNode.comment"></member><member name="F:ConfigNode.id"></member><member name="F:ConfigNode.name"></member><member name="F:ConfigNode.configTabIndent"></member><member name="P:ConfigNode.CountNodes"></member><member name="P:ConfigNode.CountValues"></member><member name="P:ConfigNode.HasData"></member><member name="P:ConfigNode.nodes"></member><member name="P:ConfigNode.values"></member><member name="M:ConfigNode.AddData(ConfigNode)"></member><member name="M:ConfigNode.AddNode(string)"><summary>Add a sub-ConfigNode with a given name to this node.</summary><param name="name">The name of the new node</param><returns>The newly created sub-ConfigNode</returns></member><member name="M:ConfigNode.AddNode(string,string)"></member><member name="M:ConfigNode.AddNode(ConfigNode)"></member><member name="M:ConfigNode.AddNode(string,ConfigNode)"></member><member name="M:ConfigNode.AddValue(string,object,string)"></member><member name="M:ConfigNode.AddValue(string,string,string)"></member><member name="M:ConfigNode.AddValue(string,object)"><summary>Add a new piece of data to this ConfigNode. Values show up in serialized ConfigNodes as lines of the form</summary><para><code>name = value</code></para><param name="name">The name of the new value.</param><param name="value">The data to store.</param></member><member name="M:ConfigNode.AddValue(string,string)"><summary>Add a new piece of data to this ConfigNode. Values show up in serialized ConfigNodes as lines of the form</summary><para><code>name = value</code></para><param name="name">The name of the new value.</param><param name="value">The data to store.</param></member><member name="M:ConfigNode.ClearData"><summary>Remove all nodes and values?</summary></member><member name="M:ConfigNode.ClearNodes"><summary>Remove all sub-ConfigNodes from this ConfigNode?</summary></member><member name="M:ConfigNode.ClearValues"><summary>Remove all values from this ConfigNode?</summary></member><member name="M:ConfigNode.CopyTo(ConfigNode)"><summary>Copies the contents of this node into a different ConfigNode</summary><param name="node">The ConfigNode to copy this one into.</param></member><member name="M:ConfigNode.CopyTo(ConfigNode,string)"></member><member name="M:ConfigNode.CreateCopy"></member><member name="M:ConfigNode.Equals(object)"></member><member name="M:ConfigNode.Finalize"></member><member name="M:ConfigNode.GetHashCode"></member><member name="M:ConfigNode.GetNode(string)"></member><member name="M:ConfigNode.GetNode(string,string,string)"></member><member name="M:ConfigNode.GetNode(string,System.Int32)"></member><member name="M:ConfigNode.GetNodeID(string)"></member><member name="M:ConfigNode.GetNodes(string)"></member><member name="M:ConfigNode.GetNodes(string,string,string)"></member><member name="M:ConfigNode.GetNodes"></member><member name="M:ConfigNode.GetType"></member><member name="M:ConfigNode.GetValue(string)"></member><member name="M:ConfigNode.GetValue(string,System.Int32)"></member><member name="M:ConfigNode.GetValues"></member><member name="M:ConfigNode.GetValues(string)"></member><member name="M:ConfigNode.GetValuesStartsWith(string)"></member><member name="M:ConfigNode.HasNode(string)"></member><member name="M:ConfigNode.HasNode"></member><member name="M:ConfigNode.HasNodeID(string)"></member><member name="M:ConfigNode.HasValue(string)"></member><member name="M:ConfigNode.HasValue"></member><member name="M:ConfigNode.HasValues(string[])"></member><member name="M:ConfigNode.MemberwiseClone"></member><member name="M:ConfigNode.RemoveNode(string)"></member><member name="M:ConfigNode.RemoveNode(ConfigNode)"></member><member name="M:ConfigNode.RemoveNodes(string)"></member><member name="M:ConfigNode.RemoveNodesStartWith(string)"></member><member name="M:ConfigNode.RemoveValue(string)"></member><member name="M:ConfigNode.RemoveValues(string[])"></member><member name="M:ConfigNode.RemoveValues(string)"></member><member name="M:ConfigNode.RemoveValuesStartWith(string)"></member><member name="M:ConfigNode.Save(string)"><summary>Seralize this ConfigNode to a file.</summary><param name="fileFullName">A filename (absolute path?)</param><returns>?</returns></member><member name="M:ConfigNode.Save(string,string)"></member><member name="M:ConfigNode.SetNode(string,ConfigNode,System.Boolean)"></member><member name="M:ConfigNode.SetNode(string,ConfigNode,System.Int32,System.Boolean)"></member><member name="M:ConfigNode.SetNode(string,ConfigNode)"></member><member name="M:ConfigNode.SetNode(string,ConfigNode,System.Int32)"></member><member name="M:ConfigNode.SetValue(string,string,System.Boolean)"></member><member name="M:ConfigNode.SetValue(string,string,System.Int32,System.Boolean)"></member><member name="M:ConfigNode.SetValue(string,string,string,System.Boolean)"></member><member name="M:ConfigNode.SetValue(string,string,string,System.Int32,System.Boolean)"></member><member name="M:ConfigNode.SetValue(string,string)"></member><member name="M:ConfigNode.SetValue(string,string,System.Int32)"></member><member name="M:ConfigNode.ToString"><summary>Seralizes this ConfigNode to a string.</summary><returns>A serialized version of this ConfigNode</returns></member><member name="M:ConfigNode.TryGetNode(string,ConfigNode&amp;)"></member><member name="M:ConfigNode.TryGetValue(string,string&amp;)"></member><member name="M:ConfigNode.TryGetValue(string,string[]&amp;)"></member><member name="M:ConfigNode.TryGetValue(string,float&amp;)"></member><member name="M:ConfigNode.TryGetValue(string,double&amp;)"></member><member name="M:ConfigNode.TryGetValue(string,int&amp;)"></member><member name="M:ConfigNode.TryGetValue(string,long&amp;)"></member><member name="M:ConfigNode.TryGetValue(string,bool&amp;)"></member><member name="M:ConfigNode.TryGetValue(string,UnityEngine.Vector3&amp;)"></member><member name="M:ConfigNode.TryGetValue(string,Vector3d&amp;)"></member><member name="M:ConfigNode.TryGetValue(string,UnityEngine.Vector2&amp;)"></member><member name="M:ConfigNode.TryGetValue(string,UnityEngine.Vector2d&amp;)"></member><member name="M:ConfigNode.TryGetValue(string,UnityEngine.Vector4&amp;)"></member><member name="M:ConfigNode.TryGetValue(string,UnityEngine.Vector4d&amp;)"></member><member name="M:ConfigNode.TryGetValue(string,UnityEngine.Quaternion&amp;)"></member><member name="M:ConfigNode.TryGetValue(string,UnityEngine.QuaternionD&amp;)"></member><member name="M:ConfigNode.TryGetValue(string,UnityEngine.Rect&amp;)"></member><member name="M:ConfigNode.TryGetValue(string,UnityEngine.Color&amp;)"></member><member name="M:ConfigNode.TryGetValue(string,UnityEngine.Color32&amp;)"></member><member name="M:ConfigNode.CompileConfig(ConfigNode)"></member><member name="M:ConfigNode.CreateConfigFromObject(object)"><summary>Create a ConfigNode from a given object. This function will use reflection to scan the given object looking for fields with the [Persistent] attribute. When it finds such a field  it adds it as a name-value pair to the returned ConfigNode. The name wil be the name of the field, and the value will the the serialized version of the field's data.</summary><param name="obj">The object to scan to create a ConfigNode</param><returns>A ConfigNode containing the persistent fields of the object.</returns></member><member name="M:ConfigNode.CreateConfigFromObject(object,ConfigNode)"></member><member name="M:ConfigNode.CreateConfigFromObject(object,System.Int32)"><summary>Like CreateConfigFromObject, but only pays attention to fields with the "pass" field of the [Persistent] attribute set to pass.</summary><param name="obj">The object to scan to create a ConfigNode.</param><param name="pass">A flag indicate which fields to serialize.</param><returns>A ConfigNode containing the desired persistent fields of the object.</returns></member><member name="M:ConfigNode.CreateConfigFromObject(object,System.Int32,ConfigNode)"></member><member name="M:ConfigNode.CreateObjectFromConfig(string,ConfigNode)"></member><member name="M:ConfigNode.CreateObjectFromConfig(ConfigNode)"></member><member name="M:ConfigNode.CreateObjectFromConfig(ConfigNode)"></member><member name="M:ConfigNode.Load(string)"></member><member name="M:ConfigNode.LoadObjectFromConfig(object,ConfigNode,System.Int32,System.Boolean)"></member><member name="M:ConfigNode.LoadObjectFromConfig(object,ConfigNode,System.Int32)"><summary>Like LoadObjectFromConfig, but only pays attention to fields for which the "pass" field of the [Persistent] attribute is equal to pass.</summary><param name="obj">The object to initialize</param><param name="node">The ConfigNode used to initialize the object.</param><param name="pass">A flag indicating which fields to initialize.</param><returns/></member><member name="M:ConfigNode.LoadObjectFromConfig(object,ConfigNode)"><summary>Initialize an existing object using data from the ConfigNode. This method will scan the object looking for fields with the [Persistent] attribute. When it finds such a field, it looks in the ConfigNode for a matching name-value pair, and then parses the value and sets the field to the result.</summary><param name="obj">The object to initialize</param><param name="node">The ConfigNode used to initialize the object.</param><returns/></member><member name="M:ConfigNode.Merge(ConfigNode,ConfigNode)"></member><member name="M:ConfigNode.Parse(string)"></member><member name="M:ConfigNode.ParseColor(string)"></member><member name="M:ConfigNode.ParseColor32(string)"></member><member name="M:ConfigNode.ParseEnum(System.Type,string)"></member><member name="M:ConfigNode.ParseMatrix4x4(string)"></member><member name="M:ConfigNode.ParseQuaternion(string)"></member><member name="M:ConfigNode.ParseQuaternionD(string)"></member><member name="M:ConfigNode.ParseVector2(string)"></member><member name="M:ConfigNode.ParseVector3(string)"></member><member name="M:ConfigNode.ParseVector3D(string)"></member><member name="M:ConfigNode.ParseVector4(string)"></member><member name="M:ConfigNode.WriteColor(UnityEngine.Color)"></member><member name="M:ConfigNode.WriteColor(UnityEngine.Color32)"></member><member name="M:ConfigNode.WriteEnum(System.Enum)"></member><member name="M:ConfigNode.WriteMatrix4x4(UnityEngine.Matrix4x4)"></member><member name="M:ConfigNode.WriteQuaternion(UnityEngine.Quaternion)"></member><member name="M:ConfigNode.WriteQuaternion(UnityEngine.QuaternionD)"></member><member name="M:ConfigNode.WriteVector(UnityEngine.Vector2)"></member><member name="M:ConfigNode.WriteVector(UnityEngine.Vector3)"></member><member name="M:ConfigNode.WriteVector(Vector3d)"></member><member name="M:ConfigNode.WriteVector(UnityEngine.Vector4)"></member><member name="M:ConfigNode.#ctor(string)"></member><member name="M:ConfigNode.#ctor(string,string)"></member><member name="M:ConfigNode.#ctor"></member><member name="T:EventData"><summary>A type used to generate GameEvents  Use this type with one accompanying type; GameEvents.FromToAction, GameEvents.HostedFromToAction, GameEvents.HostTargetAction are commonly used  See EventVoid for events that require no parameters or EventReport for a different style</summary><typeparam name="T">The type to be passed through on EventData.Fire()</typeparam></member><member name="F:EventData.debugEvent"><summary>Generate debug logs if true</summary></member><member name="M:EventData.Add(OnEvent)"><summary>Add a method to be run when the EventData is fired.  This is generally done in an object's Start or Awake method, or a class' constructor.  Can be setup like:  GameEvents.someEventDataEvent.Add(yourMethod);  or  GameEvents.someEventDataEvent.Add(new EventVoid.OnEvent(yourMethod));</summary><param name="evt">The method you want to add; must contain a single parameter of the type matching that in the host EventData</param></member><member name="M:EventData.Equals(object)"></member><member name="M:EventData.Finalize"></member><member name="M:EventData.Fire(T)"><summary>Triggers the EventData  All of the methods added using Add are run after this.</summary><param name="data">Single parameter matching the type of the host EventData Use this to give information relevant to the event</param></member><member name="M:EventData.GetHashCode"></member><member name="M:EventData.GetType"></member><member name="M:EventData.MemberwiseClone"></member><member name="M:EventData.OnEvent(T)"><summary>Any methods added to the event must match the delegate's parameters; one parameter of the given type in this case.</summary><param name="data"/></member><member name="M:EventData.Remove(OnEvent)"><summary>Remove a method from the list of methods to be run when the EventData is fired.  This is generally done in an object's OnDestroy method.</summary><param name="evt">The method you want to remove; must contain a single parameter of a type matching that in the host EventData</param></member><member name="M:EventData.ToString"></member><member name="M:EventData.AddEventScene(string,OnEvent,System.Boolean)"></member><member name="M:EventData.AddEventUpwards(UnityEngine.Transform,string,OnEvent,System.Boolean)"></member><member name="M:EventData.FindEventScene(string)"></member><member name="M:EventData.FindEventsScene(string)"></member><member name="M:EventData.FindEventsUpwards(UnityEngine.Transform,string)"></member><member name="M:EventData.FindEventUpwards(UnityEngine.Transform,string)"></member><member name="M:EventData.RemoveEventScene(string,OnEvent,System.Boolean)"></member><member name="M:EventData.RemoveEventUpwards(UnityEngine.Transform,string,OnEvent,System.Boolean)"></member><member name="M:EventData.#ctor(string)"><summary>The constructor used to create a new EventData  EventData&amp;lt;Vessel&amp;gt; myNewEvent = new EventData&amp;lt;Vessel&amp;gt;("myNewEvent");</summary><param name="eventName">Give the event a string name, generally the same as the declared name</param></member><member name="T:EventVoid"><summary>A type used to generate GameEvents  Use this type when there is no need to accompany the event with any parameters, ie relevant Part, Vessel, CelestialBody, etc...  See EventData for events that require such extra information</summary></member><member name="F:EventVoid.debugEvent"><summary>Generate debug logs if true</summary></member><member name="M:EventVoid.Add(EventVoid+OnEvent)"><summary>Add a method to be run when the EventVoid is fired.  This is generally done in an object's Start or Awake method, or a class' constructor.  Can be setup like:  GameEvents.someEventVoidEvent.Add(yourMethod);  or  GameEvents.someEventVoidEvent.Add(new EventVoid.OnEvent(yourMethod));</summary><param name="evt">The method you want to add, should contain no parameters</param></member><member name="M:EventVoid.Equals(object)"></member><member name="M:EventVoid.Finalize"></member><member name="M:EventVoid.Fire"><summary>Triggers the EventVoid  All of the methods added using Add are run after this.</summary></member><member name="M:EventVoid.GetHashCode"></member><member name="M:EventVoid.GetType"></member><member name="M:EventVoid.MemberwiseClone"></member><member name="M:EventVoid.OnEvent"><summary>Any methods added to the event must match the delegate's parameters; none in this case</summary></member><member name="M:EventVoid.Remove(EventVoid+OnEvent)"><summary>Remove a method from the list of methods to be run when the EventVoid is fired.  This is generally done in an object's OnDestroy method.</summary><param name="evt">The method you want to remove, should contain no parameters</param></member><member name="M:EventVoid.ToString"></member><member name="M:EventVoid.AddEventScene(string,EventVoid+OnEvent,System.Boolean)"></member><member name="M:EventVoid.AddEventUpwards(UnityEngine.Transform,string,EventVoid+OnEvent,System.Boolean)"></member><member name="M:EventVoid.FindEventScene(string)"></member><member name="M:EventVoid.FindEventsScene(string)"></member><member name="M:EventVoid.FindEventsUpwards(UnityEngine.Transform,string)"></member><member name="M:EventVoid.FindEventUpwards(UnityEngine.Transform,string)"></member><member name="M:EventVoid.RemoveEventScene(string,EventVoid+OnEvent,System.Boolean)"></member><member name="M:EventVoid.RemoveEventUpwards(UnityEngine.Transform,string,EventVoid+OnEvent,System.Boolean)"></member><member name="M:EventVoid.#ctor(string)"><summary>The constructor used to create a new EventVoid  EventVoid myNewEvent = new EventVoid("myNewEvent");</summary><param name="eventName">Give the event a string name, generally the same as the declared name</param></member><member name="T:KFSMEvent"><summary>A KFSMEvent represents a possible transition between two KFSMStates in a KerbalFSM finite state machine.</summary></member><member name="F:KFSMEvent.GoToStateOnEvent"><summary>Which state to transition to when this event is triggered.</summary></member><member name="F:KFSMEvent.name"><summary>The name of the event.</summary></member><member name="F:KFSMEvent.OnCheckCondition"><summary>You can assign to this field a delegate that takes a KFSMState (the current state) and returns a bool. The function will be called each frame and if it returns true, the event is triggered.</summary></member><member name="F:KFSMEvent.OnEvent"><summary>You can assign a delegate to this field, and the delegate will be run when the event is triggered.</summary></member><member name="F:KFSMEvent.updateMode"><summary>Specifies when OnCheckCondition should be checked?</summary></member><member name="M:KFSMEvent.Equals(object)"></member><member name="M:KFSMEvent.Finalize"></member><member name="M:KFSMEvent.GetHashCode"></member><member name="M:KFSMEvent.GetType"></member><member name="M:KFSMEvent.IsValid(KFSMState)"><summary>Whether this event can be triggered when the state machine is in the given state. Events must be added to states through KerbalFSM.AddEvent before they can be triggered, and they can only be triggered when the machine is in one of the states to which they have been added.</summary><param name="state">The state to check.</param><returns>Whether the event can be triggered from the given state.</returns></member><member name="M:KFSMEvent.MemberwiseClone"></member><member name="M:KFSMEvent.ToString"></member><member name="M:KFSMEvent.#ctor(string)"><summary>Creates a new KFSMEvent</summary><param name="name">The name of the event.</param></member><member name="T:KFSMState"><summary>Represents a state in a KerbalFSM finite state machine.</summary></member><member name="F:KFSMState.FrameCountAtStateEnter"></member><member name="F:KFSMState.name"><summary>The name of this state.</summary></member><member name="F:KFSMState.OnEnter"><summary>You can assign to this field a delegate that takes a KFSMState (which will be this state). The delegate will be called when the state machine enters this state.</summary></member><member name="F:KFSMState.OnFixedUpdate"><summary>You can assign a delegate to this field, and the delegate will be called during each FixedUpdate while the state machine is in this state.</summary></member><member name="F:KFSMState.OnLateUpdate"><summary>You can assign a delegate to this field, and the delegate will be called during each LateUpdate while the state machine is in this state.</summary></member><member name="F:KFSMState.OnLeave"><summary>You can assign to this field a delegate that takes a KFSMState. The delegate will be called when the state machine leaves this state, and the argument passed to the delegate will be the new state that the machine is transitioning to.</summary></member><member name="F:KFSMState.OnUpdate"><summary>You can assign a delegate to this field, and the delegate will be call during each Update while the state machine is in this state.</summary></member><member name="F:KFSMState.stateEvents"></member><member name="F:KFSMState.TimeAtStateEnter"></member><member name="F:KFSMState.updateMode"></member><member name="P:KFSMState.StateEvents"><summary>The set of events that are valid for this state (i.e., the possible transitions from this state).</summary></member><member name="M:KFSMState.AddEvent(KFSMEvent)"><summary>Add an event (possible transition) to this state.</summary><param name="ev">The event to add.</param></member><member name="M:KFSMState.Equals(object)"></member><member name="M:KFSMState.Finalize"></member><member name="M:KFSMState.GetHashCode"></member><member name="M:KFSMState.GetType"></member><member name="M:KFSMState.IsValid(KFSMEvent)"><summary>Whether the given event can be triggered from this state. An event must be added to a state before it can be triggered from that state.</summary><param name="ev">The event to check.</param><returns>Whether the event can be triggered from this state.</returns></member><member name="M:KFSMState.MemberwiseClone"></member><member name="M:KFSMState.ToString"></member><member name="M:KFSMState.#ctor(string)"><summary>Create a new KFSMState with a given name.</summary><param name="name">The name of the new state.</param></member><member name="T:KerbalFSM"><summary>A finite state machine. States are represented by KFSMState objects, and  "events" (transitions between states) are represented by KFSMEvent objects.</summary></member><member name="F:KerbalFSM.currentState"></member><member name="F:KerbalFSM.currentStateName"><summary>The name of the state the machine is currently in.</summary></member><member name="F:KerbalFSM.DebugBreakOnStateChange"></member><member name="F:KerbalFSM.fsmStarted"></member><member name="F:KerbalFSM.lastEvent"></member><member name="F:KerbalFSM.lastEventName"><summary>The name of the last event that occurred.</summary></member><member name="F:KerbalFSM.lastState"></member><member name="F:KerbalFSM.OnStateChange"></member><member name="F:KerbalFSM.States"></member><member name="P:KerbalFSM.CurrentState"><summary>The state the machine is currently in.</summary></member><member name="P:KerbalFSM.FramesInCurrentState"><summary>How many frames the machine has been in this state.</summary></member><member name="P:KerbalFSM.LastEvent"><summary>The last event that occurred.</summary></member><member name="P:KerbalFSM.LastState"><summary>The state the machine was in before this state.</summary></member><member name="P:KerbalFSM.Started"><summary>Whether the state machine has been started.</summary></member><member name="P:KerbalFSM.TimeAtCurrentState"><summary>How long the machine has been in the current state, in seconds.</summary></member><member name="M:KerbalFSM.AddEvent(KFSMEvent,KFSMState[])"><summary>Add a new event (possible transition) to the finite state machine.</summary><param name="ev">The event to add.</param><param name="toStates">The states to add the event to. The event can only be triggered when the machine is in one of these states.</param></member><member name="M:KerbalFSM.AddEventExcluding(KFSMEvent,KFSMState[])"><summary>Add a new event (possible transition) to the finite state machine.</summary><param name="ev">The event to add.</param><param name="excStates">A list of states *not* to add the event to. The event can only be triggered when the machine is *not* in one of these states.</param></member><member name="M:KerbalFSM.AddState(KFSMState)"><summary>Add a new possible state to the machine.</summary><param name="st">The state to add.</param></member><member name="M:KerbalFSM.Equals(object)"></member><member name="M:KerbalFSM.Finalize"></member><member name="M:KerbalFSM.FixedUpdateFSM"></member><member name="M:KerbalFSM.GetHashCode"></member><member name="M:KerbalFSM.GetType"></member><member name="M:KerbalFSM.LateUpdateFSM"></member><member name="M:KerbalFSM.MemberwiseClone"></member><member name="M:KerbalFSM.RunEvent(KFSMEvent)"><summary>Cause the machine to execute the transition specified by evt.</summary><param name="evt">The event to execute.</param></member><member name="M:KerbalFSM.StartFSM(string)"><summary>Start the state machine in a given initial state.</summary><param name="initialStateName">The name of the state to start in</param></member><member name="M:KerbalFSM.StartFSM(KFSMState)"><summary>Start the state machine in a given initial state.</summary><param name="initialState">The state to start in.</param></member><member name="M:KerbalFSM.ToString"></member><member name="M:KerbalFSM.UpdateFSM"></member><member name="M:KerbalFSM.updateFSM(KFSMUpdateMode)"></member><member name="M:KerbalFSM.#ctor"></member><member name="T:Vector3d"><summary>A Vector3d in 3D space. Vector3d is just like Unity's Vector3 class, except it uses doubles instead of floats, so refer to the Unity documentation on Vector3. Vector3d also adds a few functions.</summary></member><member name="F:Vector3d.x"></member><member name="F:Vector3d.y"></member><member name="F:Vector3d.z"></member><member name="F:Vector3d.kEpsilon"></member><member name="P:Vector3d.Item"></member><member name="P:Vector3d.magnitude"></member><member name="P:Vector3d.normalized"></member><member name="P:Vector3d.sqrMagnitude"></member><member name="P:Vector3d.xzy"><summary>Returs a new Vector3d with the y and z coordinates swapped?</summary></member><member name="P:Vector3d.back"><summary>Minus forward</summary></member><member name="P:Vector3d.down"><summary>Minus up</summary></member><member name="P:Vector3d.forward"></member><member name="P:Vector3d.fwd"></member><member name="P:Vector3d.left"><summary>Minus right.</summary></member><member name="P:Vector3d.one"></member><member name="P:Vector3d.right"></member><member name="P:Vector3d.up"></member><member name="P:Vector3d.zero"></member><member name="M:Vector3d.Equals(object)"></member><member name="M:Vector3d.Finalize"></member><member name="M:Vector3d.GetHashCode"></member><member name="M:Vector3d.GetType"></member><member name="M:Vector3d.IsZero"></member><member name="M:Vector3d.MemberwiseClone"></member><member name="M:Vector3d.Normalize"></member><member name="M:Vector3d.Scale(Vector3d)"></member><member name="M:Vector3d.ToString"></member><member name="M:Vector3d.Zero"></member><member name="M:Vector3d.Angle(Vector3d,Vector3d)"></member><member name="M:Vector3d.AngleBetween(Vector3d,Vector3d)"></member><member name="M:Vector3d.Cross(Vector3d,Vector3d)"></member><member name="M:Vector3d.Distance(Vector3d,Vector3d)"></member><member name="M:Vector3d.Dot(Vector3d,Vector3d)"></member><member name="M:Vector3d.Exclude(Vector3d,Vector3d)"><summary>Returns</summary><code>fromThat - Vector3d.Project(fromThat, excludeThis)</code><remarks>. That is, it removes the component of fromThat that is parallel to excludeThis and returns the remainder, which will be perpendicular to excludeThis.</remarks><param name="excludeThis">The direction to exclude from the result.</param><param name="fromThat">The starting vector</param><returns>A vector perpendicular to excludeThis and pointing in the same general direction as fromThat.</returns></member><member name="M:Vector3d.Lerp(Vector3d,Vector3d,System.Single)"></member><member name="M:Vector3d.Magnitude(Vector3d)"></member><member name="M:Vector3d.Max(Vector3d,Vector3d)"></member><member name="M:Vector3d.Min(Vector3d,Vector3d)"></member><member name="M:Vector3d.Normalize(Vector3d)"></member><member name="M:Vector3d.OrthoNormalize(Vector3d&amp;,Vector3d&amp;)"></member><member name="M:Vector3d.OrthoNormalize(Vector3d&amp;,Vector3d&amp;,Vector3d&amp;)"></member><member name="M:Vector3d.OrthoNormalize(Vector3d,Vector3d)"></member><member name="M:Vector3d.OrthoNormalize(Vector3d,Vector3d,Vector3d)"></member><member name="M:Vector3d.Project(Vector3d,Vector3d)"></member><member name="M:Vector3d.Reflect(Vector3d,Vector3d)"></member><member name="M:Vector3d.RotateTowards(Vector3d,Vector3d,System.Single,System.Single)"></member><member name="M:Vector3d.Scale(Vector3d,Vector3d)"></member><member name="M:Vector3d.Slerp(Vector3d,Vector3d,System.Single)"></member><member name="M:Vector3d.SqrMagnitude(Vector3d)"></member><member name="M:Vector3d.#ctor(System.Double,System.Double,System.Double)"></member><member name="M:Vector3d.#ctor(System.Double,System.Double)"></member></members></doc>